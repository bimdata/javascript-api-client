/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1 (v1)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Building from '../model/Building';
import Classification from '../model/Classification';
import ClassificationRequest from '../model/ClassificationRequest';
import CreateBuildingByNameRequest from '../model/CreateBuildingByNameRequest';
import CreateModelRequest from '../model/CreateModelRequest';
import Document from '../model/Document';
import DocumentWithElementList from '../model/DocumentWithElementList';
import Element from '../model/Element';
import ElementClassificationRelation from '../model/ElementClassificationRelation';
import ElementClassificationRelationRequest from '../model/ElementClassificationRelationRequest';
import ElementPropertySetRelationRequest from '../model/ElementPropertySetRelationRequest';
import ElementRequest from '../model/ElementRequest';
import IfcAccessToken from '../model/IfcAccessToken';
import IfcAccessTokenRequest from '../model/IfcAccessTokenRequest';
import IfcExport from '../model/IfcExport';
import IfcExportRequest from '../model/IfcExportRequest';
import IfcMergeRequest from '../model/IfcMergeRequest';
import IfcOptimizeRequest from '../model/IfcOptimizeRequest';
import Layer from '../model/Layer';
import LayerRequest from '../model/LayerRequest';
import Material from '../model/Material';
import Model from '../model/Model';
import ModelErrors from '../model/ModelErrors';
import ModelErrorsRequest from '../model/ModelErrorsRequest';
import ModelFiles from '../model/ModelFiles';
import PatchedElementRequest from '../model/PatchedElementRequest';
import PatchedIfcAccessTokenRequest from '../model/PatchedIfcAccessTokenRequest';
import PatchedLayerRequest from '../model/PatchedLayerRequest';
import PatchedModelRequest from '../model/PatchedModelRequest';
import PatchedPositioningPlanRequest from '../model/PatchedPositioningPlanRequest';
import PatchedProcessorHandlerRequest from '../model/PatchedProcessorHandlerRequest';
import PatchedPropertyDefinitionRequest from '../model/PatchedPropertyDefinitionRequest';
import PatchedPropertyRequest from '../model/PatchedPropertyRequest';
import PatchedPropertySetRequest from '../model/PatchedPropertySetRequest';
import PatchedSpaceRequest from '../model/PatchedSpaceRequest';
import PatchedSystemRequest from '../model/PatchedSystemRequest';
import PatchedUnitRequest from '../model/PatchedUnitRequest';
import PatchedZoneRequest from '../model/PatchedZoneRequest';
import PatchedZoneSpaceRequest from '../model/PatchedZoneSpaceRequest';
import PositioningPlan from '../model/PositioningPlan';
import ProcessorHandler from '../model/ProcessorHandler';
import Property from '../model/Property';
import PropertyDefinition from '../model/PropertyDefinition';
import PropertyDefinitionRequest from '../model/PropertyDefinitionRequest';
import PropertyRequest from '../model/PropertyRequest';
import PropertySet from '../model/PropertySet';
import PropertySetRequest from '../model/PropertySetRequest';
import RawElements from '../model/RawElements';
import RawElementsRequest from '../model/RawElementsRequest';
import SimpleElement from '../model/SimpleElement';
import Space from '../model/Space';
import SpaceRequest from '../model/SpaceRequest';
import Storey from '../model/Storey';
import System from '../model/System';
import SystemRequest from '../model/SystemRequest';
import Unit from '../model/Unit';
import UnitRequest from '../model/UnitRequest';
import Zone from '../model/Zone';
import ZoneRequest from '../model/ZoneRequest';
import ZoneSpace from '../model/ZoneSpace';
import ZoneSpaceRequest from '../model/ZoneSpaceRequest';

/**
* Model service.
* @module api/ModelApi
* @version 0.0.0
*/
export default class ModelApi {

    /**
    * Constructs a new ModelApi. 
    * @alias module:api/ModelApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add errors to model
     * Model errors are warnings and errors during model process. They alert about missing elements or malformed files  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {Number} projectPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/ModelErrorsRequest} opts.modelErrorsRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModelErrors} and HTTP response
     */
    addModelErrorsWithHttpInfo(cloudPk, id, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['modelErrorsRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling addModelErrors");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addModelErrors");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling addModelErrors");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ModelErrors;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{id}/errors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add errors to model
     * Model errors are warnings and errors during model process. They alert about missing elements or malformed files  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {Number} projectPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/ModelErrorsRequest} opts.modelErrorsRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModelErrors}
     */
    addModelErrors(cloudPk, id, projectPk, opts) {
      return this.addModelErrorsWithHttpInfo(cloudPk, id, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove all classifications from model's elements
     * Delete relation between filtered classifications (eg. /classifications?name=untec) and all mode's elements. No classification will be deleted on this endpoint, only the relation between model's elements and their classification.  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} modelPk 
     * @param {Number} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    bulkDeleteModelClassificationsWithHttpInfo(cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeleteModelClassifications");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling bulkDeleteModelClassifications");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeleteModelClassifications");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/classification/list_destroy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove all classifications from model's elements
     * Delete relation between filtered classifications (eg. /classifications?name=untec) and all mode's elements. No classification will be deleted on this endpoint, only the relation between model's elements and their classification.  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} modelPk 
     * @param {Number} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    bulkDeleteModelClassifications(cloudPk, modelPk, projectPk) {
      return this.bulkDeleteModelClassificationsWithHttpInfo(cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete many Property of a model
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    bulkDeleteModelPropertiesWithHttpInfo(cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeleteModelProperties");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling bulkDeleteModelProperties");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeleteModelProperties");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/property/bulk_destroy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete many Property of a model
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    bulkDeleteModelProperties(cloudPk, modelPk, projectPk) {
      return this.bulkDeleteModelPropertiesWithHttpInfo(cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete many PropertyDefinitions of a model
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    bulkDeleteModelPropertyDefinitionsWithHttpInfo(cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeleteModelPropertyDefinitions");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling bulkDeleteModelPropertyDefinitions");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeleteModelPropertyDefinitions");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertydefinition/bulk_destroy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete many PropertyDefinitions of a model
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    bulkDeleteModelPropertyDefinitions(cloudPk, modelPk, projectPk) {
      return this.bulkDeleteModelPropertyDefinitionsWithHttpInfo(cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete many Units of a model
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    bulkDeleteModelUnitsWithHttpInfo(cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeleteModelUnits");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling bulkDeleteModelUnits");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeleteModelUnits");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/unit/bulk_destroy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete many Units of a model
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    bulkDeleteModelUnits(cloudPk, modelPk, projectPk) {
      return this.bulkDeleteModelUnitsWithHttpInfo(cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete many PropertySet of a model
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    bulkDeletePropertySetWithHttpInfo(cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeletePropertySet");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling bulkDeletePropertySet");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeletePropertySet");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertyset/bulk_destroy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete many PropertySet of a model
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    bulkDeletePropertySet(cloudPk, modelPk, projectPk) {
      return this.bulkDeletePropertySetWithHttpInfo(cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update many elements at once (only changing fields may be defined)
     *  Bulk update. Similar to update, but the body should be a list of objects to patch or put The response will be a list (in the same order) of updated objects or of errors if any If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/ElementRequest>} elementRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.classification 
     * @param {String} opts.classificationNotation 
     * @param {String} opts.type 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Element>} and HTTP response
     */
    bulkFullUpdateElementsWithHttpInfo(cloudPk, modelPk, projectPk, elementRequest, opts) {
      opts = opts || {};
      let postBody = elementRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkFullUpdateElements");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling bulkFullUpdateElements");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkFullUpdateElements");
      }
      // verify the required parameter 'elementRequest' is set
      if (elementRequest === undefined || elementRequest === null) {
        throw new Error("Missing the required parameter 'elementRequest' when calling bulkFullUpdateElements");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
        'classification': opts['classification'],
        'classification__notation': opts['classificationNotation'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [Element];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/bulk_update', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update many elements at once (only changing fields may be defined)
     *  Bulk update. Similar to update, but the body should be a list of objects to patch or put The response will be a list (in the same order) of updated objects or of errors if any If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/ElementRequest>} elementRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.classification 
     * @param {String} opts.classificationNotation 
     * @param {String} opts.type 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Element>}
     */
    bulkFullUpdateElements(cloudPk, modelPk, projectPk, elementRequest, opts) {
      return this.bulkFullUpdateElementsWithHttpInfo(cloudPk, modelPk, projectPk, elementRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of many properties of a model
     *  Bulk update. Similar to update, but the body should be a list of objects to patch or put The response will be a list (in the same order) of updated objects or of errors if any If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/PropertyRequest>} propertyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Property>} and HTTP response
     */
    bulkFullUpdateModelPropertyWithHttpInfo(cloudPk, modelPk, projectPk, propertyRequest) {
      let postBody = propertyRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkFullUpdateModelProperty");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling bulkFullUpdateModelProperty");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkFullUpdateModelProperty");
      }
      // verify the required parameter 'propertyRequest' is set
      if (propertyRequest === undefined || propertyRequest === null) {
        throw new Error("Missing the required parameter 'propertyRequest' when calling bulkFullUpdateModelProperty");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [Property];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/property/bulk_update', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of many properties of a model
     *  Bulk update. Similar to update, but the body should be a list of objects to patch or put The response will be a list (in the same order) of updated objects or of errors if any If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/PropertyRequest>} propertyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Property>}
     */
    bulkFullUpdateModelProperty(cloudPk, modelPk, projectPk, propertyRequest) {
      return this.bulkFullUpdateModelPropertyWithHttpInfo(cloudPk, modelPk, projectPk, propertyRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove many classifications from an element
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    bulkRemoveClassificationsOfElementWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkRemoveClassificationsOfElement");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling bulkRemoveClassificationsOfElement");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling bulkRemoveClassificationsOfElement");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkRemoveClassificationsOfElement");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/classification/bulk_destroy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove many classifications from an element
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    bulkRemoveClassificationsOfElement(cloudPk, elementUuid, modelPk, projectPk) {
      return this.bulkRemoveClassificationsOfElementWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove many documents from an element
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    bulkRemoveDocumentsOfElementWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkRemoveDocumentsOfElement");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling bulkRemoveDocumentsOfElement");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling bulkRemoveDocumentsOfElement");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkRemoveDocumentsOfElement");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/documents/bulk_destroy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove many documents from an element
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    bulkRemoveDocumentsOfElement(cloudPk, elementUuid, modelPk, projectPk) {
      return this.bulkRemoveDocumentsOfElementWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove the classifications from all elements
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} modelClassificationPk A unique integer value identifying this classification.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    bulkRemoveElementsFromClassificationWithHttpInfo(cloudPk, modelClassificationPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkRemoveElementsFromClassification");
      }
      // verify the required parameter 'modelClassificationPk' is set
      if (modelClassificationPk === undefined || modelClassificationPk === null) {
        throw new Error("Missing the required parameter 'modelClassificationPk' when calling bulkRemoveElementsFromClassification");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling bulkRemoveElementsFromClassification");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkRemoveElementsFromClassification");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_classification_pk': modelClassificationPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/classification/{model_classification_pk}/element/bulk_destroy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove the classifications from all elements
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} modelClassificationPk A unique integer value identifying this classification.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    bulkRemoveElementsFromClassification(cloudPk, modelClassificationPk, modelPk, projectPk) {
      return this.bulkRemoveElementsFromClassificationWithHttpInfo(cloudPk, modelClassificationPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update many elements at once (all field must be defined)
     *  Bulk update. Similar to update, but the body should be a list of objects to patch or put The response will be a list (in the same order) of updated objects or of errors if any If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/ElementRequest>} elementRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.classification 
     * @param {String} opts.classificationNotation 
     * @param {String} opts.type 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Element>} and HTTP response
     */
    bulkUpdateElementsWithHttpInfo(cloudPk, modelPk, projectPk, elementRequest, opts) {
      opts = opts || {};
      let postBody = elementRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkUpdateElements");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling bulkUpdateElements");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkUpdateElements");
      }
      // verify the required parameter 'elementRequest' is set
      if (elementRequest === undefined || elementRequest === null) {
        throw new Error("Missing the required parameter 'elementRequest' when calling bulkUpdateElements");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
        'classification': opts['classification'],
        'classification__notation': opts['classificationNotation'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [Element];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/bulk_update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update many elements at once (all field must be defined)
     *  Bulk update. Similar to update, but the body should be a list of objects to patch or put The response will be a list (in the same order) of updated objects or of errors if any If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/ElementRequest>} elementRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.classification 
     * @param {String} opts.classificationNotation 
     * @param {String} opts.type 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Element>}
     */
    bulkUpdateElements(cloudPk, modelPk, projectPk, elementRequest, opts) {
      return this.bulkUpdateElementsWithHttpInfo(cloudPk, modelPk, projectPk, elementRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of many properties of a model
     *  Bulk update. Similar to update, but the body should be a list of objects to patch or put The response will be a list (in the same order) of updated objects or of errors if any If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors 
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/PropertyRequest>} propertyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Property>} and HTTP response
     */
    bulkUpdateModelPropertyWithHttpInfo(cloudPk, modelPk, projectPk, propertyRequest) {
      let postBody = propertyRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkUpdateModelProperty");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling bulkUpdateModelProperty");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkUpdateModelProperty");
      }
      // verify the required parameter 'propertyRequest' is set
      if (propertyRequest === undefined || propertyRequest === null) {
        throw new Error("Missing the required parameter 'propertyRequest' when calling bulkUpdateModelProperty");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [Property];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/property/bulk_update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update all fields of many properties of a model
     *  Bulk update. Similar to update, but the body should be a list of objects to patch or put The response will be a list (in the same order) of updated objects or of errors if any If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors 
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/PropertyRequest>} propertyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Property>}
     */
    bulkUpdateModelProperty(cloudPk, modelPk, projectPk, propertyRequest) {
      return this.bulkUpdateModelPropertyWithHttpInfo(cloudPk, modelPk, projectPk, propertyRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a token for this model
     * Tokens are read_only by default and are valid 1 day  Required scopes: ifc:token_manage, model:token_manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/IfcAccessTokenRequest} opts.ifcAccessTokenRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IfcAccessToken} and HTTP response
     */
    createAccessTokenWithHttpInfo(cloudPk, modelPk, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['ifcAccessTokenRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createAccessToken");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling createAccessToken");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createAccessToken");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = IfcAccessToken;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/access_token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a token for this model
     * Tokens are read_only by default and are valid 1 day  Required scopes: ifc:token_manage, model:token_manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/IfcAccessTokenRequest} opts.ifcAccessTokenRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IfcAccessToken}
     */
    createAccessToken(cloudPk, modelPk, projectPk, opts) {
      return this.createAccessTokenWithHttpInfo(cloudPk, modelPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a building of a model
     * Create a building of a model.  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Building} and HTTP response
     */
    createBuildingWithHttpInfo(cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createBuilding");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling createBuilding");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createBuilding");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Building;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a building of a model
     * Create a building of a model.  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Building}
     */
    createBuilding(cloudPk, modelPk, projectPk) {
      return this.createBuildingWithHttpInfo(cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a relation between a 2d model and a building
     * Create a relation between a 2d model and a building. The model type must be one of : ('DWG', 'DXF', 'PDF', 'JPEG', 'PNG')  Required scopes: ifc:write, model:write
     * @param {String} buildingUuid 
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Building} and HTTP response
     */
    createBuildingPlanWithHttpInfo(buildingUuid, cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'buildingUuid' is set
      if (buildingUuid === undefined || buildingUuid === null) {
        throw new Error("Missing the required parameter 'buildingUuid' when calling createBuildingPlan");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createBuildingPlan");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling createBuildingPlan");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createBuildingPlan");
      }

      let pathParams = {
        'building_uuid': buildingUuid,
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Building;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building/{building_uuid}/plan/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a relation between a 2d model and a building
     * Create a relation between a 2d model and a building. The model type must be one of : ('DWG', 'DXF', 'PDF', 'JPEG', 'PNG')  Required scopes: ifc:write, model:write
     * @param {String} buildingUuid 
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Building}
     */
    createBuildingPlan(buildingUuid, cloudPk, modelPk, projectPk) {
      return this.createBuildingPlanWithHttpInfo(buildingUuid, cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create association between existing classification and existing element
     * Create association between existing classification and existing element  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/ElementClassificationRelationRequest>} elementClassificationRelationRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    createClassificationElementRelationsWithHttpInfo(cloudPk, modelPk, projectPk, elementClassificationRelationRequest) {
      let postBody = elementClassificationRelationRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createClassificationElementRelations");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling createClassificationElementRelations");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createClassificationElementRelations");
      }
      // verify the required parameter 'elementClassificationRelationRequest' is set
      if (elementClassificationRelationRequest === undefined || elementClassificationRelationRequest === null) {
        throw new Error("Missing the required parameter 'elementClassificationRelationRequest' when calling createClassificationElementRelations");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/classification-element', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create association between existing classification and existing element
     * Create association between existing classification and existing element  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/ElementClassificationRelationRequest>} elementClassificationRelationRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    createClassificationElementRelations(cloudPk, modelPk, projectPk, elementClassificationRelationRequest) {
      return this.createClassificationElementRelationsWithHttpInfo(cloudPk, modelPk, projectPk, elementClassificationRelationRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create one or many classifications to an element
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors If classification created already exists, it will just be added to item's classifications and will not be duplicated  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/ClassificationRequest>} classificationRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Classification>} and HTTP response
     */
    createClassificationsOfElementWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk, classificationRequest) {
      let postBody = classificationRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createClassificationsOfElement");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createClassificationsOfElement");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling createClassificationsOfElement");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createClassificationsOfElement");
      }
      // verify the required parameter 'classificationRequest' is set
      if (classificationRequest === undefined || classificationRequest === null) {
        throw new Error("Missing the required parameter 'classificationRequest' when calling createClassificationsOfElement");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [Classification];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/classification', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create one or many classifications to an element
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors If classification created already exists, it will just be added to item's classifications and will not be duplicated  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/ClassificationRequest>} classificationRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Classification>}
     */
    createClassificationsOfElement(cloudPk, elementUuid, modelPk, projectPk, classificationRequest) {
      return this.createClassificationsOfElementWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk, classificationRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an element in the model
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/ElementRequest>} elementRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.classification 
     * @param {String} opts.classificationNotation 
     * @param {String} opts.type 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Element>} and HTTP response
     */
    createElementWithHttpInfo(cloudPk, modelPk, projectPk, elementRequest, opts) {
      opts = opts || {};
      let postBody = elementRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElement");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling createElement");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElement");
      }
      // verify the required parameter 'elementRequest' is set
      if (elementRequest === undefined || elementRequest === null) {
        throw new Error("Missing the required parameter 'elementRequest' when calling createElement");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
        'classification': opts['classification'],
        'classification__notation': opts['classificationNotation'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [Element];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an element in the model
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/ElementRequest>} elementRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.classification 
     * @param {String} opts.classificationNotation 
     * @param {String} opts.type 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Element>}
     */
    createElement(cloudPk, modelPk, projectPk, elementRequest, opts) {
      return this.createElementWithHttpInfo(cloudPk, modelPk, projectPk, elementRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a PropertySets to an element
     * Create a PropertySets that will be automatically linked to the element  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk 
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PropertySetRequest} opts.propertySetRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertySet} and HTTP response
     */
    createElementPropertySetWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['propertySetRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElementPropertySet");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createElementPropertySet");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling createElementPropertySet");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElementPropertySet");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PropertySet;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a PropertySets to an element
     * Create a PropertySets that will be automatically linked to the element  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk 
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PropertySetRequest} opts.propertySetRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertySet}
     */
    createElementPropertySet(cloudPk, elementUuid, modelPk, projectPk, opts) {
      return this.createElementPropertySetWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a property to a PropertySet
     * Create a property to a PropertySet  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @param {module:model/PropertyRequest} propertyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Property} and HTTP response
     */
    createElementPropertySetPropertyWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk, propertysetPk, propertyRequest) {
      let postBody = propertyRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElementPropertySetProperty");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createElementPropertySetProperty");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling createElementPropertySetProperty");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElementPropertySetProperty");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling createElementPropertySetProperty");
      }
      // verify the required parameter 'propertyRequest' is set
      if (propertyRequest === undefined || propertyRequest === null) {
        throw new Error("Missing the required parameter 'propertyRequest' when calling createElementPropertySetProperty");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Property;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a property to a PropertySet
     * Create a property to a PropertySet  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @param {module:model/PropertyRequest} propertyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Property}
     */
    createElementPropertySetProperty(cloudPk, elementUuid, modelPk, projectPk, propertysetPk, propertyRequest) {
      return this.createElementPropertySetPropertyWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk, propertysetPk, propertyRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Definition to a Property
     * Create a Definition to a Property  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertyPk A unique integer value identifying this property.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @param {Object} opts Optional parameters
     * @param {module:model/PropertyDefinitionRequest} opts.propertyDefinitionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertyDefinition} and HTTP response
     */
    createElementPropertySetPropertyDefinitionWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk, propertyPk, propertysetPk, opts) {
      opts = opts || {};
      let postBody = opts['propertyDefinitionRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling createElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling createElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling createElementPropertySetPropertyDefinition");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PropertyDefinition;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Definition to a Property
     * Create a Definition to a Property  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertyPk A unique integer value identifying this property.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @param {Object} opts Optional parameters
     * @param {module:model/PropertyDefinitionRequest} opts.propertyDefinitionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertyDefinition}
     */
    createElementPropertySetPropertyDefinition(cloudPk, elementUuid, modelPk, projectPk, propertyPk, propertysetPk, opts) {
      return this.createElementPropertySetPropertyDefinitionWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk, propertyPk, propertysetPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Unit to a Definition
     * Create a Unit to a Definition  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertyPk A unique integer value identifying this property.
     * @param {Number} propertydefinitionPk A unique integer value identifying this property definition.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @param {module:model/UnitRequest} unitRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Unit} and HTTP response
     */
    createElementPropertySetPropertyDefinitionUnitWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk, unitRequest) {
      let postBody = unitRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling createElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling createElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'propertydefinitionPk' is set
      if (propertydefinitionPk === undefined || propertydefinitionPk === null) {
        throw new Error("Missing the required parameter 'propertydefinitionPk' when calling createElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling createElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'unitRequest' is set
      if (unitRequest === undefined || unitRequest === null) {
        throw new Error("Missing the required parameter 'unitRequest' when calling createElementPropertySetPropertyDefinitionUnit");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertydefinition_pk': propertydefinitionPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Unit;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Unit to a Definition
     * Create a Unit to a Definition  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertyPk A unique integer value identifying this property.
     * @param {Number} propertydefinitionPk A unique integer value identifying this property definition.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @param {module:model/UnitRequest} unitRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Unit}
     */
    createElementPropertySetPropertyDefinitionUnit(cloudPk, elementUuid, modelPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk, unitRequest) {
      return this.createElementPropertySetPropertyDefinitionUnitWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk, unitRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a layer in the model
     * The IFC file will not be updated. The created layer will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {module:model/LayerRequest} layerRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Layer} and HTTP response
     */
    createLayerWithHttpInfo(cloudPk, modelPk, projectPk, layerRequest) {
      let postBody = layerRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createLayer");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling createLayer");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createLayer");
      }
      // verify the required parameter 'layerRequest' is set
      if (layerRequest === undefined || layerRequest === null) {
        throw new Error("Missing the required parameter 'layerRequest' when calling createLayer");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Layer;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/layer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a layer in the model
     * The IFC file will not be updated. The created layer will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {module:model/LayerRequest} layerRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Layer}
     */
    createLayer(cloudPk, modelPk, projectPk, layerRequest) {
      return this.createLayerWithHttpInfo(cloudPk, modelPk, projectPk, layerRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an empty 3D Model
     * Create an empty 3D Model to be used in BIMData services  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} projectPk 
     * @param {module:model/CreateBuildingByNameRequest} createBuildingByNameRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Model} and HTTP response
     */
    createMetaBuildingWithHttpInfo(cloudPk, projectPk, createBuildingByNameRequest) {
      let postBody = createBuildingByNameRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createMetaBuilding");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createMetaBuilding");
      }
      // verify the required parameter 'createBuildingByNameRequest' is set
      if (createBuildingByNameRequest === undefined || createBuildingByNameRequest === null) {
        throw new Error("Missing the required parameter 'createBuildingByNameRequest' when calling createMetaBuilding");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Model;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/create-metabuilding', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an empty 3D Model
     * Create an empty 3D Model to be used in BIMData services  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} projectPk 
     * @param {module:model/CreateBuildingByNameRequest} createBuildingByNameRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Model}
     */
    createMetaBuilding(cloudPk, projectPk, createBuildingByNameRequest) {
      return this.createMetaBuildingWithHttpInfo(cloudPk, projectPk, createBuildingByNameRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Make a PDF or Image file a Model
     * Make a PDF or Image file a Model to be used in BIMData services. If a model already exists, this route does nothing and returns a 201 with the model  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} projectPk 
     * @param {module:model/CreateModelRequest} createModelRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Model} and HTTP response
     */
    createModelWithHttpInfo(cloudPk, projectPk, createModelRequest) {
      let postBody = createModelRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createModel");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createModel");
      }
      // verify the required parameter 'createModelRequest' is set
      if (createModelRequest === undefined || createModelRequest === null) {
        throw new Error("Missing the required parameter 'createModelRequest' when calling createModel");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Model;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/create-model', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Make a PDF or Image file a Model
     * Make a PDF or Image file a Model to be used in BIMData services. If a model already exists, this route does nothing and returns a 201 with the model  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} projectPk 
     * @param {module:model/CreateModelRequest} createModelRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Model}
     */
    createModel(cloudPk, projectPk, createModelRequest) {
      return this.createModelWithHttpInfo(cloudPk, projectPk, createModelRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a PropertyDefinition on the model
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/PropertyDefinitionRequest>} propertyDefinitionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PropertyDefinition>} and HTTP response
     */
    createModelPropertyDefinitionWithHttpInfo(cloudPk, modelPk, projectPk, propertyDefinitionRequest) {
      let postBody = propertyDefinitionRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createModelPropertyDefinition");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling createModelPropertyDefinition");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createModelPropertyDefinition");
      }
      // verify the required parameter 'propertyDefinitionRequest' is set
      if (propertyDefinitionRequest === undefined || propertyDefinitionRequest === null) {
        throw new Error("Missing the required parameter 'propertyDefinitionRequest' when calling createModelPropertyDefinition");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [PropertyDefinition];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertydefinition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a PropertyDefinition on the model
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/PropertyDefinitionRequest>} propertyDefinitionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PropertyDefinition>}
     */
    createModelPropertyDefinition(cloudPk, modelPk, projectPk, propertyDefinitionRequest) {
      return this.createModelPropertyDefinitionWithHttpInfo(cloudPk, modelPk, projectPk, propertyDefinitionRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Unit on a model
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/UnitRequest>} unitRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Unit>} and HTTP response
     */
    createModelUnitWithHttpInfo(cloudPk, modelPk, projectPk, unitRequest) {
      let postBody = unitRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createModelUnit");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling createModelUnit");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createModelUnit");
      }
      // verify the required parameter 'unitRequest' is set
      if (unitRequest === undefined || unitRequest === null) {
        throw new Error("Missing the required parameter 'unitRequest' when calling createModelUnit");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [Unit];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/unit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Unit on a model
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/UnitRequest>} unitRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Unit>}
     */
    createModelUnit(cloudPk, modelPk, projectPk, unitRequest) {
      return this.createModelUnitWithHttpInfo(cloudPk, modelPk, projectPk, unitRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create one or many PropertySet
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/PropertySetRequest>} propertySetRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PropertySet>} and HTTP response
     */
    createPropertySetWithHttpInfo(cloudPk, modelPk, projectPk, propertySetRequest) {
      let postBody = propertySetRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createPropertySet");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling createPropertySet");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createPropertySet");
      }
      // verify the required parameter 'propertySetRequest' is set
      if (propertySetRequest === undefined || propertySetRequest === null) {
        throw new Error("Missing the required parameter 'propertySetRequest' when calling createPropertySet");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [PropertySet];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertyset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create one or many PropertySet
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/PropertySetRequest>} propertySetRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PropertySet>}
     */
    createPropertySet(cloudPk, modelPk, projectPk, propertySetRequest) {
      return this.createPropertySetWithHttpInfo(cloudPk, modelPk, projectPk, propertySetRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create association between PropertySet and element
     * Create association between PropertySet and element  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/ElementPropertySetRelationRequest>} elementPropertySetRelationRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    createPropertySetElementRelationsWithHttpInfo(cloudPk, modelPk, projectPk, elementPropertySetRelationRequest) {
      let postBody = elementPropertySetRelationRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createPropertySetElementRelations");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling createPropertySetElementRelations");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createPropertySetElementRelations");
      }
      // verify the required parameter 'elementPropertySetRelationRequest' is set
      if (elementPropertySetRelationRequest === undefined || elementPropertySetRelationRequest === null) {
        throw new Error("Missing the required parameter 'elementPropertySetRelationRequest' when calling createPropertySetElementRelations");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertyset-element', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create association between PropertySet and element
     * Create association between PropertySet and element  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/ElementPropertySetRelationRequest>} elementPropertySetRelationRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    createPropertySetElementRelations(cloudPk, modelPk, projectPk, elementPropertySetRelationRequest) {
      return this.createPropertySetElementRelationsWithHttpInfo(cloudPk, modelPk, projectPk, elementPropertySetRelationRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create elements in an optimized format
     * Create many elements in an optimized format to reduce JSON size and avoid redudancy. The IFC file will not be updated. The created elements will be accessible over the API and when exporting an IFC file. You can use the same optimized structure to post multiple elements, property_sets, properties, definitions and units at once. For performance reasons, we do not check the validity of the json. If the json is malformed, an error 500 without more explaination may be returned instead of a 400.  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {module:model/RawElementsRequest} rawElementsRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    createRawElementsWithHttpInfo(cloudPk, modelPk, projectPk, rawElementsRequest) {
      let postBody = rawElementsRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createRawElements");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling createRawElements");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createRawElements");
      }
      // verify the required parameter 'rawElementsRequest' is set
      if (rawElementsRequest === undefined || rawElementsRequest === null) {
        throw new Error("Missing the required parameter 'rawElementsRequest' when calling createRawElements");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/raw', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create elements in an optimized format
     * Create many elements in an optimized format to reduce JSON size and avoid redudancy. The IFC file will not be updated. The created elements will be accessible over the API and when exporting an IFC file. You can use the same optimized structure to post multiple elements, property_sets, properties, definitions and units at once. For performance reasons, we do not check the validity of the json. If the json is malformed, an error 500 without more explaination may be returned instead of a 400.  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {module:model/RawElementsRequest} rawElementsRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    createRawElements(cloudPk, modelPk, projectPk, rawElementsRequest) {
      return this.createRawElementsWithHttpInfo(cloudPk, modelPk, projectPk, rawElementsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a space in the model
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/SpaceRequest>} spaceRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Space>} and HTTP response
     */
    createSpaceWithHttpInfo(cloudPk, modelPk, projectPk, spaceRequest) {
      let postBody = spaceRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createSpace");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling createSpace");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createSpace");
      }
      // verify the required parameter 'spaceRequest' is set
      if (spaceRequest === undefined || spaceRequest === null) {
        throw new Error("Missing the required parameter 'spaceRequest' when calling createSpace");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [Space];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/space', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a space in the model
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/SpaceRequest>} spaceRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Space>}
     */
    createSpace(cloudPk, modelPk, projectPk, spaceRequest) {
      return this.createSpaceWithHttpInfo(cloudPk, modelPk, projectPk, spaceRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a storey of a model
     * Create a storey of a model.  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Storey} and HTTP response
     */
    createStoreyWithHttpInfo(cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createStorey");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling createStorey");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createStorey");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Storey;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a storey of a model
     * Create a storey of a model.  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Storey}
     */
    createStorey(cloudPk, modelPk, projectPk) {
      return this.createStoreyWithHttpInfo(cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a relation between a 2d model and a storey
     * Create a relation between a 2d model and a storey. The model type must be one of : ('DWG', 'DXF', 'PDF', 'JPEG', 'PNG')  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} storeyUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Storey} and HTTP response
     */
    createStoreyPlanWithHttpInfo(cloudPk, modelPk, projectPk, storeyUuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createStoreyPlan");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling createStoreyPlan");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createStoreyPlan");
      }
      // verify the required parameter 'storeyUuid' is set
      if (storeyUuid === undefined || storeyUuid === null) {
        throw new Error("Missing the required parameter 'storeyUuid' when calling createStoreyPlan");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'storey_uuid': storeyUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Storey;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/{storey_uuid}/plan/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a relation between a 2d model and a storey
     * Create a relation between a 2d model and a storey. The model type must be one of : ('DWG', 'DXF', 'PDF', 'JPEG', 'PNG')  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} storeyUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Storey}
     */
    createStoreyPlan(cloudPk, modelPk, projectPk, storeyUuid) {
      return this.createStoreyPlanWithHttpInfo(cloudPk, modelPk, projectPk, storeyUuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a system in the model
     * The IFC file will not be updated. The created system will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {module:model/SystemRequest} systemRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/System} and HTTP response
     */
    createSystemWithHttpInfo(cloudPk, modelPk, projectPk, systemRequest) {
      let postBody = systemRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createSystem");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling createSystem");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createSystem");
      }
      // verify the required parameter 'systemRequest' is set
      if (systemRequest === undefined || systemRequest === null) {
        throw new Error("Missing the required parameter 'systemRequest' when calling createSystem");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = System;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/system', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a system in the model
     * The IFC file will not be updated. The created system will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {module:model/SystemRequest} systemRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/System}
     */
    createSystem(cloudPk, modelPk, projectPk, systemRequest) {
      return this.createSystemWithHttpInfo(cloudPk, modelPk, projectPk, systemRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a zone in the model
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/ZoneRequest>} zoneRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.color 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Zone>} and HTTP response
     */
    createZoneWithHttpInfo(cloudPk, modelPk, projectPk, zoneRequest, opts) {
      opts = opts || {};
      let postBody = zoneRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createZone");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling createZone");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createZone");
      }
      // verify the required parameter 'zoneRequest' is set
      if (zoneRequest === undefined || zoneRequest === null) {
        throw new Error("Missing the required parameter 'zoneRequest' when calling createZone");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
        'color': opts['color']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [Zone];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a zone in the model
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/ZoneRequest>} zoneRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.color 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Zone>}
     */
    createZone(cloudPk, modelPk, projectPk, zoneRequest, opts) {
      return this.createZoneWithHttpInfo(cloudPk, modelPk, projectPk, zoneRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a space in a zone
     * The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} zonePk A unique integer value identifying this zone.
     * @param {module:model/ZoneSpaceRequest} zoneSpaceRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ZoneSpace} and HTTP response
     */
    createZoneSpaceWithHttpInfo(cloudPk, modelPk, projectPk, zonePk, zoneSpaceRequest) {
      let postBody = zoneSpaceRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createZoneSpace");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling createZoneSpace");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createZoneSpace");
      }
      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling createZoneSpace");
      }
      // verify the required parameter 'zoneSpaceRequest' is set
      if (zoneSpaceRequest === undefined || zoneSpaceRequest === null) {
        throw new Error("Missing the required parameter 'zoneSpaceRequest' when calling createZoneSpace");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'zone_pk': zonePk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ZoneSpace;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone/{zone_pk}/space', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a space in a zone
     * The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} zonePk A unique integer value identifying this zone.
     * @param {module:model/ZoneSpaceRequest} zoneSpaceRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ZoneSpace}
     */
    createZoneSpace(cloudPk, modelPk, projectPk, zonePk, zoneSpaceRequest) {
      return this.createZoneSpaceWithHttpInfo(cloudPk, modelPk, projectPk, zonePk, zoneSpaceRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a token
     * Deleting a token will revoke it.  Required scopes: ifc:token_manage, model:token_manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAccessTokenWithHttpInfo(cloudPk, modelPk, projectPk, token) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteAccessToken");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling deleteAccessToken");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteAccessToken");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteAccessToken");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/access_token/{token}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a token
     * Deleting a token will revoke it.  Required scopes: ifc:token_manage, model:token_manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAccessToken(cloudPk, modelPk, projectPk, token) {
      return this.deleteAccessTokenWithHttpInfo(cloudPk, modelPk, projectPk, token)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a building of a model
     * Delete a building of a model  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteBuildingWithHttpInfo(cloudPk, modelPk, projectPk, uuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteBuilding");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling deleteBuilding");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteBuilding");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteBuilding");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a building of a model
     * Delete a building of a model  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteBuilding(cloudPk, modelPk, projectPk, uuid) {
      return this.deleteBuildingWithHttpInfo(cloudPk, modelPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete the relation between a 2d model and a building
     * Delete the relation between a 2d model and a building  Required scopes: ifc:write, model:write
     * @param {String} buildingUuid 
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this element.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteBuildingPlanWithHttpInfo(buildingUuid, cloudPk, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'buildingUuid' is set
      if (buildingUuid === undefined || buildingUuid === null) {
        throw new Error("Missing the required parameter 'buildingUuid' when calling deleteBuildingPlan");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteBuildingPlan");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBuildingPlan");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling deleteBuildingPlan");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteBuildingPlan");
      }

      let pathParams = {
        'building_uuid': buildingUuid,
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building/{building_uuid}/plan/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete the relation between a 2d model and a building
     * Delete the relation between a 2d model and a building  Required scopes: ifc:write, model:write
     * @param {String} buildingUuid 
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this element.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteBuildingPlan(buildingUuid, cloudPk, id, modelPk, projectPk) {
      return this.deleteBuildingPlanWithHttpInfo(buildingUuid, cloudPk, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an element of a model
     * The IFC file will not be updated. The remaining elements are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteElementWithHttpInfo(cloudPk, modelPk, projectPk, uuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteElement");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling deleteElement");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteElement");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteElement");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an element of a model
     * The IFC file will not be updated. The remaining elements are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteElement(cloudPk, modelPk, projectPk, uuid) {
      return this.deleteElementWithHttpInfo(cloudPk, modelPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a layer of a model
     * The IFC file will not be updated. The remaining layers are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this layer.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteLayerWithHttpInfo(cloudPk, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteLayer");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteLayer");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling deleteLayer");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteLayer");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/layer/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a layer of a model
     * The IFC file will not be updated. The remaining layers are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this layer.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteLayer(cloudPk, id, modelPk, projectPk) {
      return this.deleteLayerWithHttpInfo(cloudPk, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a model
     * It will also delete the related document  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {Number} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteModelWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteModel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteModel");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteModel");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a model
     * It will also delete the related document  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {Number} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteModel(cloudPk, id, projectPk) {
      return this.deleteModelWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Property of a model
     * Delete a Property of a model  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this property.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteModelPropertyWithHttpInfo(cloudPk, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteModelProperty");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteModelProperty");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling deleteModelProperty");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteModelProperty");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/property/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Property of a model
     * Delete a Property of a model  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this property.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteModelProperty(cloudPk, id, modelPk, projectPk) {
      return this.deleteModelPropertyWithHttpInfo(cloudPk, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a PropertyDefinitions of a model
     * Delete a PropertyDefinitions of a model  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteModelPropertyDefinitionWithHttpInfo(cloudPk, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteModelPropertyDefinition");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteModelPropertyDefinition");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling deleteModelPropertyDefinition");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteModelPropertyDefinition");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertydefinition/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a PropertyDefinitions of a model
     * Delete a PropertyDefinitions of a model  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteModelPropertyDefinition(cloudPk, id, modelPk, projectPk) {
      return this.deleteModelPropertyDefinitionWithHttpInfo(cloudPk, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Unit of a model
     * Delete a Unit of a model  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this unit.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteModelUnitWithHttpInfo(cloudPk, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteModelUnit");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteModelUnit");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling deleteModelUnit");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteModelUnit");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/unit/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Unit of a model
     * Delete a Unit of a model  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this unit.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteModelUnit(cloudPk, id, modelPk, projectPk) {
      return this.deleteModelUnitWithHttpInfo(cloudPk, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete the Model without deleting the related document
     * Delete the Model without deleting the related document  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {Number} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteModelWithoutDocWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteModelWithoutDoc");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteModelWithoutDoc");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteModelWithoutDoc");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{id}/delete-model', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete the Model without deleting the related document
     * Delete the Model without deleting the related document  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {Number} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteModelWithoutDoc(cloudPk, id, projectPk) {
      return this.deleteModelWithoutDocWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a PropertySet of a model
     * Delete a PropertySet of a model  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this property set.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deletePropertySetWithHttpInfo(cloudPk, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deletePropertySet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePropertySet");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling deletePropertySet");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deletePropertySet");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertyset/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a PropertySet of a model
     * Delete a PropertySet of a model  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this property set.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deletePropertySet(cloudPk, id, modelPk, projectPk) {
      return this.deletePropertySetWithHttpInfo(cloudPk, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a space
     * It will not delete related zones. The IFC file will not be updated. The remaining spaces are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this space.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSpaceWithHttpInfo(cloudPk, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteSpace");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSpace");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling deleteSpace");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteSpace");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/space/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a space
     * It will not delete related zones. The IFC file will not be updated. The remaining spaces are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this space.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSpace(cloudPk, id, modelPk, projectPk) {
      return this.deleteSpaceWithHttpInfo(cloudPk, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a storey of a model
     * Delete a storey of a model  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteStoreyWithHttpInfo(cloudPk, modelPk, projectPk, uuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteStorey");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling deleteStorey");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteStorey");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteStorey");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a storey of a model
     * Delete a storey of a model  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteStorey(cloudPk, modelPk, projectPk, uuid) {
      return this.deleteStoreyWithHttpInfo(cloudPk, modelPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete the relation between a 2d model and a storey
     * Delete the relation between a 2d model and a storey  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this element.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} storeyUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteStoreyPlanWithHttpInfo(cloudPk, id, modelPk, projectPk, storeyUuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteStoreyPlan");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteStoreyPlan");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling deleteStoreyPlan");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteStoreyPlan");
      }
      // verify the required parameter 'storeyUuid' is set
      if (storeyUuid === undefined || storeyUuid === null) {
        throw new Error("Missing the required parameter 'storeyUuid' when calling deleteStoreyPlan");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'storey_uuid': storeyUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/{storey_uuid}/plan/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete the relation between a 2d model and a storey
     * Delete the relation between a 2d model and a storey  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this element.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} storeyUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteStoreyPlan(cloudPk, id, modelPk, projectPk, storeyUuid) {
      return this.deleteStoreyPlanWithHttpInfo(cloudPk, id, modelPk, projectPk, storeyUuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a system of a model
     * The IFC file will not be updated. The remaining systems are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSystemWithHttpInfo(cloudPk, modelPk, projectPk, uuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteSystem");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling deleteSystem");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteSystem");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteSystem");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/system/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a system of a model
     * The IFC file will not be updated. The remaining systems are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSystem(cloudPk, modelPk, projectPk, uuid) {
      return this.deleteSystemWithHttpInfo(cloudPk, modelPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a zone of a model
     * The IFC file will not be updated. The remaining zones are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this zone.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteZoneWithHttpInfo(cloudPk, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteZone");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteZone");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling deleteZone");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteZone");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a zone of a model
     * The IFC file will not be updated. The remaining zones are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this zone.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteZone(cloudPk, id, modelPk, projectPk) {
      return this.deleteZoneWithHttpInfo(cloudPk, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a space of a zone
     * The IFC file will not be updated. The remaining spaces are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this space.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} zonePk A unique integer value identifying this zone.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteZoneSpaceWithHttpInfo(cloudPk, id, modelPk, projectPk, zonePk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteZoneSpace");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteZoneSpace");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling deleteZoneSpace");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteZoneSpace");
      }
      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling deleteZoneSpace");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'zone_pk': zonePk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone/{zone_pk}/space/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a space of a zone
     * The IFC file will not be updated. The remaining spaces are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this space.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} zonePk A unique integer value identifying this zone.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteZoneSpace(cloudPk, id, modelPk, projectPk, zonePk) {
      return this.deleteZoneSpaceWithHttpInfo(cloudPk, id, modelPk, projectPk, zonePk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Export IFC
     * Only works for IFC files. Export IFC as requested in parameters. When the export is finished, a new IFC file with will be created in the same folder than the original IFC. You can query the folder or subscribe to the new document webhook to retrieve the result  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {Number} projectPk 
     * @param {module:model/IfcExportRequest} ifcExportRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IfcExport} and HTTP response
     */
    exportIfcWithHttpInfo(cloudPk, id, projectPk, ifcExportRequest) {
      let postBody = ifcExportRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling exportIfc");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportIfc");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling exportIfc");
      }
      // verify the required parameter 'ifcExportRequest' is set
      if (ifcExportRequest === undefined || ifcExportRequest === null) {
        throw new Error("Missing the required parameter 'ifcExportRequest' when calling exportIfc");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = IfcExport;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{id}/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Export IFC
     * Only works for IFC files. Export IFC as requested in parameters. When the export is finished, a new IFC file with will be created in the same folder than the original IFC. You can query the folder or subscribe to the new document webhook to retrieve the result  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {Number} projectPk 
     * @param {module:model/IfcExportRequest} ifcExportRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IfcExport}
     */
    exportIfc(cloudPk, id, projectPk, ifcExportRequest) {
      return this.exportIfcWithHttpInfo(cloudPk, id, projectPk, ifcExportRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of an element
     * Update all fields of an element. The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @param {module:model/ElementRequest} elementRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Element} and HTTP response
     */
    fullUpdateElementWithHttpInfo(cloudPk, modelPk, projectPk, uuid, elementRequest) {
      let postBody = elementRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateElement");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling fullUpdateElement");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateElement");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling fullUpdateElement");
      }
      // verify the required parameter 'elementRequest' is set
      if (elementRequest === undefined || elementRequest === null) {
        throw new Error("Missing the required parameter 'elementRequest' when calling fullUpdateElement");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Element;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update all fields of an element
     * Update all fields of an element. The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @param {module:model/ElementRequest} elementRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Element}
     */
    fullUpdateElement(cloudPk, modelPk, projectPk, uuid, elementRequest) {
      return this.fullUpdateElementWithHttpInfo(cloudPk, modelPk, projectPk, uuid, elementRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one token created for this model
     * Retrieve one token created for this model  Required scopes: ifc:token_manage, model:token_manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IfcAccessToken} and HTTP response
     */
    getAccessTokenWithHttpInfo(cloudPk, modelPk, projectPk, token) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getAccessToken");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getAccessToken");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getAccessToken");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getAccessToken");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IfcAccessToken;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/access_token/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve one token created for this model
     * Retrieve one token created for this model  Required scopes: ifc:token_manage, model:token_manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IfcAccessToken}
     */
    getAccessToken(cloudPk, modelPk, projectPk, token) {
      return this.getAccessTokenWithHttpInfo(cloudPk, modelPk, projectPk, token)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all tokens created for this model
     * Retrieve all tokens created for this model  Required scopes: ifc:token_manage, model:token_manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/IfcAccessToken>} and HTTP response
     */
    getAccessTokensWithHttpInfo(cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getAccessTokens");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getAccessTokens");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getAccessTokens");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IfcAccessToken];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/access_token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all tokens created for this model
     * Retrieve all tokens created for this model  Required scopes: ifc:token_manage, model:token_manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/IfcAccessToken>}
     */
    getAccessTokens(cloudPk, modelPk, projectPk) {
      return this.getAccessTokensWithHttpInfo(cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a building of a model
     * Retrieve a building of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Building} and HTTP response
     */
    getBuildingWithHttpInfo(cloudPk, modelPk, projectPk, uuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getBuilding");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getBuilding");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getBuilding");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getBuilding");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Building;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a building of a model
     * Retrieve a building of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Building}
     */
    getBuilding(cloudPk, modelPk, projectPk, uuid) {
      return this.getBuildingWithHttpInfo(cloudPk, modelPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve the postioning of the plan in the building
     * Retrieve the postioning of the plan in the building  Required scopes: ifc:read, model:read
     * @param {String} buildingUuid 
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this element.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PositioningPlan} and HTTP response
     */
    getBuildingPlanPositioningWithHttpInfo(buildingUuid, cloudPk, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'buildingUuid' is set
      if (buildingUuid === undefined || buildingUuid === null) {
        throw new Error("Missing the required parameter 'buildingUuid' when calling getBuildingPlanPositioning");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getBuildingPlanPositioning");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBuildingPlanPositioning");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getBuildingPlanPositioning");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getBuildingPlanPositioning");
      }

      let pathParams = {
        'building_uuid': buildingUuid,
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PositioningPlan;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building/{building_uuid}/plan/{id}/positioning', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve the postioning of the plan in the building
     * Retrieve the postioning of the plan in the building  Required scopes: ifc:read, model:read
     * @param {String} buildingUuid 
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this element.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PositioningPlan}
     */
    getBuildingPlanPositioning(buildingUuid, cloudPk, id, modelPk, projectPk) {
      return this.getBuildingPlanPositioningWithHttpInfo(buildingUuid, cloudPk, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all buildings of a model
     * Retrieve all buildings of a model.  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Building>} and HTTP response
     */
    getBuildingsWithHttpInfo(cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getBuildings");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getBuildings");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getBuildings");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Building];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all buildings of a model
     * Retrieve all buildings of a model.  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Building>}
     */
    getBuildings(cloudPk, modelPk, projectPk) {
      return this.getBuildingsWithHttpInfo(cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all classifications of an element
     * Retrieve all classifications of an element  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Classification>} and HTTP response
     */
    getClassificationsOfElementWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getClassificationsOfElement");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getClassificationsOfElement");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getClassificationsOfElement");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getClassificationsOfElement");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Classification];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/classification', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all classifications of an element
     * Retrieve all classifications of an element  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Classification>}
     */
    getClassificationsOfElement(cloudPk, elementUuid, modelPk, projectPk) {
      return this.getClassificationsOfElementWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all documents of an element
     * Retrieve all documents of an element  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Document>} and HTTP response
     */
    getDocumentsOfElementWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getDocumentsOfElement");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getDocumentsOfElement");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getDocumentsOfElement");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getDocumentsOfElement");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Document];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all documents of an element
     * Retrieve all documents of an element  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Document>}
     */
    getDocumentsOfElement(cloudPk, elementUuid, modelPk, projectPk) {
      return this.getDocumentsOfElementWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve an element of a model
     * Retrieve an element of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Element} and HTTP response
     */
    getElementWithHttpInfo(cloudPk, modelPk, projectPk, uuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElement");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getElement");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElement");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getElement");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Element;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve an element of a model
     * Retrieve an element of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Element}
     */
    getElement(cloudPk, modelPk, projectPk, uuid) {
      return this.getElementWithHttpInfo(cloudPk, modelPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all documents linked to any element
     * Retrieve all documents linked to any element with the list of uuids  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {String} opts.classification 
     * @param {String} opts.classificationNotation 
     * @param {String} opts.type 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/DocumentWithElementList>} and HTTP response
     */
    getElementLinkedDocumentsWithHttpInfo(cloudPk, modelPk, projectPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementLinkedDocuments");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getElementLinkedDocuments");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementLinkedDocuments");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
        'classification': opts['classification'],
        'classification__notation': opts['classificationNotation'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DocumentWithElementList];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all documents linked to any element
     * Retrieve all documents linked to any element with the list of uuids  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {String} opts.classification 
     * @param {String} opts.classificationNotation 
     * @param {String} opts.type 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/DocumentWithElementList>}
     */
    getElementLinkedDocuments(cloudPk, modelPk, projectPk, opts) {
      return this.getElementLinkedDocumentsWithHttpInfo(cloudPk, modelPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a PropertySet of an element
     * Retrieve a PropertySet of an element  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {Number} modelPk 
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertySet} and HTTP response
     */
    getElementPropertySetWithHttpInfo(cloudPk, elementUuid, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySet");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getElementPropertySet");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getElementPropertySet");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySet");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PropertySet;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a PropertySet of an element
     * Retrieve a PropertySet of an element  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {Number} modelPk 
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertySet}
     */
    getElementPropertySet(cloudPk, elementUuid, id, modelPk, projectPk) {
      return this.getElementPropertySetWithHttpInfo(cloudPk, elementUuid, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Properties of a PropertySet
     * Retrieve all Properties of a PropertySet  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Property>} and HTTP response
     */
    getElementPropertySetPropertiesWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk, propertysetPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetProperties");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetProperties");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getElementPropertySetProperties");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetProperties");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetProperties");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Property];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all Properties of a PropertySet
     * Retrieve all Properties of a PropertySet  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Property>}
     */
    getElementPropertySetProperties(cloudPk, elementUuid, modelPk, projectPk, propertysetPk) {
      return this.getElementPropertySetPropertiesWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Property of a PropertySet
     * Retrieve a Property of a PropertySet  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Property} and HTTP response
     */
    getElementPropertySetPropertyWithHttpInfo(cloudPk, elementUuid, id, modelPk, projectPk, propertysetPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetProperty");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetProperty");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getElementPropertySetProperty");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getElementPropertySetProperty");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetProperty");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetProperty");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Property;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Property of a PropertySet
     * Retrieve a Property of a PropertySet  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Property}
     */
    getElementPropertySetProperty(cloudPk, elementUuid, id, modelPk, projectPk, propertysetPk) {
      return this.getElementPropertySetPropertyWithHttpInfo(cloudPk, elementUuid, id, modelPk, projectPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Definition of a Property
     * Retrieve a Definition of a Property  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertyPk A unique integer value identifying this property.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertyDefinition} and HTTP response
     */
    getElementPropertySetPropertyDefinitionWithHttpInfo(cloudPk, elementUuid, id, modelPk, projectPk, propertyPk, propertysetPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling getElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetPropertyDefinition");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PropertyDefinition;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Definition of a Property
     * Retrieve a Definition of a Property  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertyPk A unique integer value identifying this property.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertyDefinition}
     */
    getElementPropertySetPropertyDefinition(cloudPk, elementUuid, id, modelPk, projectPk, propertyPk, propertysetPk) {
      return this.getElementPropertySetPropertyDefinitionWithHttpInfo(cloudPk, elementUuid, id, modelPk, projectPk, propertyPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Unit of a Definition
     * Retrieve a Unit of a Definition  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertyPk A unique integer value identifying this property.
     * @param {Number} propertydefinitionPk A unique integer value identifying this property definition.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Unit} and HTTP response
     */
    getElementPropertySetPropertyDefinitionUnitWithHttpInfo(cloudPk, elementUuid, id, modelPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling getElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'propertydefinitionPk' is set
      if (propertydefinitionPk === undefined || propertydefinitionPk === null) {
        throw new Error("Missing the required parameter 'propertydefinitionPk' when calling getElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetPropertyDefinitionUnit");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertydefinition_pk': propertydefinitionPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Unit;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Unit of a Definition
     * Retrieve a Unit of a Definition  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertyPk A unique integer value identifying this property.
     * @param {Number} propertydefinitionPk A unique integer value identifying this property definition.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Unit}
     */
    getElementPropertySetPropertyDefinitionUnit(cloudPk, elementUuid, id, modelPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk) {
      return this.getElementPropertySetPropertyDefinitionUnitWithHttpInfo(cloudPk, elementUuid, id, modelPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Units of a Definition
     * Retrieve all Units of a Definition  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertyPk A unique integer value identifying this property.
     * @param {Number} propertydefinitionPk A unique integer value identifying this property definition.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Unit>} and HTTP response
     */
    getElementPropertySetPropertyDefinitionUnitsWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetPropertyDefinitionUnits");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetPropertyDefinitionUnits");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getElementPropertySetPropertyDefinitionUnits");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetPropertyDefinitionUnits");
      }
      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling getElementPropertySetPropertyDefinitionUnits");
      }
      // verify the required parameter 'propertydefinitionPk' is set
      if (propertydefinitionPk === undefined || propertydefinitionPk === null) {
        throw new Error("Missing the required parameter 'propertydefinitionPk' when calling getElementPropertySetPropertyDefinitionUnits");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetPropertyDefinitionUnits");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertydefinition_pk': propertydefinitionPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Unit];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all Units of a Definition
     * Retrieve all Units of a Definition  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertyPk A unique integer value identifying this property.
     * @param {Number} propertydefinitionPk A unique integer value identifying this property definition.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Unit>}
     */
    getElementPropertySetPropertyDefinitionUnits(cloudPk, elementUuid, modelPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk) {
      return this.getElementPropertySetPropertyDefinitionUnitsWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Definitions of a PropertySet
     * Retrieve all Definitions of a PropertySet  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertyPk A unique integer value identifying this property.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PropertyDefinition>} and HTTP response
     */
    getElementPropertySetPropertyDefinitionsWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk, propertyPk, propertysetPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetPropertyDefinitions");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetPropertyDefinitions");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getElementPropertySetPropertyDefinitions");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetPropertyDefinitions");
      }
      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling getElementPropertySetPropertyDefinitions");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetPropertyDefinitions");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PropertyDefinition];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all Definitions of a PropertySet
     * Retrieve all Definitions of a PropertySet  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertyPk A unique integer value identifying this property.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PropertyDefinition>}
     */
    getElementPropertySetPropertyDefinitions(cloudPk, elementUuid, modelPk, projectPk, propertyPk, propertysetPk) {
      return this.getElementPropertySetPropertyDefinitionsWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk, propertyPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all PropertySets of an element
     * Retrieve all PropertySets of an element  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk 
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PropertySet>} and HTTP response
     */
    getElementPropertySetsWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySets");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySets");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getElementPropertySets");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySets");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PropertySet];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all PropertySets of an element
     * Retrieve all PropertySets of an element  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk 
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PropertySet>}
     */
    getElementPropertySets(cloudPk, elementUuid, modelPk, projectPk) {
      return this.getElementPropertySetsWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all elements of a model
     * Retrieve all elements of a model. If not filtered, the json may be very large. To efficently retrieve all elements and their data, see getRawElements  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {String} opts.classification 
     * @param {String} opts.classificationNotation 
     * @param {String} opts.type 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Element>} and HTTP response
     */
    getElementsWithHttpInfo(cloudPk, modelPk, projectPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElements");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getElements");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElements");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
        'classification': opts['classification'],
        'classification__notation': opts['classificationNotation'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Element];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all elements of a model
     * Retrieve all elements of a model. If not filtered, the json may be very large. To efficently retrieve all elements and their data, see getRawElements  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {String} opts.classification 
     * @param {String} opts.classificationNotation 
     * @param {String} opts.type 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Element>}
     */
    getElements(cloudPk, modelPk, projectPk, opts) {
      return this.getElementsWithHttpInfo(cloudPk, modelPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all elements with the classification
     * Retrieve all elements with the classification  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk 
     * @param {Number} modelClassificationPk A unique integer value identifying this classification.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Element>} and HTTP response
     */
    getElementsFromClassificationWithHttpInfo(cloudPk, modelClassificationPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementsFromClassification");
      }
      // verify the required parameter 'modelClassificationPk' is set
      if (modelClassificationPk === undefined || modelClassificationPk === null) {
        throw new Error("Missing the required parameter 'modelClassificationPk' when calling getElementsFromClassification");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getElementsFromClassification");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementsFromClassification");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_classification_pk': modelClassificationPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Element];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/classification/{model_classification_pk}/element', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all elements with the classification
     * Retrieve all elements with the classification  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk 
     * @param {Number} modelClassificationPk A unique integer value identifying this classification.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Element>}
     */
    getElementsFromClassification(cloudPk, modelClassificationPk, modelPk, projectPk) {
      return this.getElementsFromClassificationWithHttpInfo(cloudPk, modelClassificationPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a layer of a model
     * Retrieve a layer of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this layer.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Layer} and HTTP response
     */
    getLayerWithHttpInfo(cloudPk, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getLayer");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLayer");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getLayer");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getLayer");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Layer;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/layer/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a layer of a model
     * Retrieve a layer of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this layer.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Layer}
     */
    getLayer(cloudPk, id, modelPk, projectPk) {
      return this.getLayerWithHttpInfo(cloudPk, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all layers of a model
     * Retrieve all layers of a model.  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Layer>} and HTTP response
     */
    getLayersWithHttpInfo(cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getLayers");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getLayers");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getLayers");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Layer];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/layer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all layers of a model
     * Retrieve all layers of a model.  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Layer>}
     */
    getLayers(cloudPk, modelPk, projectPk) {
      return this.getLayersWithHttpInfo(cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a material of a model
     * Retrieve a material of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this material.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Material} and HTTP response
     */
    getMaterialWithHttpInfo(cloudPk, elementUuid, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getMaterial");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getMaterial");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMaterial");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getMaterial");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getMaterial");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Material;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/material/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a material of a model
     * Retrieve a material of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this material.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Material}
     */
    getMaterial(cloudPk, elementUuid, id, modelPk, projectPk) {
      return this.getMaterialWithHttpInfo(cloudPk, elementUuid, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all materials of a model
     * Retrieve all materials of a model.  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Material>} and HTTP response
     */
    getMaterialsWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getMaterials");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getMaterials");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getMaterials");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getMaterials");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Material];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/material', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all materials of a model
     * Retrieve all materials of a model.  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Material>}
     */
    getMaterials(cloudPk, elementUuid, modelPk, projectPk) {
      return this.getMaterialsWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one model
     * Retrieve one model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {Number} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Model} and HTTP response
     */
    getModelWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getModel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getModel");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getModel");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve one model
     * Retrieve one model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {Number} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Model}
     */
    getModel(cloudPk, id, projectPk) {
      return this.getModelWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all classifications in a model
     * Retrieve all classifications in a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk 
     * @param {Number} modelPk 
     * @param {Number} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Classification>} and HTTP response
     */
    getModelClassificationsWithHttpInfo(cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getModelClassifications");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getModelClassifications");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getModelClassifications");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Classification];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/classification', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all classifications in a model
     * Retrieve all classifications in a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk 
     * @param {Number} modelPk 
     * @param {Number} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Classification>}
     */
    getModelClassifications(cloudPk, modelPk, projectPk) {
      return this.getModelClassificationsWithHttpInfo(cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a material of a model
     * Retrieve a material of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this material.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Material} and HTTP response
     */
    getModelMaterialWithHttpInfo(cloudPk, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getModelMaterial");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getModelMaterial");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getModelMaterial");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getModelMaterial");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Material;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/material/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a material of a model
     * Retrieve a material of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this material.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Material}
     */
    getModelMaterial(cloudPk, id, modelPk, projectPk) {
      return this.getModelMaterialWithHttpInfo(cloudPk, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all materials of a model
     * Retrieve all materials of a model.  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Material>} and HTTP response
     */
    getModelMaterialsWithHttpInfo(cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getModelMaterials");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getModelMaterials");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getModelMaterials");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Material];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/material', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all materials of a model
     * Retrieve all materials of a model.  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Material>}
     */
    getModelMaterials(cloudPk, modelPk, projectPk) {
      return this.getModelMaterialsWithHttpInfo(cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Properties of a model
     * Retrieve all PropertySets of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Property>} and HTTP response
     */
    getModelPropertiesWithHttpInfo(cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getModelProperties");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getModelProperties");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getModelProperties");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Property];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/property', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all Properties of a model
     * Retrieve all PropertySets of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Property>}
     */
    getModelProperties(cloudPk, modelPk, projectPk) {
      return this.getModelPropertiesWithHttpInfo(cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Property of a model
     * Retrieve a Property of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this property.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Property} and HTTP response
     */
    getModelPropertyWithHttpInfo(cloudPk, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getModelProperty");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getModelProperty");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getModelProperty");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getModelProperty");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Property;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/property/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Property of a model
     * Retrieve a Property of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this property.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Property}
     */
    getModelProperty(cloudPk, id, modelPk, projectPk) {
      return this.getModelPropertyWithHttpInfo(cloudPk, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a PropertyDefinition of a model
     * Retrieve a PropertyDefinition of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertyDefinition} and HTTP response
     */
    getModelPropertyDefinitionWithHttpInfo(cloudPk, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getModelPropertyDefinition");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getModelPropertyDefinition");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getModelPropertyDefinition");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getModelPropertyDefinition");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PropertyDefinition;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertydefinition/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a PropertyDefinition of a model
     * Retrieve a PropertyDefinition of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertyDefinition}
     */
    getModelPropertyDefinition(cloudPk, id, modelPk, projectPk) {
      return this.getModelPropertyDefinitionWithHttpInfo(cloudPk, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all PropertyDefinitions of a model
     * Retrieve all PropertyDefinitions of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PropertyDefinition>} and HTTP response
     */
    getModelPropertyDefinitionsWithHttpInfo(cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getModelPropertyDefinitions");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getModelPropertyDefinitions");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getModelPropertyDefinitions");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PropertyDefinition];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertydefinition', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all PropertyDefinitions of a model
     * Retrieve all PropertyDefinitions of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PropertyDefinition>}
     */
    getModelPropertyDefinitions(cloudPk, modelPk, projectPk) {
      return this.getModelPropertyDefinitionsWithHttpInfo(cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Unit of a model
     * Retrieve a Unit of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this unit.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Unit} and HTTP response
     */
    getModelUnitWithHttpInfo(cloudPk, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getModelUnit");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getModelUnit");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getModelUnit");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getModelUnit");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Unit;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/unit/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Unit of a model
     * Retrieve a Unit of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this unit.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Unit}
     */
    getModelUnit(cloudPk, id, modelPk, projectPk) {
      return this.getModelUnitWithHttpInfo(cloudPk, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Units of a model
     * Retrieve all Units of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Unit>} and HTTP response
     */
    getModelUnitsWithHttpInfo(cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getModelUnits");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getModelUnits");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getModelUnits");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Unit];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/unit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all Units of a model
     * Retrieve all Units of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Unit>}
     */
    getModelUnits(cloudPk, modelPk, projectPk) {
      return this.getModelUnitsWithHttpInfo(cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all models
     * Retrieve all models. The field `type` allows you to discriminate which kind of model it is.  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk 
     * @param {Number} projectPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source 
     * @param {Array.<module:model/String>} opts.status 
     * @param {Array.<module:model/String>} opts.type 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Model>} and HTTP response
     */
    getModelsWithHttpInfo(cloudPk, projectPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getModels");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getModels");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
        'source': opts['source'],
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'type': this.apiClient.buildCollectionParam(opts['type'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Model];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all models
     * Retrieve all models. The field `type` allows you to discriminate which kind of model it is.  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk 
     * @param {Number} projectPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.source 
     * @param {Array.<module:model/String>} opts.status 
     * @param {Array.<module:model/String>} opts.type 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Model>}
     */
    getModels(cloudPk, projectPk, opts) {
      return this.getModelsWithHttpInfo(cloudPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a processor handler
     * Retrieve a processor handler  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this processor handler.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProcessorHandler} and HTTP response
     */
    getProcessorHandlerWithHttpInfo(cloudPk, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getProcessorHandler");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProcessorHandler");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getProcessorHandler");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getProcessorHandler");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessorHandler;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/processorhandler/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a processor handler
     * Retrieve a processor handler  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this processor handler.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProcessorHandler}
     */
    getProcessorHandler(cloudPk, id, modelPk, projectPk) {
      return this.getProcessorHandlerWithHttpInfo(cloudPk, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all processor handlers
     * Get all processor handlers  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ProcessorHandler>} and HTTP response
     */
    getProcessorHandlersWithHttpInfo(cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getProcessorHandlers");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getProcessorHandlers");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getProcessorHandlers");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProcessorHandler];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/processorhandler', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all processor handlers
     * Get all processor handlers  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ProcessorHandler>}
     */
    getProcessorHandlers(cloudPk, modelPk, projectPk) {
      return this.getProcessorHandlersWithHttpInfo(cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a PropertySet of a model
     * Retrieve a PropertySet of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this property set.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertySet} and HTTP response
     */
    getPropertySetWithHttpInfo(cloudPk, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getPropertySet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPropertySet");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getPropertySet");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getPropertySet");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PropertySet;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertyset/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a PropertySet of a model
     * Retrieve a PropertySet of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this property set.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertySet}
     */
    getPropertySet(cloudPk, id, modelPk, projectPk) {
      return this.getPropertySetWithHttpInfo(cloudPk, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all PropertySets of a model
     * Retrieve all PropertySets of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PropertySet>} and HTTP response
     */
    getPropertySetsWithHttpInfo(cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getPropertySets");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getPropertySets");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getPropertySets");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PropertySet];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertyset', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all PropertySets of a model
     * Retrieve all PropertySets of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PropertySet>}
     */
    getPropertySets(cloudPk, modelPk, projectPk) {
      return this.getPropertySetsWithHttpInfo(cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all elements in a optimized format
     * Instead of a nested representation, this route respond with a flat structure and indices pointing to related object. The IFC file will not be updated. The created elements will be accessible over the API and when exporting an IFC file. Returns elements, property_sets, properties, definitions and units in a JSON optimized structure  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RawElements} and HTTP response
     */
    getRawElementsWithHttpInfo(cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRawElements");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getRawElements");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRawElements");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RawElements;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/raw', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all elements in a optimized format
     * Instead of a nested representation, this route respond with a flat structure and indices pointing to related object. The IFC file will not be updated. The created elements will be accessible over the API and when exporting an IFC file. Returns elements, property_sets, properties, definitions and units in a JSON optimized structure  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RawElements}
     */
    getRawElements(cloudPk, modelPk, projectPk) {
      return this.getRawElementsWithHttpInfo(cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve an element of a model with a simple value representation
     * Retrieve an element of a model with a simple value representation  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SimpleElement} and HTTP response
     */
    getSimpleElementWithHttpInfo(cloudPk, modelPk, projectPk, uuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getSimpleElement");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getSimpleElement");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getSimpleElement");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getSimpleElement");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SimpleElement;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{uuid}/simple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve an element of a model with a simple value representation
     * Retrieve an element of a model with a simple value representation  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SimpleElement}
     */
    getSimpleElement(cloudPk, modelPk, projectPk, uuid) {
      return this.getSimpleElementWithHttpInfo(cloudPk, modelPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all elements of a model with a simple value representation
     * Retrieve all elements of a model with a simple value representation  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SimpleElement} and HTTP response
     */
    getSimpleElementsWithHttpInfo(cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getSimpleElements");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getSimpleElements");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getSimpleElements");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SimpleElement;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/simple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all elements of a model with a simple value representation
     * Retrieve all elements of a model with a simple value representation  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SimpleElement}
     */
    getSimpleElements(cloudPk, modelPk, projectPk) {
      return this.getSimpleElementsWithHttpInfo(cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one space of the model
     * Retrieve one space of the model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this space.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Space} and HTTP response
     */
    getSpaceWithHttpInfo(cloudPk, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getSpace");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSpace");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getSpace");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getSpace");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Space;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/space/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve one space of the model
     * Retrieve one space of the model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this space.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Space}
     */
    getSpace(cloudPk, id, modelPk, projectPk) {
      return this.getSpaceWithHttpInfo(cloudPk, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all spaces of the model
     * Retrieve all spaces of the model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Space>} and HTTP response
     */
    getSpacesWithHttpInfo(cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getSpaces");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getSpaces");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getSpaces");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Space];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/space', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all spaces of the model
     * Retrieve all spaces of the model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Space>}
     */
    getSpaces(cloudPk, modelPk, projectPk) {
      return this.getSpacesWithHttpInfo(cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a storey of a model
     * Retrieve a storey of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Storey} and HTTP response
     */
    getStoreyWithHttpInfo(cloudPk, modelPk, projectPk, uuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getStorey");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getStorey");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getStorey");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getStorey");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Storey;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a storey of a model
     * Retrieve a storey of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Storey}
     */
    getStorey(cloudPk, modelPk, projectPk, uuid) {
      return this.getStoreyWithHttpInfo(cloudPk, modelPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve the postioning of the plan in the storey
     * Retrieve the postioning of the plan in the storey  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this element.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} storeyUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PositioningPlan} and HTTP response
     */
    getStoreyPlanPositioningWithHttpInfo(cloudPk, id, modelPk, projectPk, storeyUuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getStoreyPlanPositioning");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStoreyPlanPositioning");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getStoreyPlanPositioning");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getStoreyPlanPositioning");
      }
      // verify the required parameter 'storeyUuid' is set
      if (storeyUuid === undefined || storeyUuid === null) {
        throw new Error("Missing the required parameter 'storeyUuid' when calling getStoreyPlanPositioning");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'storey_uuid': storeyUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PositioningPlan;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/{storey_uuid}/plan/{id}/positioning', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve the postioning of the plan in the storey
     * Retrieve the postioning of the plan in the storey  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this element.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} storeyUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PositioningPlan}
     */
    getStoreyPlanPositioning(cloudPk, id, modelPk, projectPk, storeyUuid) {
      return this.getStoreyPlanPositioningWithHttpInfo(cloudPk, id, modelPk, projectPk, storeyUuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all storeys of a model
     * Retrieve all storeys of a model.  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Storey>} and HTTP response
     */
    getStoreysWithHttpInfo(cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getStoreys");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getStoreys");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getStoreys");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Storey];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all storeys of a model
     * Retrieve all storeys of a model.  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Storey>}
     */
    getStoreys(cloudPk, modelPk, projectPk) {
      return this.getStoreysWithHttpInfo(cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a system of a model
     * Retrieve a system of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/System} and HTTP response
     */
    getSystemWithHttpInfo(cloudPk, modelPk, projectPk, uuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getSystem");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getSystem");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getSystem");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getSystem");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = System;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/system/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a system of a model
     * Retrieve a system of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/System}
     */
    getSystem(cloudPk, modelPk, projectPk, uuid) {
      return this.getSystemWithHttpInfo(cloudPk, modelPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all systems of a model
     * Retrieve all systems of a model.  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/System>} and HTTP response
     */
    getSystemsWithHttpInfo(cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getSystems");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getSystems");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getSystems");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [System];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/system', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all systems of a model
     * Retrieve all systems of a model.  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/System>}
     */
    getSystems(cloudPk, modelPk, projectPk) {
      return this.getSystemsWithHttpInfo(cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one zone of a model
     * Retrieve one zone of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this zone.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Zone} and HTTP response
     */
    getZoneWithHttpInfo(cloudPk, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getZone");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getZone");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getZone");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getZone");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Zone;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve one zone of a model
     * Retrieve one zone of a model  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this zone.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Zone}
     */
    getZone(cloudPk, id, modelPk, projectPk) {
      return this.getZoneWithHttpInfo(cloudPk, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one space of a zone
     * Retrieve one space of a zone  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this space.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} zonePk A unique integer value identifying this zone.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ZoneSpace} and HTTP response
     */
    getZoneSpaceWithHttpInfo(cloudPk, id, modelPk, projectPk, zonePk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getZoneSpace");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getZoneSpace");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getZoneSpace");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getZoneSpace");
      }
      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling getZoneSpace");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'zone_pk': zonePk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ZoneSpace;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone/{zone_pk}/space/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve one space of a zone
     * Retrieve one space of a zone  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this space.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} zonePk A unique integer value identifying this zone.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ZoneSpace}
     */
    getZoneSpace(cloudPk, id, modelPk, projectPk, zonePk) {
      return this.getZoneSpaceWithHttpInfo(cloudPk, id, modelPk, projectPk, zonePk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all spaces of a zone
     * Retrieve all spaces of a zone  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} zonePk A unique integer value identifying this zone.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ZoneSpace>} and HTTP response
     */
    getZoneSpacesWithHttpInfo(cloudPk, modelPk, projectPk, zonePk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getZoneSpaces");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getZoneSpaces");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getZoneSpaces");
      }
      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling getZoneSpaces");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'zone_pk': zonePk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ZoneSpace];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone/{zone_pk}/space', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all spaces of a zone
     * Retrieve all spaces of a zone  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} zonePk A unique integer value identifying this zone.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ZoneSpace>}
     */
    getZoneSpaces(cloudPk, modelPk, projectPk, zonePk) {
      return this.getZoneSpacesWithHttpInfo(cloudPk, modelPk, projectPk, zonePk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve zones of a model
     * Retrieve parent zones of a model. Children zones we'll be in the 'zones' field  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {String} opts.color 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Zone>} and HTTP response
     */
    getZonesWithHttpInfo(cloudPk, modelPk, projectPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getZones");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getZones");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getZones");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
        'color': opts['color']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Zone];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve zones of a model
     * Retrieve parent zones of a model. Children zones we'll be in the 'zones' field  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {String} opts.color 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Zone>}
     */
    getZones(cloudPk, modelPk, projectPk, opts) {
      return this.getZonesWithHttpInfo(cloudPk, modelPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Link one or many documents to an element
     *  Bulk relation create available. You can either post an id or a list of ids. Is you post a list, the response will be a list (in the same order) of created relation or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Document>} and HTTP response
     */
    linkDocumentsOfElementWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling linkDocumentsOfElement");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling linkDocumentsOfElement");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling linkDocumentsOfElement");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling linkDocumentsOfElement");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Document];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Link one or many documents to an element
     *  Bulk relation create available. You can either post an id or a list of ids. Is you post a list, the response will be a list (in the same order) of created relation or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Document>}
     */
    linkDocumentsOfElement(cloudPk, elementUuid, modelPk, projectPk) {
      return this.linkDocumentsOfElementWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all associations between classifications and elements
     * List all associations between classifications and elements  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ElementClassificationRelation>} and HTTP response
     */
    listClassificationElementRelationsWithHttpInfo(cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling listClassificationElementRelations");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling listClassificationElementRelations");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling listClassificationElementRelations");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ElementClassificationRelation];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/classification-element', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all associations between classifications and elements
     * List all associations between classifications and elements  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk 
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ElementClassificationRelation>}
     */
    listClassificationElementRelations(cloudPk, modelPk, projectPk) {
      return this.listClassificationElementRelationsWithHttpInfo(cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Merge IFC files
     * Only works for IFC files. Merge IFC files. The merged IFC file will be put in the same folder that the first IFC of the list  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} projectPk 
     * @param {module:model/IfcMergeRequest} ifcMergeRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    mergeIfcsWithHttpInfo(cloudPk, projectPk, ifcMergeRequest) {
      let postBody = ifcMergeRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling mergeIfcs");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling mergeIfcs");
      }
      // verify the required parameter 'ifcMergeRequest' is set
      if (ifcMergeRequest === undefined || ifcMergeRequest === null) {
        throw new Error("Missing the required parameter 'ifcMergeRequest' when calling mergeIfcs");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/merge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Merge IFC files
     * Only works for IFC files. Merge IFC files. The merged IFC file will be put in the same folder that the first IFC of the list  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} projectPk 
     * @param {module:model/IfcMergeRequest} ifcMergeRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    mergeIfcs(cloudPk, projectPk, ifcMergeRequest) {
      return this.mergeIfcsWithHttpInfo(cloudPk, projectPk, ifcMergeRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Optimize the IFC
     * Only works for IFC files. Optimize the IFC. A new optimized IFC file will be put in the same folder that the original IFC  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {Number} projectPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/IfcOptimizeRequest} opts.ifcOptimizeRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    optimizeIfcWithHttpInfo(cloudPk, id, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['ifcOptimizeRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling optimizeIfc");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling optimizeIfc");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling optimizeIfc");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{id}/optimize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Optimize the IFC
     * Only works for IFC files. Optimize the IFC. A new optimized IFC file will be put in the same folder that the original IFC  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {Number} projectPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/IfcOptimizeRequest} opts.ifcOptimizeRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    optimizeIfc(cloudPk, id, projectPk, opts) {
      return this.optimizeIfcWithHttpInfo(cloudPk, id, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove all property sets from element
     * Remove all property sets from element. Property Sets will not be deleted, just detached from element  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk 
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeAllElementPropertySetWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeAllElementPropertySet");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeAllElementPropertySet");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling removeAllElementPropertySet");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeAllElementPropertySet");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/all', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove all property sets from element
     * Remove all property sets from element. Property Sets will not be deleted, just detached from element  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} modelPk 
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeAllElementPropertySet(cloudPk, elementUuid, modelPk, projectPk) {
      return this.removeAllElementPropertySetWithHttpInfo(cloudPk, elementUuid, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a classification from an element
     * The classification will not be deleted  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this classification.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeClassificationOfElementWithHttpInfo(cloudPk, elementUuid, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeClassificationOfElement");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeClassificationOfElement");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeClassificationOfElement");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling removeClassificationOfElement");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeClassificationOfElement");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/classification/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a classification from an element
     * The classification will not be deleted  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this classification.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeClassificationOfElement(cloudPk, elementUuid, id, modelPk, projectPk) {
      return this.removeClassificationOfElementWithHttpInfo(cloudPk, elementUuid, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a documents from an element
     * The document will not be deleted  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this document.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeDocumentOfElementWithHttpInfo(cloudPk, elementUuid, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeDocumentOfElement");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeDocumentOfElement");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeDocumentOfElement");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling removeDocumentOfElement");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeDocumentOfElement");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/documents/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a documents from an element
     * The document will not be deleted  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this document.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeDocumentOfElement(cloudPk, elementUuid, id, modelPk, projectPk) {
      return this.removeDocumentOfElementWithHttpInfo(cloudPk, elementUuid, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a PropertySet from an element
     * Delete the relation between the element and the property set. Does not delete any object  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {Number} modelPk 
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeElementPropertySetWithHttpInfo(cloudPk, elementUuid, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementPropertySet");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeElementPropertySet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeElementPropertySet");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling removeElementPropertySet");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementPropertySet");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a PropertySet from an element
     * Delete the relation between the element and the property set. Does not delete any object  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {Number} modelPk 
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeElementPropertySet(cloudPk, elementUuid, id, modelPk, projectPk) {
      return this.removeElementPropertySetWithHttpInfo(cloudPk, elementUuid, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a property from a PropertySet
     * Remove a property from a PropertySet  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeElementPropertySetPropertyWithHttpInfo(cloudPk, elementUuid, id, modelPk, projectPk, propertysetPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementPropertySetProperty");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeElementPropertySetProperty");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeElementPropertySetProperty");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling removeElementPropertySetProperty");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementPropertySetProperty");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling removeElementPropertySetProperty");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a property from a PropertySet
     * Remove a property from a PropertySet  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeElementPropertySetProperty(cloudPk, elementUuid, id, modelPk, projectPk, propertysetPk) {
      return this.removeElementPropertySetPropertyWithHttpInfo(cloudPk, elementUuid, id, modelPk, projectPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Definition to a Property
     * Delete a Definition to a Property  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertyPk A unique integer value identifying this property.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeElementPropertySetPropertyDefinitionWithHttpInfo(cloudPk, elementUuid, id, modelPk, projectPk, propertyPk, propertysetPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling removeElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling removeElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling removeElementPropertySetPropertyDefinition");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Definition to a Property
     * Delete a Definition to a Property  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertyPk A unique integer value identifying this property.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeElementPropertySetPropertyDefinition(cloudPk, elementUuid, id, modelPk, projectPk, propertyPk, propertysetPk) {
      return this.removeElementPropertySetPropertyDefinitionWithHttpInfo(cloudPk, elementUuid, id, modelPk, projectPk, propertyPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a Unit from a Definition
     * Remove a Unit from a Definition  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertyPk A unique integer value identifying this property.
     * @param {Number} propertydefinitionPk A unique integer value identifying this property definition.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeElementPropertySetPropertyDefinitionUnitWithHttpInfo(cloudPk, elementUuid, id, modelPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling removeElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling removeElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'propertydefinitionPk' is set
      if (propertydefinitionPk === undefined || propertydefinitionPk === null) {
        throw new Error("Missing the required parameter 'propertydefinitionPk' when calling removeElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling removeElementPropertySetPropertyDefinitionUnit");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertydefinition_pk': propertydefinitionPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a Unit from a Definition
     * Remove a Unit from a Definition  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertyPk A unique integer value identifying this property.
     * @param {Number} propertydefinitionPk A unique integer value identifying this property definition.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeElementPropertySetPropertyDefinitionUnit(cloudPk, elementUuid, id, modelPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk) {
      return this.removeElementPropertySetPropertyDefinitionUnitWithHttpInfo(cloudPk, elementUuid, id, modelPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove the classification from all elements
     * Remove the classification from all elements. No element nor classification will be deleted  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} modelClassificationPk A unique integer value identifying this classification.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeElementsFromClassificationWithHttpInfo(cloudPk, modelClassificationPk, modelPk, projectPk, uuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementsFromClassification");
      }
      // verify the required parameter 'modelClassificationPk' is set
      if (modelClassificationPk === undefined || modelClassificationPk === null) {
        throw new Error("Missing the required parameter 'modelClassificationPk' when calling removeElementsFromClassification");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling removeElementsFromClassification");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementsFromClassification");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling removeElementsFromClassification");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_classification_pk': modelClassificationPk,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/classification/{model_classification_pk}/element/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove the classification from all elements
     * Remove the classification from all elements. No element nor classification will be deleted  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} modelClassificationPk A unique integer value identifying this classification.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeElementsFromClassification(cloudPk, modelClassificationPk, modelPk, projectPk, uuid) {
      return this.removeElementsFromClassificationWithHttpInfo(cloudPk, modelClassificationPk, modelPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reprocess Model file
     * Reprocess the model. All data that are not in the original model files will be lost  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {Number} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    reprocessModelWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling reprocessModel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reprocessModel");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling reprocessModel");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{id}/reprocess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reprocess Model file
     * Reprocess the model. All data that are not in the original model files will be lost  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {Number} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    reprocessModel(cloudPk, id, projectPk) {
      return this.reprocessModelWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a token
     * You can update the expiration date or the read_only field  Required scopes: ifc:token_manage, model:token_manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} token 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedIfcAccessTokenRequest} opts.patchedIfcAccessTokenRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IfcAccessToken} and HTTP response
     */
    updateAccessTokenWithHttpInfo(cloudPk, modelPk, projectPk, token, opts) {
      opts = opts || {};
      let postBody = opts['patchedIfcAccessTokenRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateAccessToken");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling updateAccessToken");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateAccessToken");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateAccessToken");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = IfcAccessToken;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/access_token/{token}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a token
     * You can update the expiration date or the read_only field  Required scopes: ifc:token_manage, model:token_manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} token 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedIfcAccessTokenRequest} opts.patchedIfcAccessTokenRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IfcAccessToken}
     */
    updateAccessToken(cloudPk, modelPk, projectPk, token, opts) {
      return this.updateAccessTokenWithHttpInfo(cloudPk, modelPk, projectPk, token, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a building
     * Update some fields of a building  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Building} and HTTP response
     */
    updateBuildingWithHttpInfo(cloudPk, modelPk, projectPk, uuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateBuilding");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling updateBuilding");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateBuilding");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling updateBuilding");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Building;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building/{uuid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a building
     * Update some fields of a building  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Building}
     */
    updateBuilding(cloudPk, modelPk, projectPk, uuid) {
      return this.updateBuildingWithHttpInfo(cloudPk, modelPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the postioning of the plan in the building
     * Update the postioning of the plan in the building  Required scopes: ifc:write, model:write
     * @param {String} buildingUuid 
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this element.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedPositioningPlanRequest} opts.patchedPositioningPlanRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PositioningPlan} and HTTP response
     */
    updateBuildingPlanPositioningWithHttpInfo(buildingUuid, cloudPk, id, modelPk, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedPositioningPlanRequest'];
      // verify the required parameter 'buildingUuid' is set
      if (buildingUuid === undefined || buildingUuid === null) {
        throw new Error("Missing the required parameter 'buildingUuid' when calling updateBuildingPlanPositioning");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateBuildingPlanPositioning");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBuildingPlanPositioning");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling updateBuildingPlanPositioning");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateBuildingPlanPositioning");
      }

      let pathParams = {
        'building_uuid': buildingUuid,
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PositioningPlan;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building/{building_uuid}/plan/{id}/positioning', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update the postioning of the plan in the building
     * Update the postioning of the plan in the building  Required scopes: ifc:write, model:write
     * @param {String} buildingUuid 
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this element.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedPositioningPlanRequest} opts.patchedPositioningPlanRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PositioningPlan}
     */
    updateBuildingPlanPositioning(buildingUuid, cloudPk, id, modelPk, projectPk, opts) {
      return this.updateBuildingPlanPositioningWithHttpInfo(buildingUuid, cloudPk, id, modelPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of an element
     * Update some fields of an element. The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedElementRequest} opts.patchedElementRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Element} and HTTP response
     */
    updateElementWithHttpInfo(cloudPk, modelPk, projectPk, uuid, opts) {
      opts = opts || {};
      let postBody = opts['patchedElementRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateElement");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling updateElement");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateElement");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling updateElement");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Element;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{uuid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of an element
     * Update some fields of an element. The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedElementRequest} opts.patchedElementRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Element}
     */
    updateElement(cloudPk, modelPk, projectPk, uuid, opts) {
      return this.updateElementWithHttpInfo(cloudPk, modelPk, projectPk, uuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a property from an element
     * Update a property value from an element. If the element is the only one to have this property, the property will be update in place. If many elements share this property, a new property will be created to replace the property for this element. Keeping the property for all other elements. If you want to update the property of all elements, see updateIfcProperty  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedPropertyRequest} opts.patchedPropertyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Property} and HTTP response
     */
    updateElementPropertySetPropertyWithHttpInfo(cloudPk, elementUuid, id, modelPk, projectPk, propertysetPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedPropertyRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateElementPropertySetProperty");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling updateElementPropertySetProperty");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateElementPropertySetProperty");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling updateElementPropertySetProperty");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateElementPropertySetProperty");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling updateElementPropertySetProperty");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Property;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a property from an element
     * Update a property value from an element. If the element is the only one to have this property, the property will be update in place. If many elements share this property, a new property will be created to replace the property for this element. Keeping the property for all other elements. If you want to update the property of all elements, see updateIfcProperty  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} propertysetPk A unique integer value identifying this property set.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedPropertyRequest} opts.patchedPropertyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Property}
     */
    updateElementPropertySetProperty(cloudPk, elementUuid, id, modelPk, projectPk, propertysetPk, opts) {
      return this.updateElementPropertySetPropertyWithHttpInfo(cloudPk, elementUuid, id, modelPk, projectPk, propertysetPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a layer
     * Update some fields of a layer. The IFC file will not be updated. The created layer will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this layer.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedLayerRequest} opts.patchedLayerRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Layer} and HTTP response
     */
    updateLayerWithHttpInfo(cloudPk, id, modelPk, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedLayerRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateLayer");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateLayer");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling updateLayer");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateLayer");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Layer;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/layer/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a layer
     * Update some fields of a layer. The IFC file will not be updated. The created layer will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this layer.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedLayerRequest} opts.patchedLayerRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Layer}
     */
    updateLayer(cloudPk, id, modelPk, projectPk, opts) {
      return this.updateLayerWithHttpInfo(cloudPk, id, modelPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a model
     * Update some fields of a model  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {Number} projectPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedModelRequest} opts.patchedModelRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Model} and HTTP response
     */
    updateModelWithHttpInfo(cloudPk, id, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedModelRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateModel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateModel");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateModel");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Model;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a model
     * Update some fields of a model  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {Number} projectPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedModelRequest} opts.patchedModelRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Model}
     */
    updateModel(cloudPk, id, projectPk, opts) {
      return this.updateModelWithHttpInfo(cloudPk, id, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update models file (gltf, svg, structure, etc)
     * This route does not accept JSON, only files as x-www-form-urlencoded  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {Number} projectPk 
     * @param {Object} opts Optional parameters
     * @param {File} opts.structureFile 
     * @param {File} opts.systemsFile 
     * @param {File} opts.mapFile 
     * @param {File} opts.gltfFile 
     * @param {File} opts.gltfWithOpeningsFile 
     * @param {File} opts.bvhTreeFile 
     * @param {File} opts.viewer360File 
     * @param {File} opts.xktFile 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModelFiles} and HTTP response
     */
    updateModelFilesWithHttpInfo(cloudPk, id, projectPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateModelFiles");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateModelFiles");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateModelFiles");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'structure_file': opts['structureFile'],
        'systems_file': opts['systemsFile'],
        'map_file': opts['mapFile'],
        'gltf_file': opts['gltfFile'],
        'gltf_with_openings_file': opts['gltfWithOpeningsFile'],
        'bvh_tree_file': opts['bvhTreeFile'],
        'viewer_360_file': opts['viewer360File'],
        'xkt_file': opts['xktFile']
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ModelFiles;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{id}/files', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update models file (gltf, svg, structure, etc)
     * This route does not accept JSON, only files as x-www-form-urlencoded  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {Number} projectPk 
     * @param {Object} opts Optional parameters
     * @param {File} opts.structureFile 
     * @param {File} opts.systemsFile 
     * @param {File} opts.mapFile 
     * @param {File} opts.gltfFile 
     * @param {File} opts.gltfWithOpeningsFile 
     * @param {File} opts.bvhTreeFile 
     * @param {File} opts.viewer360File 
     * @param {File} opts.xktFile 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModelFiles}
     */
    updateModelFiles(cloudPk, id, projectPk, opts) {
      return this.updateModelFilesWithHttpInfo(cloudPk, id, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a Property
     * Update some fields of a Property  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this property.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedPropertyRequest} opts.patchedPropertyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Property} and HTTP response
     */
    updateModelPropertyWithHttpInfo(cloudPk, id, modelPk, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedPropertyRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateModelProperty");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateModelProperty");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling updateModelProperty");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateModelProperty");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Property;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/property/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a Property
     * Update some fields of a Property  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this property.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedPropertyRequest} opts.patchedPropertyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Property}
     */
    updateModelProperty(cloudPk, id, modelPk, projectPk, opts) {
      return this.updateModelPropertyWithHttpInfo(cloudPk, id, modelPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of many PropertyDefinitions of a model
     * Update some fields of many PropertyDefinitions of a model  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedPropertyDefinitionRequest} opts.patchedPropertyDefinitionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertyDefinition} and HTTP response
     */
    updateModelPropertyDefinitionWithHttpInfo(cloudPk, id, modelPk, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedPropertyDefinitionRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateModelPropertyDefinition");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateModelPropertyDefinition");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling updateModelPropertyDefinition");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateModelPropertyDefinition");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PropertyDefinition;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertydefinition/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of many PropertyDefinitions of a model
     * Update some fields of many PropertyDefinitions of a model  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedPropertyDefinitionRequest} opts.patchedPropertyDefinitionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertyDefinition}
     */
    updateModelPropertyDefinition(cloudPk, id, modelPk, projectPk, opts) {
      return this.updateModelPropertyDefinitionWithHttpInfo(cloudPk, id, modelPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a Unit of a model
     * Update some fields of a Unit of a model  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this unit.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedUnitRequest} opts.patchedUnitRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Unit} and HTTP response
     */
    updateModelUnitWithHttpInfo(cloudPk, id, modelPk, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedUnitRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateModelUnit");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateModelUnit");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling updateModelUnit");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateModelUnit");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Unit;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/unit/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a Unit of a model
     * Update some fields of a Unit of a model  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this unit.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedUnitRequest} opts.patchedUnitRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Unit}
     */
    updateModelUnit(cloudPk, id, modelPk, projectPk, opts) {
      return this.updateModelUnitWithHttpInfo(cloudPk, id, modelPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update order of all plan of a building
     * Update order of all plan of a building  Required scopes: ifc:write, model:write
     * @param {String} buildingUuid 
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<Number>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Storey} and HTTP response
     */
    updateOrderBuildingPlanWithHttpInfo(buildingUuid, cloudPk, modelPk, projectPk, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'buildingUuid' is set
      if (buildingUuid === undefined || buildingUuid === null) {
        throw new Error("Missing the required parameter 'buildingUuid' when calling updateOrderBuildingPlan");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateOrderBuildingPlan");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling updateOrderBuildingPlan");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateOrderBuildingPlan");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling updateOrderBuildingPlan");
      }

      let pathParams = {
        'building_uuid': buildingUuid,
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Storey;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building/{building_uuid}/plan/order', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update order of all plan of a building
     * Update order of all plan of a building  Required scopes: ifc:write, model:write
     * @param {String} buildingUuid 
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<Number>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Storey}
     */
    updateOrderBuildingPlan(buildingUuid, cloudPk, modelPk, projectPk, requestBody) {
      return this.updateOrderBuildingPlanWithHttpInfo(buildingUuid, cloudPk, modelPk, projectPk, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update order of all plan of a storey
     * Update order of all plan of a storey  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} storeyUuid 
     * @param {Array.<Number>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Storey} and HTTP response
     */
    updateOrderStoreyPlanWithHttpInfo(cloudPk, modelPk, projectPk, storeyUuid, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateOrderStoreyPlan");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling updateOrderStoreyPlan");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateOrderStoreyPlan");
      }
      // verify the required parameter 'storeyUuid' is set
      if (storeyUuid === undefined || storeyUuid === null) {
        throw new Error("Missing the required parameter 'storeyUuid' when calling updateOrderStoreyPlan");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling updateOrderStoreyPlan");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'storey_uuid': storeyUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Storey;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/{storey_uuid}/plan/order', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update order of all plan of a storey
     * Update order of all plan of a storey  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} storeyUuid 
     * @param {Array.<Number>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Storey}
     */
    updateOrderStoreyPlan(cloudPk, modelPk, projectPk, storeyUuid, requestBody) {
      return this.updateOrderStoreyPlanWithHttpInfo(cloudPk, modelPk, projectPk, storeyUuid, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update order of all storey of a model
     * Update order of all storey of a model  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<String>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Storey>} and HTTP response
     */
    updateOrderStoreysWithHttpInfo(cloudPk, modelPk, projectPk, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateOrderStoreys");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling updateOrderStoreys");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateOrderStoreys");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling updateOrderStoreys");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [Storey];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/order', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update order of all storey of a model
     * Update order of all storey of a model  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<String>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Storey>}
     */
    updateOrderStoreys(cloudPk, modelPk, projectPk, requestBody) {
      return this.updateOrderStoreysWithHttpInfo(cloudPk, modelPk, projectPk, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the status of a processor handler
     * Update the status of a processor handler  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this processor handler.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedProcessorHandlerRequest} opts.patchedProcessorHandlerRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProcessorHandler} and HTTP response
     */
    updateProcessorHandlerWithHttpInfo(cloudPk, id, modelPk, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedProcessorHandlerRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateProcessorHandler");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProcessorHandler");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling updateProcessorHandler");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateProcessorHandler");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ProcessorHandler;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/processorhandler/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update the status of a processor handler
     * Update the status of a processor handler  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this processor handler.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedProcessorHandlerRequest} opts.patchedProcessorHandlerRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProcessorHandler}
     */
    updateProcessorHandler(cloudPk, id, modelPk, projectPk, opts) {
      return this.updateProcessorHandlerWithHttpInfo(cloudPk, id, modelPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a PropertySet
     * Update some fields of a PropertySet  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this property set.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedPropertySetRequest} opts.patchedPropertySetRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertySet} and HTTP response
     */
    updatePropertySetWithHttpInfo(cloudPk, id, modelPk, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedPropertySetRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updatePropertySet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePropertySet");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling updatePropertySet");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updatePropertySet");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PropertySet;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertyset/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a PropertySet
     * Update some fields of a PropertySet  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this property set.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedPropertySetRequest} opts.patchedPropertySetRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertySet}
     */
    updatePropertySet(cloudPk, id, modelPk, projectPk, opts) {
      return this.updatePropertySetWithHttpInfo(cloudPk, id, modelPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a space
     * Update some fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this space.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedSpaceRequest} opts.patchedSpaceRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Space} and HTTP response
     */
    updateSpaceWithHttpInfo(cloudPk, id, modelPk, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedSpaceRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateSpace");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSpace");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling updateSpace");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateSpace");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Space;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/space/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a space
     * Update some fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this space.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedSpaceRequest} opts.patchedSpaceRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Space}
     */
    updateSpace(cloudPk, id, modelPk, projectPk, opts) {
      return this.updateSpaceWithHttpInfo(cloudPk, id, modelPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a storey
     * Update some fields of a storey  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Storey} and HTTP response
     */
    updateStoreyWithHttpInfo(cloudPk, modelPk, projectPk, uuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateStorey");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling updateStorey");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateStorey");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling updateStorey");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Storey;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/{uuid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a storey
     * Update some fields of a storey  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Storey}
     */
    updateStorey(cloudPk, modelPk, projectPk, uuid) {
      return this.updateStoreyWithHttpInfo(cloudPk, modelPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the postioning of the plan in the storey
     * Update the postioning of the plan in the storey  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this element.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} storeyUuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedPositioningPlanRequest} opts.patchedPositioningPlanRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PositioningPlan} and HTTP response
     */
    updateStoreyPlanPositioningWithHttpInfo(cloudPk, id, modelPk, projectPk, storeyUuid, opts) {
      opts = opts || {};
      let postBody = opts['patchedPositioningPlanRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateStoreyPlanPositioning");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateStoreyPlanPositioning");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling updateStoreyPlanPositioning");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateStoreyPlanPositioning");
      }
      // verify the required parameter 'storeyUuid' is set
      if (storeyUuid === undefined || storeyUuid === null) {
        throw new Error("Missing the required parameter 'storeyUuid' when calling updateStoreyPlanPositioning");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'storey_uuid': storeyUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PositioningPlan;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/{storey_uuid}/plan/{id}/positioning', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update the postioning of the plan in the storey
     * Update the postioning of the plan in the storey  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this element.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} storeyUuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedPositioningPlanRequest} opts.patchedPositioningPlanRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PositioningPlan}
     */
    updateStoreyPlanPositioning(cloudPk, id, modelPk, projectPk, storeyUuid, opts) {
      return this.updateStoreyPlanPositioningWithHttpInfo(cloudPk, id, modelPk, projectPk, storeyUuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a system
     * Update some fields of a system. The IFC file will not be updated. The created system will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedSystemRequest} opts.patchedSystemRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/System} and HTTP response
     */
    updateSystemWithHttpInfo(cloudPk, modelPk, projectPk, uuid, opts) {
      opts = opts || {};
      let postBody = opts['patchedSystemRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateSystem");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling updateSystem");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateSystem");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling updateSystem");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = System;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/system/{uuid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a system
     * Update some fields of a system. The IFC file will not be updated. The created system will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedSystemRequest} opts.patchedSystemRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/System}
     */
    updateSystem(cloudPk, modelPk, projectPk, uuid, opts) {
      return this.updateSystemWithHttpInfo(cloudPk, modelPk, projectPk, uuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a zone
     * Update some fields of a zone. The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this zone.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedZoneRequest} opts.patchedZoneRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Zone} and HTTP response
     */
    updateZoneWithHttpInfo(cloudPk, id, modelPk, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedZoneRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateZone");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateZone");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling updateZone");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateZone");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Zone;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a zone
     * Update some fields of a zone. The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this zone.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedZoneRequest} opts.patchedZoneRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Zone}
     */
    updateZone(cloudPk, id, modelPk, projectPk, opts) {
      return this.updateZoneWithHttpInfo(cloudPk, id, modelPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a space
     * Update some fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this space.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} zonePk A unique integer value identifying this zone.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedZoneSpaceRequest} opts.patchedZoneSpaceRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ZoneSpace} and HTTP response
     */
    updateZoneSpaceWithHttpInfo(cloudPk, id, modelPk, projectPk, zonePk, opts) {
      opts = opts || {};
      let postBody = opts['patchedZoneSpaceRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateZoneSpace");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateZoneSpace");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling updateZoneSpace");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateZoneSpace");
      }
      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling updateZoneSpace");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk,
        'zone_pk': zonePk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ZoneSpace;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone/{zone_pk}/space/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a space
     * Update some fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this space.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} zonePk A unique integer value identifying this zone.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedZoneSpaceRequest} opts.patchedZoneSpaceRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ZoneSpace}
     */
    updateZoneSpace(cloudPk, id, modelPk, projectPk, zonePk, opts) {
      return this.updateZoneSpaceWithHttpInfo(cloudPk, id, modelPk, projectPk, zonePk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
