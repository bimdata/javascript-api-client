/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CheckPlan from '../model/CheckPlan';
import CheckerResult from '../model/CheckerResult';
import IfcChecker from '../model/IfcChecker';
import Rule from '../model/Rule';
import RuleComponent from '../model/RuleComponent';
import Ruleset from '../model/Ruleset';

/**
* Checkplan service.
* @module api/CheckplanApi
* @version 0.0.0
*/
export default class CheckplanApi {

    /**
    * Constructs a new CheckplanApi. 
    * @alias module:api/CheckplanApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a checker to a model
     * Verify parent existence before creating to avoid applications of creating objects in a project they don't own Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/IfcChecker} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IfcChecker} and HTTP response
     */
    createCheckerWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createChecker");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createChecker");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createChecker");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createChecker");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IfcChecker;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a checker to a model
     * Verify parent existence before creating to avoid applications of creating objects in a project they don't own Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/IfcChecker} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IfcChecker}
     */
    createChecker(cloudPk, ifcPk, projectPk, data) {
      return this.createCheckerWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a CheckerResult
     * Verify parent existence before creating to avoid applications of creating objects in a project they don't own Required scopes: check:write
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/CheckerResult} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckerResult} and HTTP response
     */
    createCheckerResultWithHttpInfo(checkerPk, cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling createCheckerResult");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createCheckerResult");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createCheckerResult");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createCheckerResult");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createCheckerResult");
      }

      let pathParams = {
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckerResult;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a CheckerResult
     * Verify parent existence before creating to avoid applications of creating objects in a project they don't own Required scopes: check:write
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/CheckerResult} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckerResult}
     */
    createCheckerResult(checkerPk, cloudPk, ifcPk, projectPk, data) {
      return this.createCheckerResultWithHttpInfo(checkerPk, cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Checkplan
     * Verify parent existence before creating to avoid applications of creating objects in a project they don't own Required scopes: check:write
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {module:model/CheckPlan} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckPlan} and HTTP response
     */
    createCheckplanWithHttpInfo(cloudPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createCheckplan");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createCheckplan");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createCheckplan");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckPlan;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Checkplan
     * Verify parent existence before creating to avoid applications of creating objects in a project they don't own Required scopes: check:write
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {module:model/CheckPlan} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckPlan}
     */
    createCheckplan(cloudPk, projectPk, data) {
      return this.createCheckplanWithHttpInfo(cloudPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Rule
     * Verify parent existence before creating to avoid applications of creating objects in a project they don't own Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} rulesetPk 
     * @param {module:model/Rule} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Rule} and HTTP response
     */
    createRuleWithHttpInfo(checkPlanPk, cloudPk, projectPk, rulesetPk, data) {
      let postBody = data;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling createRule");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createRule");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createRule");
      }
      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling createRule");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createRule");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ruleset_pk': rulesetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Rule;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Rule
     * Verify parent existence before creating to avoid applications of creating objects in a project they don't own Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} rulesetPk 
     * @param {module:model/Rule} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Rule}
     */
    createRule(checkPlanPk, cloudPk, projectPk, rulesetPk, data) {
      return this.createRuleWithHttpInfo(checkPlanPk, cloudPk, projectPk, rulesetPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a RuleComponent
     * Verify parent existence before creating to avoid applications of creating objects in a project they don't own Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} rulePk 
     * @param {String} rulesetPk 
     * @param {module:model/RuleComponent} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RuleComponent} and HTTP response
     */
    createRuleComponentWithHttpInfo(checkPlanPk, cloudPk, projectPk, rulePk, rulesetPk, data) {
      let postBody = data;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling createRuleComponent");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createRuleComponent");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createRuleComponent");
      }
      // verify the required parameter 'rulePk' is set
      if (rulePk === undefined || rulePk === null) {
        throw new Error("Missing the required parameter 'rulePk' when calling createRuleComponent");
      }
      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling createRuleComponent");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createRuleComponent");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'rule_pk': rulePk,
        'ruleset_pk': rulesetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RuleComponent;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a RuleComponent
     * Verify parent existence before creating to avoid applications of creating objects in a project they don't own Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} rulePk 
     * @param {String} rulesetPk 
     * @param {module:model/RuleComponent} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RuleComponent}
     */
    createRuleComponent(checkPlanPk, cloudPk, projectPk, rulePk, rulesetPk, data) {
      return this.createRuleComponentWithHttpInfo(checkPlanPk, cloudPk, projectPk, rulePk, rulesetPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Ruleset
     * Verify parent existence before creating to avoid applications of creating objects in a project they don't own Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {module:model/Ruleset} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ruleset} and HTTP response
     */
    createRulesetWithHttpInfo(checkPlanPk, cloudPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling createRuleset");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createRuleset");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createRuleset");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createRuleset");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Ruleset;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Ruleset
     * Verify parent existence before creating to avoid applications of creating objects in a project they don't own Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {module:model/Ruleset} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ruleset}
     */
    createRuleset(checkPlanPk, cloudPk, projectPk, data) {
      return this.createRulesetWithHttpInfo(checkPlanPk, cloudPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCheckerWithHttpInfo(cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteChecker");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteChecker");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteChecker");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteChecker");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteChecker(cloudPk, id, ifcPk, projectPk) {
      return this.deleteCheckerWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a CheckerResult
     * Delete a CheckerResult Required scopes: check:write
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCheckerResultWithHttpInfo(checkerPk, cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling deleteCheckerResult");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteCheckerResult");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCheckerResult");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteCheckerResult");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteCheckerResult");
      }

      let pathParams = {
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a CheckerResult
     * Delete a CheckerResult Required scopes: check:write
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCheckerResult(checkerPk, cloudPk, id, ifcPk, projectPk) {
      return this.deleteCheckerResultWithHttpInfo(checkerPk, cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Checkplan
     * Delete a Checkplan Required scopes: check:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this check plan.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCheckplanWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteCheckplan");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCheckplan");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteCheckplan");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Checkplan
     * Delete a Checkplan Required scopes: check:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this check plan.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCheckplan(cloudPk, id, projectPk) {
      return this.deleteCheckplanWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Rule
     * Delete a Rule Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule.
     * @param {String} projectPk 
     * @param {String} rulesetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteRuleWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulesetPk) {
      let postBody = null;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling deleteRule");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteRule");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRule");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteRule");
      }
      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling deleteRule");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk,
        'ruleset_pk': rulesetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Rule
     * Delete a Rule Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule.
     * @param {String} projectPk 
     * @param {String} rulesetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteRule(checkPlanPk, cloudPk, id, projectPk, rulesetPk) {
      return this.deleteRuleWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulesetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a RuleComponent
     * Delete a RuleComponent Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule component.
     * @param {String} projectPk 
     * @param {String} rulePk 
     * @param {String} rulesetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteRuleComponentWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk) {
      let postBody = null;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling deleteRuleComponent");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteRuleComponent");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRuleComponent");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteRuleComponent");
      }
      // verify the required parameter 'rulePk' is set
      if (rulePk === undefined || rulePk === null) {
        throw new Error("Missing the required parameter 'rulePk' when calling deleteRuleComponent");
      }
      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling deleteRuleComponent");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk,
        'rule_pk': rulePk,
        'ruleset_pk': rulesetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a RuleComponent
     * Delete a RuleComponent Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule component.
     * @param {String} projectPk 
     * @param {String} rulePk 
     * @param {String} rulesetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteRuleComponent(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk) {
      return this.deleteRuleComponentWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Ruleset
     * Delete a Ruleset Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ruleset.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteRulesetWithHttpInfo(checkPlanPk, cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling deleteRuleset");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteRuleset");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRuleset");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteRuleset");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Ruleset
     * Delete a Ruleset Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ruleset.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteRuleset(checkPlanPk, cloudPk, id, projectPk) {
      return this.deleteRulesetWithHttpInfo(checkPlanPk, cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/IfcChecker} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IfcChecker} and HTTP response
     */
    fullUpdateCheckerWithHttpInfo(cloudPk, id, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateChecker");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateChecker");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateChecker");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateChecker");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateChecker");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IfcChecker;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update all fields of a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/IfcChecker} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IfcChecker}
     */
    fullUpdateChecker(cloudPk, id, ifcPk, projectPk, data) {
      return this.fullUpdateCheckerWithHttpInfo(cloudPk, id, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of a CheckerResult
     * Update all fields of a CheckerResult Required scopes: check:write
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/CheckerResult} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckerResult} and HTTP response
     */
    fullUpdateCheckerResultWithHttpInfo(checkerPk, cloudPk, id, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling fullUpdateCheckerResult");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateCheckerResult");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateCheckerResult");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateCheckerResult");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateCheckerResult");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateCheckerResult");
      }

      let pathParams = {
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckerResult;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update all fields of a CheckerResult
     * Update all fields of a CheckerResult Required scopes: check:write
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/CheckerResult} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckerResult}
     */
    fullUpdateCheckerResult(checkerPk, cloudPk, id, ifcPk, projectPk, data) {
      return this.fullUpdateCheckerResultWithHttpInfo(checkerPk, cloudPk, id, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of a Checkplan
     * Update all fields of a Checkplan Required scopes: check:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this check plan.
     * @param {String} projectPk 
     * @param {module:model/CheckPlan} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckPlan} and HTTP response
     */
    fullUpdateCheckplanWithHttpInfo(cloudPk, id, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateCheckplan");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateCheckplan");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateCheckplan");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateCheckplan");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckPlan;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update all fields of a Checkplan
     * Update all fields of a Checkplan Required scopes: check:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this check plan.
     * @param {String} projectPk 
     * @param {module:model/CheckPlan} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckPlan}
     */
    fullUpdateCheckplan(cloudPk, id, projectPk, data) {
      return this.fullUpdateCheckplanWithHttpInfo(cloudPk, id, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of a Rule
     * Update all fields of a Rule Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule.
     * @param {String} projectPk 
     * @param {String} rulesetPk 
     * @param {module:model/Rule} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Rule} and HTTP response
     */
    fullUpdateRuleWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulesetPk, data) {
      let postBody = data;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling fullUpdateRule");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateRule");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateRule");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateRule");
      }
      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling fullUpdateRule");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateRule");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk,
        'ruleset_pk': rulesetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Rule;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update all fields of a Rule
     * Update all fields of a Rule Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule.
     * @param {String} projectPk 
     * @param {String} rulesetPk 
     * @param {module:model/Rule} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Rule}
     */
    fullUpdateRule(checkPlanPk, cloudPk, id, projectPk, rulesetPk, data) {
      return this.fullUpdateRuleWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulesetPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of a RuleComponent
     * Update all fields of a RuleComponent Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule component.
     * @param {String} projectPk 
     * @param {String} rulePk 
     * @param {String} rulesetPk 
     * @param {module:model/RuleComponent} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RuleComponent} and HTTP response
     */
    fullUpdateRuleComponentWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk, data) {
      let postBody = data;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling fullUpdateRuleComponent");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateRuleComponent");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateRuleComponent");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateRuleComponent");
      }
      // verify the required parameter 'rulePk' is set
      if (rulePk === undefined || rulePk === null) {
        throw new Error("Missing the required parameter 'rulePk' when calling fullUpdateRuleComponent");
      }
      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling fullUpdateRuleComponent");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateRuleComponent");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk,
        'rule_pk': rulePk,
        'ruleset_pk': rulesetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RuleComponent;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update all fields of a RuleComponent
     * Update all fields of a RuleComponent Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule component.
     * @param {String} projectPk 
     * @param {String} rulePk 
     * @param {String} rulesetPk 
     * @param {module:model/RuleComponent} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RuleComponent}
     */
    fullUpdateRuleComponent(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk, data) {
      return this.fullUpdateRuleComponentWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of a Ruleset
     * Update all fields of a Ruleset Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ruleset.
     * @param {String} projectPk 
     * @param {module:model/Ruleset} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ruleset} and HTTP response
     */
    fullUpdateRulesetWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling fullUpdateRuleset");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateRuleset");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateRuleset");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateRuleset");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateRuleset");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Ruleset;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update all fields of a Ruleset
     * Update all fields of a Ruleset Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ruleset.
     * @param {String} projectPk 
     * @param {module:model/Ruleset} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ruleset}
     */
    fullUpdateRuleset(checkPlanPk, cloudPk, id, projectPk, data) {
      return this.fullUpdateRulesetWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:read, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IfcChecker} and HTTP response
     */
    getCheckerWithHttpInfo(cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getChecker");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChecker");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getChecker");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getChecker");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IfcChecker;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:read, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IfcChecker}
     */
    getChecker(cloudPk, id, ifcPk, projectPk) {
      return this.getCheckerWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one CheckerResult
     * Retrieve one CheckerResult Required scopes: check:read
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckerResult} and HTTP response
     */
    getCheckerResultWithHttpInfo(checkerPk, cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling getCheckerResult");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCheckerResult");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCheckerResult");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getCheckerResult");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getCheckerResult");
      }

      let pathParams = {
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckerResult;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve one CheckerResult
     * Retrieve one CheckerResult Required scopes: check:read
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckerResult}
     */
    getCheckerResult(checkerPk, cloudPk, id, ifcPk, projectPk) {
      return this.getCheckerResultWithHttpInfo(checkerPk, cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all CheckerResults
     * Verify parent existence before listing to send a 404 instead of an empty list Required scopes: check:read
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CheckerResult>} and HTTP response
     */
    getCheckerResultsWithHttpInfo(checkerPk, cloudPk, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling getCheckerResults");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCheckerResults");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getCheckerResults");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getCheckerResults");
      }

      let pathParams = {
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CheckerResult];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all CheckerResults
     * Verify parent existence before listing to send a 404 instead of an empty list Required scopes: check:read
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CheckerResult>}
     */
    getCheckerResults(checkerPk, cloudPk, ifcPk, projectPk) {
      return this.getCheckerResultsWithHttpInfo(checkerPk, cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all checkers of a model
     * Verify parent existence before listing to send a 404 instead of an empty list Required scopes: check:read, ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/IfcChecker>} and HTTP response
     */
    getCheckersWithHttpInfo(cloudPk, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCheckers");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getCheckers");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getCheckers");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IfcChecker];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all checkers of a model
     * Verify parent existence before listing to send a 404 instead of an empty list Required scopes: check:read, ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/IfcChecker>}
     */
    getCheckers(cloudPk, ifcPk, projectPk) {
      return this.getCheckersWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one Checkplan
     * Retrieve one Checkplan Required scopes: check:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this check plan.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckPlan} and HTTP response
     */
    getCheckplanWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCheckplan");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCheckplan");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getCheckplan");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckPlan;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve one Checkplan
     * Retrieve one Checkplan Required scopes: check:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this check plan.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckPlan}
     */
    getCheckplan(cloudPk, id, projectPk) {
      return this.getCheckplanWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Checkplans
     * Verify parent existence before listing to send a 404 instead of an empty list Required scopes: check:read
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CheckPlan>} and HTTP response
     */
    getCheckplansWithHttpInfo(cloudPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCheckplans");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getCheckplans");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CheckPlan];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all Checkplans
     * Verify parent existence before listing to send a 404 instead of an empty list Required scopes: check:read
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CheckPlan>}
     */
    getCheckplans(cloudPk, projectPk) {
      return this.getCheckplansWithHttpInfo(cloudPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one Rule
     * Retrieve one Rule Required scopes: check:read
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule.
     * @param {String} projectPk 
     * @param {String} rulesetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Rule} and HTTP response
     */
    getRuleWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulesetPk) {
      let postBody = null;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling getRule");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRule");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRule");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRule");
      }
      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling getRule");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk,
        'ruleset_pk': rulesetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Rule;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve one Rule
     * Retrieve one Rule Required scopes: check:read
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule.
     * @param {String} projectPk 
     * @param {String} rulesetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Rule}
     */
    getRule(checkPlanPk, cloudPk, id, projectPk, rulesetPk) {
      return this.getRuleWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulesetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one RuleComponent
     * Retrieve one RuleComponent Required scopes: check:read
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule component.
     * @param {String} projectPk 
     * @param {String} rulePk 
     * @param {String} rulesetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RuleComponent} and HTTP response
     */
    getRuleComponentWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk) {
      let postBody = null;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling getRuleComponent");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRuleComponent");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRuleComponent");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRuleComponent");
      }
      // verify the required parameter 'rulePk' is set
      if (rulePk === undefined || rulePk === null) {
        throw new Error("Missing the required parameter 'rulePk' when calling getRuleComponent");
      }
      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling getRuleComponent");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk,
        'rule_pk': rulePk,
        'ruleset_pk': rulesetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RuleComponent;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve one RuleComponent
     * Retrieve one RuleComponent Required scopes: check:read
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule component.
     * @param {String} projectPk 
     * @param {String} rulePk 
     * @param {String} rulesetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RuleComponent}
     */
    getRuleComponent(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk) {
      return this.getRuleComponentWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all RuleComponents
     * Verify parent existence before listing to send a 404 instead of an empty list Required scopes: check:read
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} rulePk 
     * @param {String} rulesetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/RuleComponent>} and HTTP response
     */
    getRuleComponentsWithHttpInfo(checkPlanPk, cloudPk, projectPk, rulePk, rulesetPk) {
      let postBody = null;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling getRuleComponents");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRuleComponents");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRuleComponents");
      }
      // verify the required parameter 'rulePk' is set
      if (rulePk === undefined || rulePk === null) {
        throw new Error("Missing the required parameter 'rulePk' when calling getRuleComponents");
      }
      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling getRuleComponents");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'rule_pk': rulePk,
        'ruleset_pk': rulesetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RuleComponent];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all RuleComponents
     * Verify parent existence before listing to send a 404 instead of an empty list Required scopes: check:read
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} rulePk 
     * @param {String} rulesetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/RuleComponent>}
     */
    getRuleComponents(checkPlanPk, cloudPk, projectPk, rulePk, rulesetPk) {
      return this.getRuleComponentsWithHttpInfo(checkPlanPk, cloudPk, projectPk, rulePk, rulesetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Rules
     * Verify parent existence before listing to send a 404 instead of an empty list Required scopes: check:read
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} rulesetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Rule>} and HTTP response
     */
    getRulesWithHttpInfo(checkPlanPk, cloudPk, projectPk, rulesetPk) {
      let postBody = null;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling getRules");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRules");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRules");
      }
      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling getRules");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ruleset_pk': rulesetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Rule];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all Rules
     * Verify parent existence before listing to send a 404 instead of an empty list Required scopes: check:read
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} rulesetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Rule>}
     */
    getRules(checkPlanPk, cloudPk, projectPk, rulesetPk) {
      return this.getRulesWithHttpInfo(checkPlanPk, cloudPk, projectPk, rulesetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one Ruleset
     * Retrieve one Ruleset Required scopes: check:read
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ruleset.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ruleset} and HTTP response
     */
    getRulesetWithHttpInfo(checkPlanPk, cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling getRuleset");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRuleset");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRuleset");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRuleset");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Ruleset;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve one Ruleset
     * Retrieve one Ruleset Required scopes: check:read
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ruleset.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ruleset}
     */
    getRuleset(checkPlanPk, cloudPk, id, projectPk) {
      return this.getRulesetWithHttpInfo(checkPlanPk, cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Rulesets
     * Verify parent existence before listing to send a 404 instead of an empty list Required scopes: check:read
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Ruleset>} and HTTP response
     */
    getRulesetsWithHttpInfo(checkPlanPk, cloudPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling getRulesets");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRulesets");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRulesets");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Ruleset];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all Rulesets
     * Verify parent existence before listing to send a 404 instead of an empty list Required scopes: check:read
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Ruleset>}
     */
    getRulesets(checkPlanPk, cloudPk, projectPk) {
      return this.getRulesetsWithHttpInfo(checkPlanPk, cloudPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Launch a new check on the model
     * Starts a new check in the checker Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/IfcChecker} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    launchNewCheckWithHttpInfo(cloudPk, id, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling launchNewCheck");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling launchNewCheck");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling launchNewCheck");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling launchNewCheck");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling launchNewCheck");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}/launch-check', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Launch a new check on the model
     * Starts a new check in the checker Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/IfcChecker} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    launchNewCheck(cloudPk, id, ifcPk, projectPk, data) {
      return this.launchNewCheckWithHttpInfo(cloudPk, id, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/IfcChecker} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IfcChecker} and HTTP response
     */
    updateCheckerWithHttpInfo(cloudPk, id, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateChecker");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateChecker");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateChecker");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateChecker");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateChecker");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IfcChecker;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/IfcChecker} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IfcChecker}
     */
    updateChecker(cloudPk, id, ifcPk, projectPk, data) {
      return this.updateCheckerWithHttpInfo(cloudPk, id, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a CheckerResult
     * Update some fields of a CheckerResult Required scopes: check:write
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/CheckerResult} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckerResult} and HTTP response
     */
    updateCheckerResultWithHttpInfo(checkerPk, cloudPk, id, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling updateCheckerResult");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateCheckerResult");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCheckerResult");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateCheckerResult");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateCheckerResult");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateCheckerResult");
      }

      let pathParams = {
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckerResult;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a CheckerResult
     * Update some fields of a CheckerResult Required scopes: check:write
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/CheckerResult} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckerResult}
     */
    updateCheckerResult(checkerPk, cloudPk, id, ifcPk, projectPk, data) {
      return this.updateCheckerResultWithHttpInfo(checkerPk, cloudPk, id, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a Checkplan
     * Update some fields of a Checkplan Required scopes: check:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this check plan.
     * @param {String} projectPk 
     * @param {module:model/CheckPlan} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckPlan} and HTTP response
     */
    updateCheckplanWithHttpInfo(cloudPk, id, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateCheckplan");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCheckplan");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateCheckplan");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateCheckplan");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckPlan;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a Checkplan
     * Update some fields of a Checkplan Required scopes: check:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this check plan.
     * @param {String} projectPk 
     * @param {module:model/CheckPlan} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckPlan}
     */
    updateCheckplan(cloudPk, id, projectPk, data) {
      return this.updateCheckplanWithHttpInfo(cloudPk, id, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a Rule
     * Update some fields of a Rule Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule.
     * @param {String} projectPk 
     * @param {String} rulesetPk 
     * @param {module:model/Rule} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Rule} and HTTP response
     */
    updateRuleWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulesetPk, data) {
      let postBody = data;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling updateRule");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateRule");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRule");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateRule");
      }
      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling updateRule");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateRule");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk,
        'ruleset_pk': rulesetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Rule;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a Rule
     * Update some fields of a Rule Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule.
     * @param {String} projectPk 
     * @param {String} rulesetPk 
     * @param {module:model/Rule} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Rule}
     */
    updateRule(checkPlanPk, cloudPk, id, projectPk, rulesetPk, data) {
      return this.updateRuleWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulesetPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a RuleComponent
     * Update some fields of a RuleComponent Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule component.
     * @param {String} projectPk 
     * @param {String} rulePk 
     * @param {String} rulesetPk 
     * @param {module:model/RuleComponent} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RuleComponent} and HTTP response
     */
    updateRuleComponentWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk, data) {
      let postBody = data;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling updateRuleComponent");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateRuleComponent");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRuleComponent");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateRuleComponent");
      }
      // verify the required parameter 'rulePk' is set
      if (rulePk === undefined || rulePk === null) {
        throw new Error("Missing the required parameter 'rulePk' when calling updateRuleComponent");
      }
      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling updateRuleComponent");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateRuleComponent");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk,
        'rule_pk': rulePk,
        'ruleset_pk': rulesetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RuleComponent;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a RuleComponent
     * Update some fields of a RuleComponent Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule component.
     * @param {String} projectPk 
     * @param {String} rulePk 
     * @param {String} rulesetPk 
     * @param {module:model/RuleComponent} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RuleComponent}
     */
    updateRuleComponent(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk, data) {
      return this.updateRuleComponentWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a Ruleset
     * Update some fields of a Ruleset Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ruleset.
     * @param {String} projectPk 
     * @param {module:model/Ruleset} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ruleset} and HTTP response
     */
    updateRulesetWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling updateRuleset");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateRuleset");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRuleset");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateRuleset");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateRuleset");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Ruleset;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a Ruleset
     * Update some fields of a Ruleset Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ruleset.
     * @param {String} projectPk 
     * @param {module:model/Ruleset} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ruleset}
     */
    updateRuleset(checkPlanPk, cloudPk, id, projectPk, data) {
      return this.updateRulesetWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
