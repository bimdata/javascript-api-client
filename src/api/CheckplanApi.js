/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * OpenAPI spec version: v1
 * Contact: contact@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CheckPlan', 'model/CheckerResult', 'model/IfcChecker', 'model/Rule', 'model/RuleComponent', 'model/Ruleset'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CheckPlan'), require('../model/CheckerResult'), require('../model/IfcChecker'), require('../model/Rule'), require('../model/RuleComponent'), require('../model/Ruleset'));
  } else {
    // Browser globals (root is window)
    if (!root.bimdata) {
      root.bimdata = {};
    }
    root.bimdata.CheckplanApi = factory(root.bimdata.ApiClient, root.bimdata.CheckPlan, root.bimdata.CheckerResult, root.bimdata.IfcChecker, root.bimdata.Rule, root.bimdata.RuleComponent, root.bimdata.Ruleset);
  }
}(this, function(ApiClient, CheckPlan, CheckerResult, IfcChecker, Rule, RuleComponent, Ruleset) {
  'use strict';

  /**
   * Checkplan service.
   * @module api/CheckplanApi
   * @version 0.0.0
   */

  /**
   * Constructs a new CheckplanApi. 
   * @alias module:api/CheckplanApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a checker to a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/IfcChecker} ifcChecker 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IfcChecker} and HTTP response
     */
    this.createCheckerWithHttpInfo = function(cloudPk, ifcPk, projectPk, ifcChecker) {
      var postBody = ifcChecker;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createChecker");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createChecker");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createChecker");
      }

      // verify the required parameter 'ifcChecker' is set
      if (ifcChecker === undefined || ifcChecker === null) {
        throw new Error("Missing the required parameter 'ifcChecker' when calling createChecker");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IfcChecker;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a checker to a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/IfcChecker} ifcChecker 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IfcChecker}
     */
    this.createChecker = function(cloudPk, ifcPk, projectPk, ifcChecker) {
      return this.createCheckerWithHttpInfo(cloudPk, ifcPk, projectPk, ifcChecker)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a CheckerResult
     * TCreate a CheckerResult Required scopes: check:write
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/CheckerResult} checkerResult 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckerResult} and HTTP response
     */
    this.createCheckerResultWithHttpInfo = function(checkerPk, cloudPk, ifcPk, projectPk, checkerResult) {
      var postBody = checkerResult;

      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling createCheckerResult");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createCheckerResult");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createCheckerResult");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createCheckerResult");
      }

      // verify the required parameter 'checkerResult' is set
      if (checkerResult === undefined || checkerResult === null) {
        throw new Error("Missing the required parameter 'checkerResult' when calling createCheckerResult");
      }


      var pathParams = {
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CheckerResult;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a CheckerResult
     * TCreate a CheckerResult Required scopes: check:write
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/CheckerResult} checkerResult 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckerResult}
     */
    this.createCheckerResult = function(checkerPk, cloudPk, ifcPk, projectPk, checkerResult) {
      return this.createCheckerResultWithHttpInfo(checkerPk, cloudPk, ifcPk, projectPk, checkerResult)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Checkplan
     * TCreate a Checkplan Required scopes: check:write
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {module:model/CheckPlan} checkPlan 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckPlan} and HTTP response
     */
    this.createCheckplanWithHttpInfo = function(cloudPk, projectPk, checkPlan) {
      var postBody = checkPlan;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createCheckplan");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createCheckplan");
      }

      // verify the required parameter 'checkPlan' is set
      if (checkPlan === undefined || checkPlan === null) {
        throw new Error("Missing the required parameter 'checkPlan' when calling createCheckplan");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CheckPlan;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a Checkplan
     * TCreate a Checkplan Required scopes: check:write
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {module:model/CheckPlan} checkPlan 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckPlan}
     */
    this.createCheckplan = function(cloudPk, projectPk, checkPlan) {
      return this.createCheckplanWithHttpInfo(cloudPk, projectPk, checkPlan)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Rule
     * TCreate a Rule Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} rulesetPk 
     * @param {module:model/Rule} rule 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Rule} and HTTP response
     */
    this.createRuleWithHttpInfo = function(checkPlanPk, cloudPk, projectPk, rulesetPk, rule) {
      var postBody = rule;

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling createRule");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createRule");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createRule");
      }

      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling createRule");
      }

      // verify the required parameter 'rule' is set
      if (rule === undefined || rule === null) {
        throw new Error("Missing the required parameter 'rule' when calling createRule");
      }


      var pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ruleset_pk': rulesetPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Rule;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a Rule
     * TCreate a Rule Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} rulesetPk 
     * @param {module:model/Rule} rule 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Rule}
     */
    this.createRule = function(checkPlanPk, cloudPk, projectPk, rulesetPk, rule) {
      return this.createRuleWithHttpInfo(checkPlanPk, cloudPk, projectPk, rulesetPk, rule)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a RuleComponent
     * TCreate a RuleComponent Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} rulePk 
     * @param {String} rulesetPk 
     * @param {module:model/RuleComponent} ruleComponent 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RuleComponent} and HTTP response
     */
    this.createRuleComponentWithHttpInfo = function(checkPlanPk, cloudPk, projectPk, rulePk, rulesetPk, ruleComponent) {
      var postBody = ruleComponent;

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling createRuleComponent");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createRuleComponent");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createRuleComponent");
      }

      // verify the required parameter 'rulePk' is set
      if (rulePk === undefined || rulePk === null) {
        throw new Error("Missing the required parameter 'rulePk' when calling createRuleComponent");
      }

      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling createRuleComponent");
      }

      // verify the required parameter 'ruleComponent' is set
      if (ruleComponent === undefined || ruleComponent === null) {
        throw new Error("Missing the required parameter 'ruleComponent' when calling createRuleComponent");
      }


      var pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'rule_pk': rulePk,
        'ruleset_pk': rulesetPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RuleComponent;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a RuleComponent
     * TCreate a RuleComponent Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} rulePk 
     * @param {String} rulesetPk 
     * @param {module:model/RuleComponent} ruleComponent 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RuleComponent}
     */
    this.createRuleComponent = function(checkPlanPk, cloudPk, projectPk, rulePk, rulesetPk, ruleComponent) {
      return this.createRuleComponentWithHttpInfo(checkPlanPk, cloudPk, projectPk, rulePk, rulesetPk, ruleComponent)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Ruleset
     * TCreate a Ruleset Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {module:model/Ruleset} ruleset 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ruleset} and HTTP response
     */
    this.createRulesetWithHttpInfo = function(checkPlanPk, cloudPk, projectPk, ruleset) {
      var postBody = ruleset;

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling createRuleset");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createRuleset");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createRuleset");
      }

      // verify the required parameter 'ruleset' is set
      if (ruleset === undefined || ruleset === null) {
        throw new Error("Missing the required parameter 'ruleset' when calling createRuleset");
      }


      var pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Ruleset;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a Ruleset
     * TCreate a Ruleset Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {module:model/Ruleset} ruleset 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ruleset}
     */
    this.createRuleset = function(checkPlanPk, cloudPk, projectPk, ruleset) {
      return this.createRulesetWithHttpInfo(checkPlanPk, cloudPk, projectPk, ruleset)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCheckerWithHttpInfo = function(cloudPk, id, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteChecker");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteChecker");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteChecker");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteChecker");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteChecker = function(cloudPk, id, ifcPk, projectPk) {
      return this.deleteCheckerWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a CheckerResult
     * Delete a CheckerResult Required scopes: check:write
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCheckerResultWithHttpInfo = function(checkerPk, cloudPk, id, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling deleteCheckerResult");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteCheckerResult");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCheckerResult");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteCheckerResult");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteCheckerResult");
      }


      var pathParams = {
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a CheckerResult
     * Delete a CheckerResult Required scopes: check:write
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCheckerResult = function(checkerPk, cloudPk, id, ifcPk, projectPk) {
      return this.deleteCheckerResultWithHttpInfo(checkerPk, cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Checkplan
     * Delete a Checkplan Required scopes: check:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this check plan.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCheckplanWithHttpInfo = function(cloudPk, id, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteCheckplan");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCheckplan");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteCheckplan");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a Checkplan
     * Delete a Checkplan Required scopes: check:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this check plan.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCheckplan = function(cloudPk, id, projectPk) {
      return this.deleteCheckplanWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Rule
     * Delete a Rule Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule.
     * @param {String} projectPk 
     * @param {String} rulesetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteRuleWithHttpInfo = function(checkPlanPk, cloudPk, id, projectPk, rulesetPk) {
      var postBody = null;

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling deleteRule");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteRule");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRule");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteRule");
      }

      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling deleteRule");
      }


      var pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk,
        'ruleset_pk': rulesetPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a Rule
     * Delete a Rule Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule.
     * @param {String} projectPk 
     * @param {String} rulesetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteRule = function(checkPlanPk, cloudPk, id, projectPk, rulesetPk) {
      return this.deleteRuleWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulesetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a RuleComponent
     * Delete a RuleComponent Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule component.
     * @param {String} projectPk 
     * @param {String} rulePk 
     * @param {String} rulesetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteRuleComponentWithHttpInfo = function(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk) {
      var postBody = null;

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling deleteRuleComponent");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteRuleComponent");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRuleComponent");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteRuleComponent");
      }

      // verify the required parameter 'rulePk' is set
      if (rulePk === undefined || rulePk === null) {
        throw new Error("Missing the required parameter 'rulePk' when calling deleteRuleComponent");
      }

      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling deleteRuleComponent");
      }


      var pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk,
        'rule_pk': rulePk,
        'ruleset_pk': rulesetPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a RuleComponent
     * Delete a RuleComponent Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule component.
     * @param {String} projectPk 
     * @param {String} rulePk 
     * @param {String} rulesetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteRuleComponent = function(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk) {
      return this.deleteRuleComponentWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Ruleset
     * Delete a Ruleset Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ruleset.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteRulesetWithHttpInfo = function(checkPlanPk, cloudPk, id, projectPk) {
      var postBody = null;

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling deleteRuleset");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteRuleset");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRuleset");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteRuleset");
      }


      var pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a Ruleset
     * Delete a Ruleset Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ruleset.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteRuleset = function(checkPlanPk, cloudPk, id, projectPk) {
      return this.deleteRulesetWithHttpInfo(checkPlanPk, cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/IfcChecker} ifcChecker 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IfcChecker} and HTTP response
     */
    this.fullUpdateCheckerWithHttpInfo = function(cloudPk, id, ifcPk, projectPk, ifcChecker) {
      var postBody = ifcChecker;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateChecker");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateChecker");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateChecker");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateChecker");
      }

      // verify the required parameter 'ifcChecker' is set
      if (ifcChecker === undefined || ifcChecker === null) {
        throw new Error("Missing the required parameter 'ifcChecker' when calling fullUpdateChecker");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IfcChecker;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update all fields of a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/IfcChecker} ifcChecker 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IfcChecker}
     */
    this.fullUpdateChecker = function(cloudPk, id, ifcPk, projectPk, ifcChecker) {
      return this.fullUpdateCheckerWithHttpInfo(cloudPk, id, ifcPk, projectPk, ifcChecker)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of a CheckerResult
     * Update all fields of a CheckerResult Required scopes: check:write
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/CheckerResult} checkerResult 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckerResult} and HTTP response
     */
    this.fullUpdateCheckerResultWithHttpInfo = function(checkerPk, cloudPk, id, ifcPk, projectPk, checkerResult) {
      var postBody = checkerResult;

      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling fullUpdateCheckerResult");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateCheckerResult");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateCheckerResult");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateCheckerResult");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateCheckerResult");
      }

      // verify the required parameter 'checkerResult' is set
      if (checkerResult === undefined || checkerResult === null) {
        throw new Error("Missing the required parameter 'checkerResult' when calling fullUpdateCheckerResult");
      }


      var pathParams = {
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CheckerResult;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update all fields of a CheckerResult
     * Update all fields of a CheckerResult Required scopes: check:write
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/CheckerResult} checkerResult 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckerResult}
     */
    this.fullUpdateCheckerResult = function(checkerPk, cloudPk, id, ifcPk, projectPk, checkerResult) {
      return this.fullUpdateCheckerResultWithHttpInfo(checkerPk, cloudPk, id, ifcPk, projectPk, checkerResult)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of a Checkplan
     * Update all fields of a Checkplan Required scopes: check:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this check plan.
     * @param {String} projectPk 
     * @param {module:model/CheckPlan} checkPlan 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckPlan} and HTTP response
     */
    this.fullUpdateCheckplanWithHttpInfo = function(cloudPk, id, projectPk, checkPlan) {
      var postBody = checkPlan;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateCheckplan");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateCheckplan");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateCheckplan");
      }

      // verify the required parameter 'checkPlan' is set
      if (checkPlan === undefined || checkPlan === null) {
        throw new Error("Missing the required parameter 'checkPlan' when calling fullUpdateCheckplan");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CheckPlan;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update all fields of a Checkplan
     * Update all fields of a Checkplan Required scopes: check:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this check plan.
     * @param {String} projectPk 
     * @param {module:model/CheckPlan} checkPlan 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckPlan}
     */
    this.fullUpdateCheckplan = function(cloudPk, id, projectPk, checkPlan) {
      return this.fullUpdateCheckplanWithHttpInfo(cloudPk, id, projectPk, checkPlan)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of a Rule
     * Update all fields of a Rule Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule.
     * @param {String} projectPk 
     * @param {String} rulesetPk 
     * @param {module:model/Rule} rule 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Rule} and HTTP response
     */
    this.fullUpdateRuleWithHttpInfo = function(checkPlanPk, cloudPk, id, projectPk, rulesetPk, rule) {
      var postBody = rule;

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling fullUpdateRule");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateRule");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateRule");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateRule");
      }

      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling fullUpdateRule");
      }

      // verify the required parameter 'rule' is set
      if (rule === undefined || rule === null) {
        throw new Error("Missing the required parameter 'rule' when calling fullUpdateRule");
      }


      var pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk,
        'ruleset_pk': rulesetPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Rule;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update all fields of a Rule
     * Update all fields of a Rule Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule.
     * @param {String} projectPk 
     * @param {String} rulesetPk 
     * @param {module:model/Rule} rule 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Rule}
     */
    this.fullUpdateRule = function(checkPlanPk, cloudPk, id, projectPk, rulesetPk, rule) {
      return this.fullUpdateRuleWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulesetPk, rule)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of a RuleComponent
     * Update all fields of a RuleComponent Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule component.
     * @param {String} projectPk 
     * @param {String} rulePk 
     * @param {String} rulesetPk 
     * @param {module:model/RuleComponent} ruleComponent 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RuleComponent} and HTTP response
     */
    this.fullUpdateRuleComponentWithHttpInfo = function(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk, ruleComponent) {
      var postBody = ruleComponent;

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling fullUpdateRuleComponent");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateRuleComponent");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateRuleComponent");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateRuleComponent");
      }

      // verify the required parameter 'rulePk' is set
      if (rulePk === undefined || rulePk === null) {
        throw new Error("Missing the required parameter 'rulePk' when calling fullUpdateRuleComponent");
      }

      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling fullUpdateRuleComponent");
      }

      // verify the required parameter 'ruleComponent' is set
      if (ruleComponent === undefined || ruleComponent === null) {
        throw new Error("Missing the required parameter 'ruleComponent' when calling fullUpdateRuleComponent");
      }


      var pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk,
        'rule_pk': rulePk,
        'ruleset_pk': rulesetPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RuleComponent;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update all fields of a RuleComponent
     * Update all fields of a RuleComponent Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule component.
     * @param {String} projectPk 
     * @param {String} rulePk 
     * @param {String} rulesetPk 
     * @param {module:model/RuleComponent} ruleComponent 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RuleComponent}
     */
    this.fullUpdateRuleComponent = function(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk, ruleComponent) {
      return this.fullUpdateRuleComponentWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk, ruleComponent)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of a Ruleset
     * Update all fields of a Ruleset Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ruleset.
     * @param {String} projectPk 
     * @param {module:model/Ruleset} ruleset 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ruleset} and HTTP response
     */
    this.fullUpdateRulesetWithHttpInfo = function(checkPlanPk, cloudPk, id, projectPk, ruleset) {
      var postBody = ruleset;

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling fullUpdateRuleset");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateRuleset");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateRuleset");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateRuleset");
      }

      // verify the required parameter 'ruleset' is set
      if (ruleset === undefined || ruleset === null) {
        throw new Error("Missing the required parameter 'ruleset' when calling fullUpdateRuleset");
      }


      var pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Ruleset;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update all fields of a Ruleset
     * Update all fields of a Ruleset Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ruleset.
     * @param {String} projectPk 
     * @param {module:model/Ruleset} ruleset 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ruleset}
     */
    this.fullUpdateRuleset = function(checkPlanPk, cloudPk, id, projectPk, ruleset) {
      return this.fullUpdateRulesetWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, ruleset)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:read, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IfcChecker} and HTTP response
     */
    this.getCheckerWithHttpInfo = function(cloudPk, id, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getChecker");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChecker");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getChecker");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getChecker");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = IfcChecker;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:read, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IfcChecker}
     */
    this.getChecker = function(cloudPk, id, ifcPk, projectPk) {
      return this.getCheckerWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one CheckerResult
     * Retrieve one CheckerResult Required scopes: check:read
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckerResult} and HTTP response
     */
    this.getCheckerResultWithHttpInfo = function(checkerPk, cloudPk, id, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling getCheckerResult");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCheckerResult");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCheckerResult");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getCheckerResult");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getCheckerResult");
      }


      var pathParams = {
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CheckerResult;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve one CheckerResult
     * Retrieve one CheckerResult Required scopes: check:read
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckerResult}
     */
    this.getCheckerResult = function(checkerPk, cloudPk, id, ifcPk, projectPk) {
      return this.getCheckerResultWithHttpInfo(checkerPk, cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all CheckerResults
     * Retrieve all CheckerResults Required scopes: check:read
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CheckerResult>} and HTTP response
     */
    this.getCheckerResultsWithHttpInfo = function(checkerPk, cloudPk, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling getCheckerResults");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCheckerResults");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getCheckerResults");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getCheckerResults");
      }


      var pathParams = {
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [CheckerResult];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all CheckerResults
     * Retrieve all CheckerResults Required scopes: check:read
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CheckerResult>}
     */
    this.getCheckerResults = function(checkerPk, cloudPk, ifcPk, projectPk) {
      return this.getCheckerResultsWithHttpInfo(checkerPk, cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all checkers of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:read, ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/IfcChecker>} and HTTP response
     */
    this.getCheckersWithHttpInfo = function(cloudPk, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCheckers");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getCheckers");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getCheckers");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [IfcChecker];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all checkers of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:read, ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/IfcChecker>}
     */
    this.getCheckers = function(cloudPk, ifcPk, projectPk) {
      return this.getCheckersWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one Checkplan
     * Retrieve one Checkplan Required scopes: check:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this check plan.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckPlan} and HTTP response
     */
    this.getCheckplanWithHttpInfo = function(cloudPk, id, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCheckplan");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCheckplan");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getCheckplan");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CheckPlan;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve one Checkplan
     * Retrieve one Checkplan Required scopes: check:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this check plan.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckPlan}
     */
    this.getCheckplan = function(cloudPk, id, projectPk) {
      return this.getCheckplanWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Checkplans
     * Retrieve all Checkplans Required scopes: check:read
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CheckPlan>} and HTTP response
     */
    this.getCheckplansWithHttpInfo = function(cloudPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCheckplans");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getCheckplans");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [CheckPlan];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all Checkplans
     * Retrieve all Checkplans Required scopes: check:read
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CheckPlan>}
     */
    this.getCheckplans = function(cloudPk, projectPk) {
      return this.getCheckplansWithHttpInfo(cloudPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one Rule
     * Retrieve one Rule Required scopes: check:read
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule.
     * @param {String} projectPk 
     * @param {String} rulesetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Rule} and HTTP response
     */
    this.getRuleWithHttpInfo = function(checkPlanPk, cloudPk, id, projectPk, rulesetPk) {
      var postBody = null;

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling getRule");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRule");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRule");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRule");
      }

      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling getRule");
      }


      var pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk,
        'ruleset_pk': rulesetPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Rule;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve one Rule
     * Retrieve one Rule Required scopes: check:read
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule.
     * @param {String} projectPk 
     * @param {String} rulesetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Rule}
     */
    this.getRule = function(checkPlanPk, cloudPk, id, projectPk, rulesetPk) {
      return this.getRuleWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulesetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one RuleComponent
     * Retrieve one RuleComponent Required scopes: check:read
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule component.
     * @param {String} projectPk 
     * @param {String} rulePk 
     * @param {String} rulesetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RuleComponent} and HTTP response
     */
    this.getRuleComponentWithHttpInfo = function(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk) {
      var postBody = null;

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling getRuleComponent");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRuleComponent");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRuleComponent");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRuleComponent");
      }

      // verify the required parameter 'rulePk' is set
      if (rulePk === undefined || rulePk === null) {
        throw new Error("Missing the required parameter 'rulePk' when calling getRuleComponent");
      }

      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling getRuleComponent");
      }


      var pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk,
        'rule_pk': rulePk,
        'ruleset_pk': rulesetPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RuleComponent;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve one RuleComponent
     * Retrieve one RuleComponent Required scopes: check:read
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule component.
     * @param {String} projectPk 
     * @param {String} rulePk 
     * @param {String} rulesetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RuleComponent}
     */
    this.getRuleComponent = function(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk) {
      return this.getRuleComponentWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all RuleComponents
     * Retrieve all RuleComponents Required scopes: check:read
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} rulePk 
     * @param {String} rulesetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/RuleComponent>} and HTTP response
     */
    this.getRuleComponentsWithHttpInfo = function(checkPlanPk, cloudPk, projectPk, rulePk, rulesetPk) {
      var postBody = null;

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling getRuleComponents");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRuleComponents");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRuleComponents");
      }

      // verify the required parameter 'rulePk' is set
      if (rulePk === undefined || rulePk === null) {
        throw new Error("Missing the required parameter 'rulePk' when calling getRuleComponents");
      }

      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling getRuleComponents");
      }


      var pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'rule_pk': rulePk,
        'ruleset_pk': rulesetPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [RuleComponent];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all RuleComponents
     * Retrieve all RuleComponents Required scopes: check:read
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} rulePk 
     * @param {String} rulesetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/RuleComponent>}
     */
    this.getRuleComponents = function(checkPlanPk, cloudPk, projectPk, rulePk, rulesetPk) {
      return this.getRuleComponentsWithHttpInfo(checkPlanPk, cloudPk, projectPk, rulePk, rulesetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Rules
     * Retrieve all Rules Required scopes: check:read
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} rulesetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Rule>} and HTTP response
     */
    this.getRulesWithHttpInfo = function(checkPlanPk, cloudPk, projectPk, rulesetPk) {
      var postBody = null;

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling getRules");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRules");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRules");
      }

      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling getRules");
      }


      var pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ruleset_pk': rulesetPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Rule];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all Rules
     * Retrieve all Rules Required scopes: check:read
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {String} rulesetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Rule>}
     */
    this.getRules = function(checkPlanPk, cloudPk, projectPk, rulesetPk) {
      return this.getRulesWithHttpInfo(checkPlanPk, cloudPk, projectPk, rulesetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one Ruleset
     * Retrieve one Ruleset Required scopes: check:read
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ruleset.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ruleset} and HTTP response
     */
    this.getRulesetWithHttpInfo = function(checkPlanPk, cloudPk, id, projectPk) {
      var postBody = null;

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling getRuleset");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRuleset");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRuleset");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRuleset");
      }


      var pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Ruleset;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve one Ruleset
     * Retrieve one Ruleset Required scopes: check:read
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ruleset.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ruleset}
     */
    this.getRuleset = function(checkPlanPk, cloudPk, id, projectPk) {
      return this.getRulesetWithHttpInfo(checkPlanPk, cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Rulesets
     * Retrieve all Rulesets Required scopes: check:read
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Ruleset>} and HTTP response
     */
    this.getRulesetsWithHttpInfo = function(checkPlanPk, cloudPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling getRulesets");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRulesets");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRulesets");
      }


      var pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Ruleset];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all Rulesets
     * Retrieve all Rulesets Required scopes: check:read
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Ruleset>}
     */
    this.getRulesets = function(checkPlanPk, cloudPk, projectPk) {
      return this.getRulesetsWithHttpInfo(checkPlanPk, cloudPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Launch a new check on the model
     * Starts a new check in the checker Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/IfcChecker} ifcChecker 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.launchNewCheckWithHttpInfo = function(cloudPk, id, ifcPk, projectPk, ifcChecker) {
      var postBody = ifcChecker;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling launchNewCheck");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling launchNewCheck");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling launchNewCheck");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling launchNewCheck");
      }

      // verify the required parameter 'ifcChecker' is set
      if (ifcChecker === undefined || ifcChecker === null) {
        throw new Error("Missing the required parameter 'ifcChecker' when calling launchNewCheck");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}/launch-check', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Launch a new check on the model
     * Starts a new check in the checker Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/IfcChecker} ifcChecker 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.launchNewCheck = function(cloudPk, id, ifcPk, projectPk, ifcChecker) {
      return this.launchNewCheckWithHttpInfo(cloudPk, id, ifcPk, projectPk, ifcChecker)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/IfcChecker} ifcChecker 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IfcChecker} and HTTP response
     */
    this.updateCheckerWithHttpInfo = function(cloudPk, id, ifcPk, projectPk, ifcChecker) {
      var postBody = ifcChecker;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateChecker");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateChecker");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateChecker");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateChecker");
      }

      // verify the required parameter 'ifcChecker' is set
      if (ifcChecker === undefined || ifcChecker === null) {
        throw new Error("Missing the required parameter 'ifcChecker' when calling updateChecker");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IfcChecker;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update some fields of a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/IfcChecker} ifcChecker 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IfcChecker}
     */
    this.updateChecker = function(cloudPk, id, ifcPk, projectPk, ifcChecker) {
      return this.updateCheckerWithHttpInfo(cloudPk, id, ifcPk, projectPk, ifcChecker)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a CheckerResult
     * Update some fields of a CheckerResult Required scopes: check:write
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/CheckerResult} checkerResult 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckerResult} and HTTP response
     */
    this.updateCheckerResultWithHttpInfo = function(checkerPk, cloudPk, id, ifcPk, projectPk, checkerResult) {
      var postBody = checkerResult;

      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling updateCheckerResult");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateCheckerResult");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCheckerResult");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateCheckerResult");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateCheckerResult");
      }

      // verify the required parameter 'checkerResult' is set
      if (checkerResult === undefined || checkerResult === null) {
        throw new Error("Missing the required parameter 'checkerResult' when calling updateCheckerResult");
      }


      var pathParams = {
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CheckerResult;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update some fields of a CheckerResult
     * Update some fields of a CheckerResult Required scopes: check:write
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/CheckerResult} checkerResult 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckerResult}
     */
    this.updateCheckerResult = function(checkerPk, cloudPk, id, ifcPk, projectPk, checkerResult) {
      return this.updateCheckerResultWithHttpInfo(checkerPk, cloudPk, id, ifcPk, projectPk, checkerResult)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a Checkplan
     * Update some fields of a Checkplan Required scopes: check:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this check plan.
     * @param {String} projectPk 
     * @param {module:model/CheckPlan} checkPlan 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckPlan} and HTTP response
     */
    this.updateCheckplanWithHttpInfo = function(cloudPk, id, projectPk, checkPlan) {
      var postBody = checkPlan;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateCheckplan");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCheckplan");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateCheckplan");
      }

      // verify the required parameter 'checkPlan' is set
      if (checkPlan === undefined || checkPlan === null) {
        throw new Error("Missing the required parameter 'checkPlan' when calling updateCheckplan");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CheckPlan;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update some fields of a Checkplan
     * Update some fields of a Checkplan Required scopes: check:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this check plan.
     * @param {String} projectPk 
     * @param {module:model/CheckPlan} checkPlan 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckPlan}
     */
    this.updateCheckplan = function(cloudPk, id, projectPk, checkPlan) {
      return this.updateCheckplanWithHttpInfo(cloudPk, id, projectPk, checkPlan)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a Rule
     * Update some fields of a Rule Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule.
     * @param {String} projectPk 
     * @param {String} rulesetPk 
     * @param {module:model/Rule} rule 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Rule} and HTTP response
     */
    this.updateRuleWithHttpInfo = function(checkPlanPk, cloudPk, id, projectPk, rulesetPk, rule) {
      var postBody = rule;

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling updateRule");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateRule");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRule");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateRule");
      }

      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling updateRule");
      }

      // verify the required parameter 'rule' is set
      if (rule === undefined || rule === null) {
        throw new Error("Missing the required parameter 'rule' when calling updateRule");
      }


      var pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk,
        'ruleset_pk': rulesetPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Rule;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update some fields of a Rule
     * Update some fields of a Rule Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule.
     * @param {String} projectPk 
     * @param {String} rulesetPk 
     * @param {module:model/Rule} rule 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Rule}
     */
    this.updateRule = function(checkPlanPk, cloudPk, id, projectPk, rulesetPk, rule) {
      return this.updateRuleWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulesetPk, rule)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a RuleComponent
     * Update some fields of a RuleComponent Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule component.
     * @param {String} projectPk 
     * @param {String} rulePk 
     * @param {String} rulesetPk 
     * @param {module:model/RuleComponent} ruleComponent 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RuleComponent} and HTTP response
     */
    this.updateRuleComponentWithHttpInfo = function(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk, ruleComponent) {
      var postBody = ruleComponent;

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling updateRuleComponent");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateRuleComponent");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRuleComponent");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateRuleComponent");
      }

      // verify the required parameter 'rulePk' is set
      if (rulePk === undefined || rulePk === null) {
        throw new Error("Missing the required parameter 'rulePk' when calling updateRuleComponent");
      }

      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling updateRuleComponent");
      }

      // verify the required parameter 'ruleComponent' is set
      if (ruleComponent === undefined || ruleComponent === null) {
        throw new Error("Missing the required parameter 'ruleComponent' when calling updateRuleComponent");
      }


      var pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk,
        'rule_pk': rulePk,
        'ruleset_pk': rulesetPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RuleComponent;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update some fields of a RuleComponent
     * Update some fields of a RuleComponent Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this rule component.
     * @param {String} projectPk 
     * @param {String} rulePk 
     * @param {String} rulesetPk 
     * @param {module:model/RuleComponent} ruleComponent 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RuleComponent}
     */
    this.updateRuleComponent = function(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk, ruleComponent) {
      return this.updateRuleComponentWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk, ruleComponent)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a Ruleset
     * Update some fields of a Ruleset Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ruleset.
     * @param {String} projectPk 
     * @param {module:model/Ruleset} ruleset 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ruleset} and HTTP response
     */
    this.updateRulesetWithHttpInfo = function(checkPlanPk, cloudPk, id, projectPk, ruleset) {
      var postBody = ruleset;

      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling updateRuleset");
      }

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateRuleset");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRuleset");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateRuleset");
      }

      // verify the required parameter 'ruleset' is set
      if (ruleset === undefined || ruleset === null) {
        throw new Error("Missing the required parameter 'ruleset' when calling updateRuleset");
      }


      var pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Ruleset;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update some fields of a Ruleset
     * Update some fields of a Ruleset Required scopes: check:write
     * @param {String} checkPlanPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ruleset.
     * @param {String} projectPk 
     * @param {module:model/Ruleset} ruleset 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ruleset}
     */
    this.updateRuleset = function(checkPlanPk, cloudPk, id, projectPk, ruleset) {
      return this.updateRulesetWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, ruleset)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
