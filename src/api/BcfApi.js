/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Auth from '../model/Auth';
import BcfLabel from '../model/BcfLabel';
import BcfLabelRequest from '../model/BcfLabelRequest';
import BcfProject from '../model/BcfProject';
import BcfProjectRequest from '../model/BcfProjectRequest';
import ColoringDefinition from '../model/ColoringDefinition';
import Comment from '../model/Comment';
import CommentRequest from '../model/CommentRequest';
import DetailedExtensions from '../model/DetailedExtensions';
import Extensions from '../model/Extensions';
import FullTopic from '../model/FullTopic';
import FullTopicRequest from '../model/FullTopicRequest';
import PatchedBcfLabelRequest from '../model/PatchedBcfLabelRequest';
import PatchedBcfProjectRequest from '../model/PatchedBcfProjectRequest';
import PatchedCommentRequest from '../model/PatchedCommentRequest';
import PatchedFullTopicRequest from '../model/PatchedFullTopicRequest';
import PatchedPinRequest from '../model/PatchedPinRequest';
import PatchedPriorityRequest from '../model/PatchedPriorityRequest';
import PatchedStageRequest from '../model/PatchedStageRequest';
import PatchedTopicRequest from '../model/PatchedTopicRequest';
import PatchedTopicStatusRequest from '../model/PatchedTopicStatusRequest';
import PatchedTopicTypeRequest from '../model/PatchedTopicTypeRequest';
import PatchedViewpointRequest from '../model/PatchedViewpointRequest';
import Pin from '../model/Pin';
import PinRequest from '../model/PinRequest';
import Priority from '../model/Priority';
import PriorityRequest from '../model/PriorityRequest';
import SelectionDefinition from '../model/SelectionDefinition';
import SelfBcfUser from '../model/SelfBcfUser';
import Stage from '../model/Stage';
import StageRequest from '../model/StageRequest';
import Topic from '../model/Topic';
import TopicPin from '../model/TopicPin';
import TopicRequest from '../model/TopicRequest';
import TopicStatus from '../model/TopicStatus';
import TopicStatusRequest from '../model/TopicStatusRequest';
import TopicType from '../model/TopicType';
import TopicTypeRequest from '../model/TopicTypeRequest';
import Version from '../model/Version';
import Viewpoint from '../model/Viewpoint';
import ViewpointRequest from '../model/ViewpointRequest';
import VisibilityDefinition from '../model/VisibilityDefinition';

/**
* Bcf service.
* @module api/BcfApi
* @version 0.0.0
*/
export default class BcfApi {

    /**
    * Constructs a new BcfApi. 
    * @alias module:api/BcfApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a comment
     * Create a comment  Required scopes: bcf:write
     * @param {Number} projectsPk A unique integer value identifying this project.
     * @param {String} topicsGuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentRequest} opts.commentRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Comment} and HTTP response
     */
    createCommentWithHttpInfo(projectsPk, topicsGuid, opts) {
      opts = opts || {};
      let postBody = opts['commentRequest'];
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createComment");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling createComment");
      }

      let pathParams = {
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a comment
     * Create a comment  Required scopes: bcf:write
     * @param {Number} projectsPk A unique integer value identifying this project.
     * @param {String} topicsGuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentRequest} opts.commentRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Comment}
     */
    createComment(projectsPk, topicsGuid, opts) {
      return this.createCommentWithHttpInfo(projectsPk, topicsGuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Label
     * This is not a standard route. Create a Label available for the project  Required scopes: bcf:write
     * @param {Number} projectsPk 
     * @param {module:model/BcfLabelRequest} bcfLabelRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BcfLabel} and HTTP response
     */
    createExtensionLabelWithHttpInfo(projectsPk, bcfLabelRequest) {
      let postBody = bcfLabelRequest;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createExtensionLabel");
      }
      // verify the required parameter 'bcfLabelRequest' is set
      if (bcfLabelRequest === undefined || bcfLabelRequest === null) {
        throw new Error("Missing the required parameter 'bcfLabelRequest' when calling createExtensionLabel");
      }

      let pathParams = {
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = BcfLabel;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/extension/label', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Label
     * This is not a standard route. Create a Label available for the project  Required scopes: bcf:write
     * @param {Number} projectsPk 
     * @param {module:model/BcfLabelRequest} bcfLabelRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BcfLabel}
     */
    createExtensionLabel(projectsPk, bcfLabelRequest) {
      return this.createExtensionLabelWithHttpInfo(projectsPk, bcfLabelRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Priority
     * This is not a standard route. Create a Priority available for the project  Required scopes: bcf:write
     * @param {Number} projectsPk 
     * @param {module:model/PriorityRequest} priorityRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Priority} and HTTP response
     */
    createExtensionPriorityWithHttpInfo(projectsPk, priorityRequest) {
      let postBody = priorityRequest;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createExtensionPriority");
      }
      // verify the required parameter 'priorityRequest' is set
      if (priorityRequest === undefined || priorityRequest === null) {
        throw new Error("Missing the required parameter 'priorityRequest' when calling createExtensionPriority");
      }

      let pathParams = {
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Priority;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/extension/priority', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Priority
     * This is not a standard route. Create a Priority available for the project  Required scopes: bcf:write
     * @param {Number} projectsPk 
     * @param {module:model/PriorityRequest} priorityRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Priority}
     */
    createExtensionPriority(projectsPk, priorityRequest) {
      return this.createExtensionPriorityWithHttpInfo(projectsPk, priorityRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Stage
     * This is not a standard route. Create a Stage available for the project  Required scopes: bcf:write
     * @param {Number} projectsPk 
     * @param {module:model/StageRequest} stageRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Stage} and HTTP response
     */
    createExtensionStageWithHttpInfo(projectsPk, stageRequest) {
      let postBody = stageRequest;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createExtensionStage");
      }
      // verify the required parameter 'stageRequest' is set
      if (stageRequest === undefined || stageRequest === null) {
        throw new Error("Missing the required parameter 'stageRequest' when calling createExtensionStage");
      }

      let pathParams = {
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Stage;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/extension/stage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Stage
     * This is not a standard route. Create a Stage available for the project  Required scopes: bcf:write
     * @param {Number} projectsPk 
     * @param {module:model/StageRequest} stageRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Stage}
     */
    createExtensionStage(projectsPk, stageRequest) {
      return this.createExtensionStageWithHttpInfo(projectsPk, stageRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a TopicStatus
     * This is not a standard route. Create a TopicStatus available for the project  Required scopes: bcf:write
     * @param {Number} projectsPk 
     * @param {module:model/TopicStatusRequest} topicStatusRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TopicStatus} and HTTP response
     */
    createExtensionStatusWithHttpInfo(projectsPk, topicStatusRequest) {
      let postBody = topicStatusRequest;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createExtensionStatus");
      }
      // verify the required parameter 'topicStatusRequest' is set
      if (topicStatusRequest === undefined || topicStatusRequest === null) {
        throw new Error("Missing the required parameter 'topicStatusRequest' when calling createExtensionStatus");
      }

      let pathParams = {
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = TopicStatus;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/extension/status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a TopicStatus
     * This is not a standard route. Create a TopicStatus available for the project  Required scopes: bcf:write
     * @param {Number} projectsPk 
     * @param {module:model/TopicStatusRequest} topicStatusRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TopicStatus}
     */
    createExtensionStatus(projectsPk, topicStatusRequest) {
      return this.createExtensionStatusWithHttpInfo(projectsPk, topicStatusRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a TopicType
     * This is not a standard route. Create a TopicType available for the project  Required scopes: bcf:write
     * @param {Number} projectsPk 
     * @param {module:model/TopicTypeRequest} topicTypeRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TopicType} and HTTP response
     */
    createExtensionTypeWithHttpInfo(projectsPk, topicTypeRequest) {
      let postBody = topicTypeRequest;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createExtensionType");
      }
      // verify the required parameter 'topicTypeRequest' is set
      if (topicTypeRequest === undefined || topicTypeRequest === null) {
        throw new Error("Missing the required parameter 'topicTypeRequest' when calling createExtensionType");
      }

      let pathParams = {
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = TopicType;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/extension/type', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a TopicType
     * This is not a standard route. Create a TopicType available for the project  Required scopes: bcf:write
     * @param {Number} projectsPk 
     * @param {module:model/TopicTypeRequest} topicTypeRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TopicType}
     */
    createExtensionType(projectsPk, topicTypeRequest) {
      return this.createExtensionTypeWithHttpInfo(projectsPk, topicTypeRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Topic with viewpoints and comments
     * This is not a standard route. You can send a topic, viewpoints and comments in a single call  Required scopes: bcf:write
     * @param {Number} projectsPk 
     * @param {module:model/FullTopicRequest} fullTopicRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.imgFormat All snapshot_data will be returned as url instead of base64
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FullTopic} and HTTP response
     */
    createFullTopicWithHttpInfo(projectsPk, fullTopicRequest, opts) {
      opts = opts || {};
      let postBody = fullTopicRequest;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createFullTopic");
      }
      // verify the required parameter 'fullTopicRequest' is set
      if (fullTopicRequest === undefined || fullTopicRequest === null) {
        throw new Error("Missing the required parameter 'fullTopicRequest' when calling createFullTopic");
      }

      let pathParams = {
        'projects_pk': projectsPk
      };
      let queryParams = {
        'img_format': opts['imgFormat']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FullTopic;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/full-topic', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Topic with viewpoints and comments
     * This is not a standard route. You can send a topic, viewpoints and comments in a single call  Required scopes: bcf:write
     * @param {Number} projectsPk 
     * @param {module:model/FullTopicRequest} fullTopicRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.imgFormat All snapshot_data will be returned as url instead of base64
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FullTopic}
     */
    createFullTopic(projectsPk, fullTopicRequest, opts) {
      return this.createFullTopicWithHttpInfo(projectsPk, fullTopicRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Pin
     * This is not a standard route. Create a Pin  Required scopes: bcf:write
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @param {String} viewpointsGuid 
     * @param {module:model/PinRequest} pinRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Pin} and HTTP response
     */
    createPinWithHttpInfo(projectsPk, topicsGuid, viewpointsGuid, pinRequest) {
      let postBody = pinRequest;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createPin");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling createPin");
      }
      // verify the required parameter 'viewpointsGuid' is set
      if (viewpointsGuid === undefined || viewpointsGuid === null) {
        throw new Error("Missing the required parameter 'viewpointsGuid' when calling createPin");
      }
      // verify the required parameter 'pinRequest' is set
      if (pinRequest === undefined || pinRequest === null) {
        throw new Error("Missing the required parameter 'pinRequest' when calling createPin");
      }

      let pathParams = {
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid,
        'viewpoints_guid': viewpointsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Pin;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{viewpoints_guid}/pin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Pin
     * This is not a standard route. Create a Pin  Required scopes: bcf:write
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @param {String} viewpointsGuid 
     * @param {module:model/PinRequest} pinRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Pin}
     */
    createPin(projectsPk, topicsGuid, viewpointsGuid, pinRequest) {
      return this.createPinWithHttpInfo(projectsPk, topicsGuid, viewpointsGuid, pinRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a topic
     * Create a topic  Required scopes: bcf:write
     * @param {Number} projectsPk 
     * @param {module:model/TopicRequest} topicRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Topic} and HTTP response
     */
    createTopicWithHttpInfo(projectsPk, topicRequest) {
      let postBody = topicRequest;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createTopic");
      }
      // verify the required parameter 'topicRequest' is set
      if (topicRequest === undefined || topicRequest === null) {
        throw new Error("Missing the required parameter 'topicRequest' when calling createTopic");
      }

      let pathParams = {
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Topic;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a topic
     * Create a topic  Required scopes: bcf:write
     * @param {Number} projectsPk 
     * @param {module:model/TopicRequest} topicRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Topic}
     */
    createTopic(projectsPk, topicRequest) {
      return this.createTopicWithHttpInfo(projectsPk, topicRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Viewpoint
     * Create a Viewpoint  Required scopes: bcf:write
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.imgFormat All snapshot_data will be returned as url instead of base64
     * @param {module:model/ViewpointRequest} opts.viewpointRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Viewpoint} and HTTP response
     */
    createViewpointWithHttpInfo(projectsPk, topicsGuid, opts) {
      opts = opts || {};
      let postBody = opts['viewpointRequest'];
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createViewpoint");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling createViewpoint");
      }

      let pathParams = {
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
        'img_format': opts['imgFormat']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Viewpoint;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Viewpoint
     * Create a Viewpoint  Required scopes: bcf:write
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.imgFormat All snapshot_data will be returned as url instead of base64
     * @param {module:model/ViewpointRequest} opts.viewpointRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Viewpoint}
     */
    createViewpoint(projectsPk, topicsGuid, opts) {
      return this.createViewpointWithHttpInfo(projectsPk, topicsGuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a comment
     * Delete a comment  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk A unique integer value identifying this project.
     * @param {String} topicsGuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCommentWithHttpInfo(guid, projectsPk, topicsGuid) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling deleteComment");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteComment");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling deleteComment");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/comments/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a comment
     * Delete a comment  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk A unique integer value identifying this project.
     * @param {String} topicsGuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteComment(guid, projectsPk, topicsGuid) {
      return this.deleteCommentWithHttpInfo(guid, projectsPk, topicsGuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Label
     * This is not a standard route. Delete a Label. Topics using this label won't be deleted   Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this label.
     * @param {Number} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteExtensionLabelWithHttpInfo(id, projectsPk) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteExtensionLabel");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteExtensionLabel");
      }

      let pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/extension/label/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Label
     * This is not a standard route. Delete a Label. Topics using this label won't be deleted   Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this label.
     * @param {Number} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteExtensionLabel(id, projectsPk) {
      return this.deleteExtensionLabelWithHttpInfo(id, projectsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Priority
     * This is not a standard route. Delete a Priority. Topics using this priority won't be deleted   Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this priority.
     * @param {Number} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteExtensionPriorityWithHttpInfo(id, projectsPk) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteExtensionPriority");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteExtensionPriority");
      }

      let pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/extension/priority/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Priority
     * This is not a standard route. Delete a Priority. Topics using this priority won't be deleted   Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this priority.
     * @param {Number} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteExtensionPriority(id, projectsPk) {
      return this.deleteExtensionPriorityWithHttpInfo(id, projectsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Stage
     * This is not a standard route. Delete a Stage. Topics using this stage won't be deleted   Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this stage.
     * @param {Number} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteExtensionStageWithHttpInfo(id, projectsPk) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteExtensionStage");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteExtensionStage");
      }

      let pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/extension/stage/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Stage
     * This is not a standard route. Delete a Stage. Topics using this stage won't be deleted   Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this stage.
     * @param {Number} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteExtensionStage(id, projectsPk) {
      return this.deleteExtensionStageWithHttpInfo(id, projectsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a TopicStatus
     * This is not a standard route. Delete a TopicStatus. Topics using this status won't be deleted   Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this topic status.
     * @param {Number} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteExtensionStatusWithHttpInfo(id, projectsPk) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteExtensionStatus");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteExtensionStatus");
      }

      let pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/extension/status/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a TopicStatus
     * This is not a standard route. Delete a TopicStatus. Topics using this status won't be deleted   Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this topic status.
     * @param {Number} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteExtensionStatus(id, projectsPk) {
      return this.deleteExtensionStatusWithHttpInfo(id, projectsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a TopicType
     * This is not a standard route. Delete a TopicType. Topics using this type won't be deleted  Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this topic type.
     * @param {Number} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteExtensionTypeWithHttpInfo(id, projectsPk) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteExtensionType");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteExtensionType");
      }

      let pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/extension/type/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a TopicType
     * This is not a standard route. Delete a TopicType. Topics using this type won't be deleted  Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this topic type.
     * @param {Number} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteExtensionType(id, projectsPk) {
      return this.deleteExtensionTypeWithHttpInfo(id, projectsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Pin
     * This is not a standard route. Delete a Pin  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @param {String} viewpointsGuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deletePinWithHttpInfo(guid, projectsPk, topicsGuid, viewpointsGuid) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling deletePin");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deletePin");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling deletePin");
      }
      // verify the required parameter 'viewpointsGuid' is set
      if (viewpointsGuid === undefined || viewpointsGuid === null) {
        throw new Error("Missing the required parameter 'viewpointsGuid' when calling deletePin");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid,
        'viewpoints_guid': viewpointsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{viewpoints_guid}/pin/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Pin
     * This is not a standard route. Delete a Pin  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @param {String} viewpointsGuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deletePin(guid, projectsPk, topicsGuid, viewpointsGuid) {
      return this.deletePinWithHttpInfo(guid, projectsPk, topicsGuid, viewpointsGuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a topic
     * Delete a topic  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteTopicWithHttpInfo(guid, projectsPk) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling deleteTopic");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteTopic");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a topic
     * Delete a topic  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteTopic(guid, projectsPk) {
      return this.deleteTopicWithHttpInfo(guid, projectsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Viewpoint
     * This is not a standard route. Delete a Viewpoint  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.imgFormat All snapshot_data will be returned as url instead of base64
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteViewpointWithHttpInfo(guid, projectsPk, topicsGuid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling deleteViewpoint");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteViewpoint");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling deleteViewpoint");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
        'img_format': opts['imgFormat']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Viewpoint
     * This is not a standard route. Delete a Viewpoint  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.imgFormat All snapshot_data will be returned as url instead of base64
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteViewpoint(guid, projectsPk, topicsGuid, opts) {
      return this.deleteViewpointWithHttpInfo(guid, projectsPk, topicsGuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Export project's topics in bcf-xml format
     * This is not a standard route. Export project's topics in bcf-xml format  Required scopes: bcf:read
     * @param {Number} id A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {String} opts.format topic format to export, comma separated. Default = standard
     * @param {String} opts.topics topic guids to export, comma separated. Default = all
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    downloadBcfExportWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadBcfExport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'format': opts['format'],
        'topics': opts['topics']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Export project's topics in bcf-xml format
     * This is not a standard route. Export project's topics in bcf-xml format  Required scopes: bcf:read
     * @param {Number} id A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {String} opts.format topic format to export, comma separated. Default = standard
     * @param {String} opts.topics topic guids to export, comma separated. Default = all
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    downloadBcfExport(id, opts) {
      return this.downloadBcfExportWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Export project's topics in excel format
     * This is not a standard route. Export project's topics in excel format  Required scopes: bcf:read
     * @param {Number} id A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {String} opts.format topic format to export, comma separated. Default = standard
     * @param {module:model/String} opts.locale Locale of the exported file. Available locales are 'en' and 'fr'. If set locale is not supported, 'en' will be used
     * @param {String} opts.topics topic guids to export, comma separated. Default = all
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    downloadBcfExportXlsxWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadBcfExportXlsx");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'format': opts['format'],
        'locale': opts['locale'],
        'topics': opts['topics']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}/export-xlsx', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Export project's topics in excel format
     * This is not a standard route. Export project's topics in excel format  Required scopes: bcf:read
     * @param {Number} id A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {String} opts.format topic format to export, comma separated. Default = standard
     * @param {module:model/String} opts.locale Locale of the exported file. Available locales are 'en' and 'fr'. If set locale is not supported, 'en' will be used
     * @param {String} opts.topics topic guids to export, comma separated. Default = all
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    downloadBcfExportXlsx(id, opts) {
      return this.downloadBcfExportXlsxWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of a BCF project
     * Update all fields of a BCF project  Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this project.
     * @param {module:model/BcfProjectRequest} bcfProjectRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BcfProject} and HTTP response
     */
    fullUpdateBcfProjectWithHttpInfo(id, bcfProjectRequest) {
      let postBody = bcfProjectRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateBcfProject");
      }
      // verify the required parameter 'bcfProjectRequest' is set
      if (bcfProjectRequest === undefined || bcfProjectRequest === null) {
        throw new Error("Missing the required parameter 'bcfProjectRequest' when calling fullUpdateBcfProject");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = BcfProject;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update all fields of a BCF project
     * Update all fields of a BCF project  Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this project.
     * @param {module:model/BcfProjectRequest} bcfProjectRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BcfProject}
     */
    fullUpdateBcfProject(id, bcfProjectRequest) {
      return this.fullUpdateBcfProjectWithHttpInfo(id, bcfProjectRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of a comment
     * Update all fields of a comment  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk A unique integer value identifying this project.
     * @param {String} topicsGuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentRequest} opts.commentRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Comment} and HTTP response
     */
    fullUpdateCommentWithHttpInfo(guid, projectsPk, topicsGuid, opts) {
      opts = opts || {};
      let postBody = opts['commentRequest'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling fullUpdateComment");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateComment");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling fullUpdateComment");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/comments/{guid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update all fields of a comment
     * Update all fields of a comment  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk A unique integer value identifying this project.
     * @param {String} topicsGuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentRequest} opts.commentRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Comment}
     */
    fullUpdateComment(guid, projectsPk, topicsGuid, opts) {
      return this.fullUpdateCommentWithHttpInfo(guid, projectsPk, topicsGuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of a topic
     * This is not a standard route. You can update topic, viewpoints and comment is a signle call  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {module:model/FullTopicRequest} fullTopicRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.imgFormat All snapshot_data will be returned as url instead of base64
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FullTopic} and HTTP response
     */
    fullUpdateFullTopicWithHttpInfo(guid, projectsPk, fullTopicRequest, opts) {
      opts = opts || {};
      let postBody = fullTopicRequest;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling fullUpdateFullTopic");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateFullTopic");
      }
      // verify the required parameter 'fullTopicRequest' is set
      if (fullTopicRequest === undefined || fullTopicRequest === null) {
        throw new Error("Missing the required parameter 'fullTopicRequest' when calling fullUpdateFullTopic");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk
      };
      let queryParams = {
        'img_format': opts['imgFormat']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FullTopic;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/full-topic/{guid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update all fields of a topic
     * This is not a standard route. You can update topic, viewpoints and comment is a signle call  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {module:model/FullTopicRequest} fullTopicRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.imgFormat All snapshot_data will be returned as url instead of base64
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FullTopic}
     */
    fullUpdateFullTopic(guid, projectsPk, fullTopicRequest, opts) {
      return this.fullUpdateFullTopicWithHttpInfo(guid, projectsPk, fullTopicRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of a Pin
     * This is not a standard route. Update all fields of a Pin  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @param {String} viewpointsGuid 
     * @param {module:model/PinRequest} pinRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Pin} and HTTP response
     */
    fullUpdatePinWithHttpInfo(guid, projectsPk, topicsGuid, viewpointsGuid, pinRequest) {
      let postBody = pinRequest;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling fullUpdatePin");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdatePin");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling fullUpdatePin");
      }
      // verify the required parameter 'viewpointsGuid' is set
      if (viewpointsGuid === undefined || viewpointsGuid === null) {
        throw new Error("Missing the required parameter 'viewpointsGuid' when calling fullUpdatePin");
      }
      // verify the required parameter 'pinRequest' is set
      if (pinRequest === undefined || pinRequest === null) {
        throw new Error("Missing the required parameter 'pinRequest' when calling fullUpdatePin");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid,
        'viewpoints_guid': viewpointsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Pin;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{viewpoints_guid}/pin/{guid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update all fields of a Pin
     * This is not a standard route. Update all fields of a Pin  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @param {String} viewpointsGuid 
     * @param {module:model/PinRequest} pinRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Pin}
     */
    fullUpdatePin(guid, projectsPk, topicsGuid, viewpointsGuid, pinRequest) {
      return this.fullUpdatePinWithHttpInfo(guid, projectsPk, topicsGuid, viewpointsGuid, pinRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of a topic
     * Update all fields of a topic  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {module:model/TopicRequest} topicRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Topic} and HTTP response
     */
    fullUpdateTopicWithHttpInfo(guid, projectsPk, topicRequest) {
      let postBody = topicRequest;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling fullUpdateTopic");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateTopic");
      }
      // verify the required parameter 'topicRequest' is set
      if (topicRequest === undefined || topicRequest === null) {
        throw new Error("Missing the required parameter 'topicRequest' when calling fullUpdateTopic");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Topic;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{guid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update all fields of a topic
     * Update all fields of a topic  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {module:model/TopicRequest} topicRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Topic}
     */
    fullUpdateTopic(guid, projectsPk, topicRequest) {
      return this.fullUpdateTopicWithHttpInfo(guid, projectsPk, topicRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Authentication Information
     * oauth2_dynamic_client_reg_url is not supported, http_basic_supported is always set to false, 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Auth>} and HTTP response
     */
    getAuthWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Auth];
      return this.apiClient.callApi(
        '/bcf/2.1/auth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Authentication Information
     * oauth2_dynamic_client_reg_url is not supported, http_basic_supported is always set to false, 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Auth>}
     */
    getAuth() {
      return this.getAuthWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a BCF project
     * Retrieve a BCF project  Required scopes: bcf:read
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BcfProject} and HTTP response
     */
    getBcfProjectWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBcfProject");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BcfProject;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a BCF project
     * Retrieve a BCF project  Required scopes: bcf:read
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BcfProject}
     */
    getBcfProject(id) {
      return this.getBcfProjectWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all BCF projects
     * Retrieve all BCF projects  Required scopes: bcf:read
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/BcfProject>} and HTTP response
     */
    getBcfProjectsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BcfProject];
      return this.apiClient.callApi(
        '/bcf/2.1/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all BCF projects
     * Retrieve all BCF projects  Required scopes: bcf:read
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/BcfProject>}
     */
    getBcfProjects() {
      return this.getBcfProjectsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all colorings of a viewpoint
     * Retrieve all colorings of a viewpoint  Required scopes: bcf:read
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ColoringDefinition} and HTTP response
     */
    getColoringsWithHttpInfo(guid, projectsPk, topicsGuid) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling getColorings");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getColorings");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling getColorings");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ColoringDefinition;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}/coloring', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all colorings of a viewpoint
     * Retrieve all colorings of a viewpoint  Required scopes: bcf:read
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ColoringDefinition}
     */
    getColorings(guid, projectsPk, topicsGuid) {
      return this.getColoringsWithHttpInfo(guid, projectsPk, topicsGuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a comment
     * Retrieve a comment  Required scopes: bcf:read
     * @param {String} guid 
     * @param {Number} projectsPk A unique integer value identifying this project.
     * @param {String} topicsGuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Comment} and HTTP response
     */
    getCommentWithHttpInfo(guid, projectsPk, topicsGuid) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling getComment");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getComment");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling getComment");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/comments/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a comment
     * Retrieve a comment  Required scopes: bcf:read
     * @param {String} guid 
     * @param {Number} projectsPk A unique integer value identifying this project.
     * @param {String} topicsGuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Comment}
     */
    getComment(guid, projectsPk, topicsGuid) {
      return this.getCommentWithHttpInfo(guid, projectsPk, topicsGuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all comments
     * Retrieve all comments  Required scopes: bcf:read
     * @param {Number} projectsPk A unique integer value identifying this project.
     * @param {String} topicsGuid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter OData filters as defined in BCF spec
     * @param {String} opts.orderby OData orderby as defined in BCF spec
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Comment>} and HTTP response
     */
    getCommentsWithHttpInfo(projectsPk, topicsGuid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getComments");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling getComments");
      }

      let pathParams = {
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Comment];
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all comments
     * Retrieve all comments  Required scopes: bcf:read
     * @param {Number} projectsPk A unique integer value identifying this project.
     * @param {String} topicsGuid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter OData filters as defined in BCF spec
     * @param {String} opts.orderby OData orderby as defined in BCF spec
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Comment>}
     */
    getComments(projectsPk, topicsGuid, opts) {
      return this.getCommentsWithHttpInfo(projectsPk, topicsGuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve project detailed extensions
     * This is not a standard route. Retrieve project detailed extensions  Required scopes: bcf:read
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DetailedExtensions} and HTTP response
     */
    getDetailedExtensionsWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDetailedExtensions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DetailedExtensions;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}/detailed-extensions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve project detailed extensions
     * This is not a standard route. Retrieve project detailed extensions  Required scopes: bcf:read
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DetailedExtensions}
     */
    getDetailedExtensions(id) {
      return this.getDetailedExtensionsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve project extensions
     * Retrieve project extensions  Required scopes: bcf:read
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Extensions} and HTTP response
     */
    getExtensionsWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getExtensions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Extensions;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}/extensions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve project extensions
     * Retrieve project extensions  Required scopes: bcf:read
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Extensions}
     */
    getExtensions(id) {
      return this.getExtensionsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a full topic
     * This is not a standard route. It responds with a topic, its viewpoints and its comments  Required scopes: bcf:read
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.imgFormat All snapshot_data will be returned as url instead of base64
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FullTopic} and HTTP response
     */
    getFullTopicWithHttpInfo(guid, projectsPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling getFullTopic");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getFullTopic");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk
      };
      let queryParams = {
        'img_format': opts['imgFormat']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FullTopic;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/full-topic/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a full topic
     * This is not a standard route. It responds with a topic, its viewpoints and its comments  Required scopes: bcf:read
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.imgFormat All snapshot_data will be returned as url instead of base64
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FullTopic}
     */
    getFullTopic(guid, projectsPk, opts) {
      return this.getFullTopicWithHttpInfo(guid, projectsPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all full topics
     * This is not a standard route. It responds with all topics, their viewpoints and their comments  Required scopes: bcf:read
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter OData filters as defined in BCF spec
     * @param {String} opts.orderby OData orderby as defined in BCF spec
     * @param {String} opts.format 
     * @param {Array.<Number>} opts.ifcs 
     * @param {module:model/String} opts.imgFormat All snapshot_data will be returned as url instead of base64
     * @param {Array.<Number>} opts.models 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/FullTopic>} and HTTP response
     */
    getFullTopicsWithHttpInfo(projectsPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getFullTopics");
      }

      let pathParams = {
        'projects_pk': projectsPk
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$orderby': opts['orderby'],
        'format': opts['format'],
        'ifcs': this.apiClient.buildCollectionParam(opts['ifcs'], 'multi'),
        'img_format': opts['imgFormat'],
        'models': this.apiClient.buildCollectionParam(opts['models'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FullTopic];
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/full-topic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all full topics
     * This is not a standard route. It responds with all topics, their viewpoints and their comments  Required scopes: bcf:read
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter OData filters as defined in BCF spec
     * @param {String} opts.orderby OData orderby as defined in BCF spec
     * @param {String} opts.format 
     * @param {Array.<Number>} opts.ifcs 
     * @param {module:model/String} opts.imgFormat All snapshot_data will be returned as url instead of base64
     * @param {Array.<Number>} opts.models 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/FullTopic>}
     */
    getFullTopics(projectsPk, opts) {
      return this.getFullTopicsWithHttpInfo(projectsPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Pins of a viewpoint
     * This is not a standard route. Retrieve all Pins of a viewpoint  Required scopes: bcf:read
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @param {String} viewpointsGuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Pin>} and HTTP response
     */
    getPinsWithHttpInfo(projectsPk, topicsGuid, viewpointsGuid) {
      let postBody = null;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getPins");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling getPins");
      }
      // verify the required parameter 'viewpointsGuid' is set
      if (viewpointsGuid === undefined || viewpointsGuid === null) {
        throw new Error("Missing the required parameter 'viewpointsGuid' when calling getPins");
      }

      let pathParams = {
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid,
        'viewpoints_guid': viewpointsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Pin];
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{viewpoints_guid}/pin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all Pins of a viewpoint
     * This is not a standard route. Retrieve all Pins of a viewpoint  Required scopes: bcf:read
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @param {String} viewpointsGuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Pin>}
     */
    getPins(projectsPk, topicsGuid, viewpointsGuid) {
      return this.getPinsWithHttpInfo(projectsPk, topicsGuid, viewpointsGuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all related topics
     * This feature is not supported yet and will always respond with an empty array  Required scopes: bcf:read
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.format 
     * @param {Array.<Number>} opts.ifcs 
     * @param {Array.<Number>} opts.models 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    getRelatedTopicsWithHttpInfo(guid, projectsPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling getRelatedTopics");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getRelatedTopics");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk
      };
      let queryParams = {
        'format': opts['format'],
        'ifcs': this.apiClient.buildCollectionParam(opts['ifcs'], 'multi'),
        'models': this.apiClient.buildCollectionParam(opts['models'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{guid}/related_topics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all related topics
     * This feature is not supported yet and will always respond with an empty array  Required scopes: bcf:read
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.format 
     * @param {Array.<Number>} opts.ifcs 
     * @param {Array.<Number>} opts.models 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    getRelatedTopics(guid, projectsPk, opts) {
      return this.getRelatedTopicsWithHttpInfo(guid, projectsPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all selections of a viewpoint
     * Retrieve all selections of a viewpoint  Required scopes: bcf:read
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SelectionDefinition} and HTTP response
     */
    getSelectionsWithHttpInfo(guid, projectsPk, topicsGuid) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling getSelections");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getSelections");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling getSelections");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SelectionDefinition;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}/selection', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all selections of a viewpoint
     * Retrieve all selections of a viewpoint  Required scopes: bcf:read
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SelectionDefinition}
     */
    getSelections(guid, projectsPk, topicsGuid) {
      return this.getSelectionsWithHttpInfo(guid, projectsPk, topicsGuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve the viewpoint' snapshot
     * Retrieve the viewpoint' snapshot  Required scopes: bcf:read
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    getSnapshotWithHttpInfo(guid, projectsPk, topicsGuid) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling getSnapshot");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getSnapshot");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling getSnapshot");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}/snapshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve the viewpoint' snapshot
     * Retrieve the viewpoint' snapshot  Required scopes: bcf:read
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    getSnapshot(guid, projectsPk, topicsGuid) {
      return this.getSnapshotWithHttpInfo(guid, projectsPk, topicsGuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a topic
     * Retrieve a topic  Required scopes: bcf:read
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Topic} and HTTP response
     */
    getTopicWithHttpInfo(guid, projectsPk) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling getTopic");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getTopic");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Topic;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a topic
     * Retrieve a topic  Required scopes: bcf:read
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Topic}
     */
    getTopic(guid, projectsPk) {
      return this.getTopicWithHttpInfo(guid, projectsPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all related documents
     * This feature is not supported yet and will always respond with an empty array  Required scopes: bcf:read
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.format 
     * @param {Array.<Number>} opts.ifcs 
     * @param {Array.<Number>} opts.models 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    getTopicDocumentReferencesWithHttpInfo(guid, projectsPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling getTopicDocumentReferences");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getTopicDocumentReferences");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk
      };
      let queryParams = {
        'format': opts['format'],
        'ifcs': this.apiClient.buildCollectionParam(opts['ifcs'], 'multi'),
        'models': this.apiClient.buildCollectionParam(opts['models'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{guid}/document_references', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all related documents
     * This feature is not supported yet and will always respond with an empty array  Required scopes: bcf:read
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.format 
     * @param {Array.<Number>} opts.ifcs 
     * @param {Array.<Number>} opts.models 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    getTopicDocumentReferences(guid, projectsPk, opts) {
      return this.getTopicDocumentReferencesWithHttpInfo(guid, projectsPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all viewpoints attached to the topic
     * This is not a standard route. It returns all viewpoints of the topic that are not attached to a comment.  Required scopes: bcf:read
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.imgFormat All snapshot_data will be returned as url instead of base64
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Viewpoint>} and HTTP response
     */
    getTopicViewpointsWithHttpInfo(projectsPk, topicsGuid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getTopicViewpoints");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling getTopicViewpoints");
      }

      let pathParams = {
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
        'img_format': opts['imgFormat']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Viewpoint];
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/topic-viewpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all viewpoints attached to the topic
     * This is not a standard route. It returns all viewpoints of the topic that are not attached to a comment.  Required scopes: bcf:read
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.imgFormat All snapshot_data will be returned as url instead of base64
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Viewpoint>}
     */
    getTopicViewpoints(projectsPk, topicsGuid, opts) {
      return this.getTopicViewpointsWithHttpInfo(projectsPk, topicsGuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all topics
     * Retrieve all topics  Required scopes: bcf:read
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter OData filters as defined in BCF spec
     * @param {String} opts.orderby OData orderby as defined in BCF spec
     * @param {String} opts.format 
     * @param {Array.<Number>} opts.ifcs 
     * @param {Array.<Number>} opts.models 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Topic>} and HTTP response
     */
    getTopicsWithHttpInfo(projectsPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getTopics");
      }

      let pathParams = {
        'projects_pk': projectsPk
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$orderby': opts['orderby'],
        'format': opts['format'],
        'ifcs': this.apiClient.buildCollectionParam(opts['ifcs'], 'multi'),
        'models': this.apiClient.buildCollectionParam(opts['models'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Topic];
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all topics
     * Retrieve all topics  Required scopes: bcf:read
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter OData filters as defined in BCF spec
     * @param {String} opts.orderby OData orderby as defined in BCF spec
     * @param {String} opts.format 
     * @param {Array.<Number>} opts.ifcs 
     * @param {Array.<Number>} opts.models 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Topic>}
     */
    getTopics(projectsPk, opts) {
      return this.getTopicsWithHttpInfo(projectsPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get pins of all or many topics
     * This is not a standard route. Get pins of all or many topics  Required scopes: bcf:read
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.format 
     * @param {Array.<Number>} opts.ifcs 
     * @param {Array.<Number>} opts.models 
     * @param {String} opts.topics topic guids to include, comma separated. Default = all
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TopicPin>} and HTTP response
     */
    getTopicsPinsWithHttpInfo(projectsPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getTopicsPins");
      }

      let pathParams = {
        'projects_pk': projectsPk
      };
      let queryParams = {
        'format': opts['format'],
        'ifcs': this.apiClient.buildCollectionParam(opts['ifcs'], 'multi'),
        'models': this.apiClient.buildCollectionParam(opts['models'], 'multi'),
        'topics': opts['topics']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TopicPin];
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/pins', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get pins of all or many topics
     * This is not a standard route. Get pins of all or many topics  Required scopes: bcf:read
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.format 
     * @param {Array.<Number>} opts.ifcs 
     * @param {Array.<Number>} opts.models 
     * @param {String} opts.topics topic guids to include, comma separated. Default = all
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TopicPin>}
     */
    getTopicsPins(projectsPk, opts) {
      return this.getTopicsPinsWithHttpInfo(projectsPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get current user info
     * Get current user info. If request comes from an App, the response is always:{    \"id\": None,    \"name\": None,    \"is_client\": True,}  Required scopes: bcf:read
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SelfBcfUser} and HTTP response
     */
    getUserWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SelfBcfUser;
      return this.apiClient.callApi(
        '/bcf/2.1/current-user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get current user info
     * Get current user info. If request comes from an App, the response is always:{    \"id\": None,    \"name\": None,    \"is_client\": True,}  Required scopes: bcf:read
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SelfBcfUser}
     */
    getUser() {
      return this.getUserWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all supported BCF versions by this API
     * Spoiler: it's only v2.1
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Version>} and HTTP response
     */
    getVersionsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Version];
      return this.apiClient.callApi(
        '/bcf/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all supported BCF versions by this API
     * Spoiler: it's only v2.1
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Version>}
     */
    getVersions() {
      return this.getVersionsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Pin
     * This is not a standard route. Retrieve a Pin  Required scopes: bcf:read
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @param {String} viewpointsGuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Pin} and HTTP response
     */
    getViewpoinPinWithHttpInfo(guid, projectsPk, topicsGuid, viewpointsGuid) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling getViewpoinPin");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getViewpoinPin");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling getViewpoinPin");
      }
      // verify the required parameter 'viewpointsGuid' is set
      if (viewpointsGuid === undefined || viewpointsGuid === null) {
        throw new Error("Missing the required parameter 'viewpointsGuid' when calling getViewpoinPin");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid,
        'viewpoints_guid': viewpointsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Pin;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{viewpoints_guid}/pin/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Pin
     * This is not a standard route. Retrieve a Pin  Required scopes: bcf:read
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @param {String} viewpointsGuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Pin}
     */
    getViewpoinPin(guid, projectsPk, topicsGuid, viewpointsGuid) {
      return this.getViewpoinPinWithHttpInfo(guid, projectsPk, topicsGuid, viewpointsGuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Viewpoint
     * Retrieve a Viewpoint  Required scopes: bcf:read
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.imgFormat All snapshot_data will be returned as url instead of base64
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Viewpoint} and HTTP response
     */
    getViewpointWithHttpInfo(guid, projectsPk, topicsGuid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling getViewpoint");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getViewpoint");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling getViewpoint");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
        'img_format': opts['imgFormat']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Viewpoint;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Viewpoint
     * Retrieve a Viewpoint  Required scopes: bcf:read
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.imgFormat All snapshot_data will be returned as url instead of base64
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Viewpoint}
     */
    getViewpoint(guid, projectsPk, topicsGuid, opts) {
      return this.getViewpointWithHttpInfo(guid, projectsPk, topicsGuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Viewpoints of a topic
     * Retrieve all Viewpoints of a topic  Required scopes: bcf:read
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.imgFormat All snapshot_data will be returned as url instead of base64
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Viewpoint>} and HTTP response
     */
    getViewpointsWithHttpInfo(projectsPk, topicsGuid, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getViewpoints");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling getViewpoints");
      }

      let pathParams = {
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
        'img_format': opts['imgFormat']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Viewpoint];
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all Viewpoints of a topic
     * Retrieve all Viewpoints of a topic  Required scopes: bcf:read
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.imgFormat All snapshot_data will be returned as url instead of base64
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Viewpoint>}
     */
    getViewpoints(projectsPk, topicsGuid, opts) {
      return this.getViewpointsWithHttpInfo(projectsPk, topicsGuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all visibilities of a viewpoint
     * Retrieve all visibilities of a viewpoint  Required scopes: bcf:read
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VisibilityDefinition} and HTTP response
     */
    getVisibilitiesWithHttpInfo(guid, projectsPk, topicsGuid) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling getVisibilities");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getVisibilities");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling getVisibilities");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VisibilityDefinition;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}/visibility', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all visibilities of a viewpoint
     * Retrieve all visibilities of a viewpoint  Required scopes: bcf:read
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VisibilityDefinition}
     */
    getVisibilities(guid, projectsPk, topicsGuid) {
      return this.getVisibilitiesWithHttpInfo(guid, projectsPk, topicsGuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Import bcf-xml format into this project
     * This is not a standard route. Import bcf-xml format into this project. If there are guid conflict, an error will be raised. If there are index conflicts, indexes of the imported file will be overriden with a new index. Author and assigned_to fields will be linked to existing users in the project. If no matching user are found, fields will be emptied. Only BCF 2.1 is supported  Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this project.
     * @param {String} name Name of the project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    importBcfWithHttpInfo(id, name) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling importBcf");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling importBcf");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': name
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Import bcf-xml format into this project
     * This is not a standard route. Import bcf-xml format into this project. If there are guid conflict, an error will be raised. If there are index conflicts, indexes of the imported file will be overriden with a new index. Author and assigned_to fields will be linked to existing users in the project. If no matching user are found, fields will be emptied. Only BCF 2.1 is supported  Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this project.
     * @param {String} name Name of the project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    importBcf(id, name) {
      return this.importBcfWithHttpInfo(id, name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a BCF project
     * Update some fields of a BCF project  Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedBcfProjectRequest} opts.patchedBcfProjectRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BcfProject} and HTTP response
     */
    updateBcfProjectWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['patchedBcfProjectRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBcfProject");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = BcfProject;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a BCF project
     * Update some fields of a BCF project  Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedBcfProjectRequest} opts.patchedBcfProjectRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BcfProject}
     */
    updateBcfProject(id, opts) {
      return this.updateBcfProjectWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a comment
     * Update some fields of a comment  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk A unique integer value identifying this project.
     * @param {String} topicsGuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedCommentRequest} opts.patchedCommentRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Comment} and HTTP response
     */
    updateCommentWithHttpInfo(guid, projectsPk, topicsGuid, opts) {
      opts = opts || {};
      let postBody = opts['patchedCommentRequest'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling updateComment");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateComment");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling updateComment");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/comments/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a comment
     * Update some fields of a comment  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk A unique integer value identifying this project.
     * @param {String} topicsGuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedCommentRequest} opts.patchedCommentRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Comment}
     */
    updateComment(guid, projectsPk, topicsGuid, opts) {
      return this.updateCommentWithHttpInfo(guid, projectsPk, topicsGuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Label
     * This is not a standard route. Update a Label. All topics using this label will be updated  Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this label.
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedBcfLabelRequest} opts.patchedBcfLabelRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BcfLabel} and HTTP response
     */
    updateExtensionLabelWithHttpInfo(id, projectsPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedBcfLabelRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateExtensionLabel");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateExtensionLabel");
      }

      let pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = BcfLabel;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/extension/label/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Label
     * This is not a standard route. Update a Label. All topics using this label will be updated  Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this label.
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedBcfLabelRequest} opts.patchedBcfLabelRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BcfLabel}
     */
    updateExtensionLabel(id, projectsPk, opts) {
      return this.updateExtensionLabelWithHttpInfo(id, projectsPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Priority
     * This is not a standard route. Update a Priority. All topics using this priority will be updated  Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this priority.
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedPriorityRequest} opts.patchedPriorityRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Priority} and HTTP response
     */
    updateExtensionPriorityWithHttpInfo(id, projectsPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedPriorityRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateExtensionPriority");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateExtensionPriority");
      }

      let pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Priority;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/extension/priority/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Priority
     * This is not a standard route. Update a Priority. All topics using this priority will be updated  Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this priority.
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedPriorityRequest} opts.patchedPriorityRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Priority}
     */
    updateExtensionPriority(id, projectsPk, opts) {
      return this.updateExtensionPriorityWithHttpInfo(id, projectsPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Stage
     * This is not a standard route. Update a Stage. All topics using this stage will be updated  Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this stage.
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedStageRequest} opts.patchedStageRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Stage} and HTTP response
     */
    updateExtensionStageWithHttpInfo(id, projectsPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedStageRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateExtensionStage");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateExtensionStage");
      }

      let pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Stage;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/extension/stage/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Stage
     * This is not a standard route. Update a Stage. All topics using this stage will be updated  Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this stage.
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedStageRequest} opts.patchedStageRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Stage}
     */
    updateExtensionStage(id, projectsPk, opts) {
      return this.updateExtensionStageWithHttpInfo(id, projectsPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a TopicStatus
     * This is not a standard route. Update a TopicStatus. All topics using this status will be updated  Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this topic status.
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedTopicStatusRequest} opts.patchedTopicStatusRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TopicStatus} and HTTP response
     */
    updateExtensionStatusWithHttpInfo(id, projectsPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedTopicStatusRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateExtensionStatus");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateExtensionStatus");
      }

      let pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = TopicStatus;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/extension/status/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a TopicStatus
     * This is not a standard route. Update a TopicStatus. All topics using this status will be updated  Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this topic status.
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedTopicStatusRequest} opts.patchedTopicStatusRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TopicStatus}
     */
    updateExtensionStatus(id, projectsPk, opts) {
      return this.updateExtensionStatusWithHttpInfo(id, projectsPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a TopicType
     * This is not a standard route. Update a TopicType. All topics using this type will be updated  Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this topic type.
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedTopicTypeRequest} opts.patchedTopicTypeRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TopicType} and HTTP response
     */
    updateExtensionTypeWithHttpInfo(id, projectsPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedTopicTypeRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateExtensionType");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateExtensionType");
      }

      let pathParams = {
        'id': id,
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = TopicType;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/extension/type/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a TopicType
     * This is not a standard route. Update a TopicType. All topics using this type will be updated  Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this topic type.
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedTopicTypeRequest} opts.patchedTopicTypeRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TopicType}
     */
    updateExtensionType(id, projectsPk, opts) {
      return this.updateExtensionTypeWithHttpInfo(id, projectsPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a topic
     * This is not a standard route. You can update topic, viewpoints and comment is a signle call  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.imgFormat All snapshot_data will be returned as url instead of base64
     * @param {module:model/PatchedFullTopicRequest} opts.patchedFullTopicRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FullTopic} and HTTP response
     */
    updateFullTopicWithHttpInfo(guid, projectsPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedFullTopicRequest'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling updateFullTopic");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateFullTopic");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk
      };
      let queryParams = {
        'img_format': opts['imgFormat']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FullTopic;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/full-topic/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a topic
     * This is not a standard route. You can update topic, viewpoints and comment is a signle call  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.imgFormat All snapshot_data will be returned as url instead of base64
     * @param {module:model/PatchedFullTopicRequest} opts.patchedFullTopicRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FullTopic}
     */
    updateFullTopic(guid, projectsPk, opts) {
      return this.updateFullTopicWithHttpInfo(guid, projectsPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a Pin
     * This is not a standard route. Update some fields of a Pin  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @param {String} viewpointsGuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedPinRequest} opts.patchedPinRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Pin} and HTTP response
     */
    updatePinWithHttpInfo(guid, projectsPk, topicsGuid, viewpointsGuid, opts) {
      opts = opts || {};
      let postBody = opts['patchedPinRequest'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling updatePin");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updatePin");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling updatePin");
      }
      // verify the required parameter 'viewpointsGuid' is set
      if (viewpointsGuid === undefined || viewpointsGuid === null) {
        throw new Error("Missing the required parameter 'viewpointsGuid' when calling updatePin");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid,
        'viewpoints_guid': viewpointsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Pin;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{viewpoints_guid}/pin/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a Pin
     * This is not a standard route. Update some fields of a Pin  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @param {String} viewpointsGuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedPinRequest} opts.patchedPinRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Pin}
     */
    updatePin(guid, projectsPk, topicsGuid, viewpointsGuid, opts) {
      return this.updatePinWithHttpInfo(guid, projectsPk, topicsGuid, viewpointsGuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a topic
     * Update some fields of a topic  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedTopicRequest} opts.patchedTopicRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Topic} and HTTP response
     */
    updateTopicWithHttpInfo(guid, projectsPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedTopicRequest'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling updateTopic");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateTopic");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Topic;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a topic
     * Update some fields of a topic  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedTopicRequest} opts.patchedTopicRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Topic}
     */
    updateTopic(guid, projectsPk, opts) {
      return this.updateTopicWithHttpInfo(guid, projectsPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a Viewpoint
     * This is not a standard route. Update some fields of a Viewpoint  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.imgFormat All snapshot_data will be returned as url instead of base64
     * @param {module:model/PatchedViewpointRequest} opts.patchedViewpointRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Viewpoint} and HTTP response
     */
    updateViewpointWithHttpInfo(guid, projectsPk, topicsGuid, opts) {
      opts = opts || {};
      let postBody = opts['patchedViewpointRequest'];
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling updateViewpoint");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateViewpoint");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling updateViewpoint");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
        'img_format': opts['imgFormat']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Viewpoint;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a Viewpoint
     * This is not a standard route. Update some fields of a Viewpoint  Required scopes: bcf:write
     * @param {String} guid 
     * @param {Number} projectsPk 
     * @param {String} topicsGuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.imgFormat All snapshot_data will be returned as url instead of base64
     * @param {module:model/PatchedViewpointRequest} opts.patchedViewpointRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Viewpoint}
     */
    updateViewpoint(guid, projectsPk, topicsGuid, opts) {
      return this.updateViewpointWithHttpInfo(guid, projectsPk, topicsGuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
