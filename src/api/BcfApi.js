/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BcfProject from '../model/BcfProject';
import Coloring from '../model/Coloring';
import Comment from '../model/Comment';
import Component from '../model/Component';
import Extensions from '../model/Extensions';
import FullTopic from '../model/FullTopic';
import SelfBcfUser from '../model/SelfBcfUser';
import Topic from '../model/Topic';
import Viewpoint from '../model/Viewpoint';
import Visibility from '../model/Visibility';

/**
* Bcf service.
* @module api/BcfApi
* @version v1
*/
export default class BcfApi {

    /**
    * Constructs a new BcfApi. 
    * @alias module:api/BcfApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createComment operation.
     * @callback module:api/BcfApi~createCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a comment
     * Create a comment Required scopes: bcf:write
     * @param {String} projectsPk 
     * @param {String} topicsGuid 
     * @param {module:model/Comment} data 
     * @param {module:api/BcfApi~createCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    createComment(projectsPk, topicsGuid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createComment");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling createComment");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createComment");
      }

      let pathParams = {
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFullTopic operation.
     * @callback module:api/BcfApi~createFullTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FullTopic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Topic with viewpoints and comments
     * This is not a standard route. You can send a topic, viewpoints and comments in a single call Required scopes: bcf:write
     * @param {String} projectsPk 
     * @param {module:model/FullTopic} data 
     * @param {module:api/BcfApi~createFullTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FullTopic}
     */
    createFullTopic(projectsPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createFullTopic");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createFullTopic");
      }

      let pathParams = {
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FullTopic;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/full-topic', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTopic operation.
     * @callback module:api/BcfApi~createTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Topic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a topic
     * Create a topic Required scopes: bcf:write
     * @param {String} projectsPk 
     * @param {module:model/Topic} data 
     * @param {module:api/BcfApi~createTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Topic}
     */
    createTopic(projectsPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createTopic");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createTopic");
      }

      let pathParams = {
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Topic;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createViewpoint operation.
     * @callback module:api/BcfApi~createViewpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Viewpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Viewpoint
     * Create a Viewpoint Required scopes: bcf:write
     * @param {String} projectsPk 
     * @param {String} topicsGuid 
     * @param {module:model/Viewpoint} data 
     * @param {module:api/BcfApi~createViewpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Viewpoint}
     */
    createViewpoint(projectsPk, topicsGuid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling createViewpoint");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling createViewpoint");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createViewpoint");
      }

      let pathParams = {
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Viewpoint;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteComment operation.
     * @callback module:api/BcfApi~deleteCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a comment
     * Delete a comment Required scopes: bcf:write
     * @param {String} guid 
     * @param {String} projectsPk 
     * @param {String} topicsGuid 
     * @param {module:api/BcfApi~deleteCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteComment(guid, projectsPk, topicsGuid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling deleteComment");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteComment");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling deleteComment");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/comments/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTopic operation.
     * @callback module:api/BcfApi~deleteTopicCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a topic
     * Delete a topic Required scopes: bcf:write
     * @param {String} guid 
     * @param {String} projectsPk 
     * @param {module:api/BcfApi~deleteTopicCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTopic(guid, projectsPk, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling deleteTopic");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteTopic");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteViewpoint operation.
     * @callback module:api/BcfApi~deleteViewpointCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Viewpoint
     * This is not a standard route. Delete a Viewpoint Required scopes: bcf:write
     * @param {String} guid 
     * @param {String} projectsPk 
     * @param {String} topicsGuid 
     * @param {module:api/BcfApi~deleteViewpointCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteViewpoint(guid, projectsPk, topicsGuid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling deleteViewpoint");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling deleteViewpoint");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling deleteViewpoint");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadBcfExport operation.
     * @callback module:api/BcfApi~downloadBcfExportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export project's topics in bcf-xml format
     * Export project's topics in bcf-xml format Required scopes: bcf:read
     * @param {Number} id A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {String} opts.topics topic guids to export, comma separated. Default = all
     * @param {String} opts.format topic format to export, comma separated. Default = all
     * @param {module:api/BcfApi~downloadBcfExportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    downloadBcfExport(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadBcfExport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'topics': opts['topics'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateBcfProject operation.
     * @callback module:api/BcfApi~fullUpdateBcfProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BcfProject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields of a BCF project
     * Update all fields of a BCF project Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this project.
     * @param {module:model/BcfProject} data 
     * @param {module:api/BcfApi~fullUpdateBcfProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BcfProject}
     */
    fullUpdateBcfProject(id, data, callback) {
      let postBody = data;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateBcfProject");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateBcfProject");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BcfProject;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateComment operation.
     * @callback module:api/BcfApi~fullUpdateCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields of a comment
     * Update all fields of a comment Required scopes: bcf:write
     * @param {String} guid 
     * @param {String} projectsPk 
     * @param {String} topicsGuid 
     * @param {module:model/Comment} data 
     * @param {module:api/BcfApi~fullUpdateCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    fullUpdateComment(guid, projectsPk, topicsGuid, data, callback) {
      let postBody = data;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling fullUpdateComment");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateComment");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling fullUpdateComment");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateComment");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/comments/{guid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateFullTopic operation.
     * @callback module:api/BcfApi~fullUpdateFullTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FullTopic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields of a topic
     * This is not a standard route. You can update topic, viewpoints and comment is a signle call Required scopes: bcf:write
     * @param {String} guid 
     * @param {String} projectsPk 
     * @param {module:model/FullTopic} data 
     * @param {module:api/BcfApi~fullUpdateFullTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FullTopic}
     */
    fullUpdateFullTopic(guid, projectsPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling fullUpdateFullTopic");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateFullTopic");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateFullTopic");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FullTopic;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/full-topic/{guid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateTopic operation.
     * @callback module:api/BcfApi~fullUpdateTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Topic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields of a topic
     * Update all fields of a topic Required scopes: bcf:write
     * @param {String} guid 
     * @param {String} projectsPk 
     * @param {module:model/Topic} data 
     * @param {module:api/BcfApi~fullUpdateTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Topic}
     */
    fullUpdateTopic(guid, projectsPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling fullUpdateTopic");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateTopic");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateTopic");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Topic;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{guid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateViewpoint operation.
     * @callback module:api/BcfApi~fullUpdateViewpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Viewpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields of a Viewpoint
     * This is not a standard route. Update all fields of a Viewpoint Required scopes: bcf:write
     * @param {String} guid 
     * @param {String} projectsPk 
     * @param {String} topicsGuid 
     * @param {module:model/Viewpoint} data 
     * @param {module:api/BcfApi~fullUpdateViewpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Viewpoint}
     */
    fullUpdateViewpoint(guid, projectsPk, topicsGuid, data, callback) {
      let postBody = data;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling fullUpdateViewpoint");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling fullUpdateViewpoint");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling fullUpdateViewpoint");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateViewpoint");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Viewpoint;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBcfProject operation.
     * @callback module:api/BcfApi~getBcfProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BcfProject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a BCF project
     * Retrieve a BCF project Required scopes: bcf:read
     * @param {Number} id A unique integer value identifying this project.
     * @param {module:api/BcfApi~getBcfProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BcfProject}
     */
    getBcfProject(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBcfProject");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BcfProject;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBcfProjects operation.
     * @callback module:api/BcfApi~getBcfProjectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BcfProject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all BCF projects
     * Retrieve all BCF projects Required scopes: bcf:read
     * @param {module:api/BcfApi~getBcfProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BcfProject>}
     */
    getBcfProjects(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BcfProject];
      return this.apiClient.callApi(
        '/bcf/2.1/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getColorings operation.
     * @callback module:api/BcfApi~getColoringsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Coloring>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all colorings of a viewpoint
     * Retrieve all colorings of a viewpoint Required scopes: bcf:read
     * @param {String} guid 
     * @param {String} projectsPk 
     * @param {String} topicsGuid 
     * @param {module:api/BcfApi~getColoringsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Coloring>}
     */
    getColorings(guid, projectsPk, topicsGuid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling getColorings");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getColorings");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling getColorings");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Coloring];
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}/coloring', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getComment operation.
     * @callback module:api/BcfApi~getCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a comment
     * Retrieve a comment Required scopes: bcf:read
     * @param {String} guid 
     * @param {String} projectsPk 
     * @param {String} topicsGuid 
     * @param {module:api/BcfApi~getCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    getComment(guid, projectsPk, topicsGuid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling getComment");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getComment");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling getComment");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/comments/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getComments operation.
     * @callback module:api/BcfApi~getCommentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Comment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all comments
     * Retrieve all comments Required scopes: bcf:read
     * @param {String} projectsPk 
     * @param {String} topicsGuid 
     * @param {module:api/BcfApi~getCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Comment>}
     */
    getComments(projectsPk, topicsGuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getComments");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling getComments");
      }

      let pathParams = {
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Comment];
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExtensions operation.
     * @callback module:api/BcfApi~getExtensionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Extensions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve project extensions
     * Retrieve project extensions
     * @param {String} projectsPk 
     * @param {module:api/BcfApi~getExtensionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Extensions}
     */
    getExtensions(projectsPk, callback) {
      let postBody = null;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getExtensions");
      }

      let pathParams = {
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Extensions;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/extensions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFullTopic operation.
     * @callback module:api/BcfApi~getFullTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FullTopic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a full topic
     * This is not a standard route. It responds with a topic, its viewpoints and its comments Required scopes: bcf:read
     * @param {String} guid 
     * @param {String} projectsPk 
     * @param {module:api/BcfApi~getFullTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FullTopic}
     */
    getFullTopic(guid, projectsPk, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling getFullTopic");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getFullTopic");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FullTopic;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/full-topic/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFullTopics operation.
     * @callback module:api/BcfApi~getFullTopicsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FullTopic>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all full topics
     * This is not a standard route. It responds with all topics, their viewpoints and their comments Required scopes: bcf:read
     * @param {String} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifcs Filter the returned list by ifcs
     * @param {String} opts.format Filter the returned list by format
     * @param {module:api/BcfApi~getFullTopicsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FullTopic>}
     */
    getFullTopics(projectsPk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getFullTopics");
      }

      let pathParams = {
        'projects_pk': projectsPk
      };
      let queryParams = {
        'ifcs': opts['ifcs'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FullTopic];
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/full-topic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelections operation.
     * @callback module:api/BcfApi~getSelectionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Component>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all selections of a viewpoint
     * Retrieve all selections of a viewpoint Required scopes: bcf:read
     * @param {String} guid 
     * @param {String} projectsPk 
     * @param {String} topicsGuid 
     * @param {module:api/BcfApi~getSelectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Component>}
     */
    getSelections(guid, projectsPk, topicsGuid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling getSelections");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getSelections");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling getSelections");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Component];
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}/selection', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSnapshot operation.
     * @callback module:api/BcfApi~getSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the viewpoint' snapshot
     * Retrieve the viewpoint' snapshot Required scopes: bcf:read
     * @param {String} guid 
     * @param {String} projectsPk 
     * @param {String} topicsGuid 
     * @param {module:api/BcfApi~getSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getSnapshot(guid, projectsPk, topicsGuid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling getSnapshot");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getSnapshot");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling getSnapshot");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}/snapshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTopic operation.
     * @callback module:api/BcfApi~getTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Topic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a topic
     * Retrieve a topic Required scopes: bcf:read
     * @param {String} guid 
     * @param {String} projectsPk 
     * @param {module:api/BcfApi~getTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Topic}
     */
    getTopic(guid, projectsPk, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling getTopic");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getTopic");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Topic;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTopicViewpoints operation.
     * @callback module:api/BcfApi~getTopicViewpointsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Viewpoint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all viewpoints attached to the topic
     * This is not a standard route. It returns all viewpoints of the topic that are not attached to a comment. Required scopes: bcf:read
     * @param {String} projectsPk 
     * @param {String} topicsGuid 
     * @param {module:api/BcfApi~getTopicViewpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Viewpoint>}
     */
    getTopicViewpoints(projectsPk, topicsGuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getTopicViewpoints");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling getTopicViewpoints");
      }

      let pathParams = {
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Viewpoint];
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/topic-viewpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTopics operation.
     * @callback module:api/BcfApi~getTopicsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Topic>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all topics
     * Retrieve all topics Required scopes: bcf:read
     * @param {String} projectsPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifcs Filter the returned list by ifcs
     * @param {String} opts.format Filter the returned list by format
     * @param {module:api/BcfApi~getTopicsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Topic>}
     */
    getTopics(projectsPk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getTopics");
      }

      let pathParams = {
        'projects_pk': projectsPk
      };
      let queryParams = {
        'ifcs': opts['ifcs'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Topic];
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/BcfApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SelfBcfUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current user info
     * Get current user info Required scopes: bcf:read
     * @param {module:api/BcfApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SelfBcfUser}
     */
    getUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SelfBcfUser;
      return this.apiClient.callApi(
        '/bcf/2.1/current-user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getViewpoint operation.
     * @callback module:api/BcfApi~getViewpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Viewpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Viewpoint
     * Retrieve a Viewpoint Required scopes: bcf:read
     * @param {String} guid 
     * @param {String} projectsPk 
     * @param {String} topicsGuid 
     * @param {module:api/BcfApi~getViewpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Viewpoint}
     */
    getViewpoint(guid, projectsPk, topicsGuid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling getViewpoint");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getViewpoint");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling getViewpoint");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Viewpoint;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getViewpoints operation.
     * @callback module:api/BcfApi~getViewpointsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Viewpoint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all Viewpoints of a topic
     * Retrieve all Viewpoints of a topic Required scopes: bcf:read
     * @param {String} projectsPk 
     * @param {String} topicsGuid 
     * @param {module:api/BcfApi~getViewpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Viewpoint>}
     */
    getViewpoints(projectsPk, topicsGuid, callback) {
      let postBody = null;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getViewpoints");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling getViewpoints");
      }

      let pathParams = {
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Viewpoint];
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVisibilities operation.
     * @callback module:api/BcfApi~getVisibilitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Visibility} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all visibilities of a viewpoint
     * Retrieve all visibilities of a viewpoint Required scopes: bcf:read
     * @param {String} guid 
     * @param {String} projectsPk 
     * @param {String} topicsGuid 
     * @param {module:api/BcfApi~getVisibilitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Visibility}
     */
    getVisibilities(guid, projectsPk, topicsGuid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling getVisibilities");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling getVisibilities");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling getVisibilities");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Visibility;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}/visibility', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBcfProject operation.
     * @callback module:api/BcfApi~updateBcfProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BcfProject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update some fields of a BCF project
     * Update some fields of a BCF project Required scopes: bcf:write
     * @param {Number} id A unique integer value identifying this project.
     * @param {module:model/BcfProject} data 
     * @param {module:api/BcfApi~updateBcfProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BcfProject}
     */
    updateBcfProject(id, data, callback) {
      let postBody = data;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBcfProject");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateBcfProject");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BcfProject;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateComment operation.
     * @callback module:api/BcfApi~updateCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update some fields of a comment
     * Update some fields of a comment Required scopes: bcf:write
     * @param {String} guid 
     * @param {String} projectsPk 
     * @param {String} topicsGuid 
     * @param {module:model/Comment} data 
     * @param {module:api/BcfApi~updateCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    updateComment(guid, projectsPk, topicsGuid, data, callback) {
      let postBody = data;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling updateComment");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateComment");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling updateComment");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateComment");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/comments/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExtensions operation.
     * @callback module:api/BcfApi~updateExtensionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Extensions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project extensions
     * Update project extensions
     * @param {String} projectsPk 
     * @param {module:model/Extensions} data 
     * @param {module:api/BcfApi~updateExtensionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Extensions}
     */
    updateExtensions(projectsPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateExtensions");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateExtensions");
      }

      let pathParams = {
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Extensions;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/extensions', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFullTopic operation.
     * @callback module:api/BcfApi~updateFullTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FullTopic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update some fields of a topic
     * This is not a standard route. You can update topic, viewpoints and comment is a signle call Required scopes: bcf:write
     * @param {String} guid 
     * @param {String} projectsPk 
     * @param {module:model/FullTopic} data 
     * @param {module:api/BcfApi~updateFullTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FullTopic}
     */
    updateFullTopic(guid, projectsPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling updateFullTopic");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateFullTopic");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateFullTopic");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FullTopic;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/full-topic/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTopic operation.
     * @callback module:api/BcfApi~updateTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Topic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update some fields of a topic
     * Update some fields of a topic Required scopes: bcf:write
     * @param {String} guid 
     * @param {String} projectsPk 
     * @param {module:model/Topic} data 
     * @param {module:api/BcfApi~updateTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Topic}
     */
    updateTopic(guid, projectsPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling updateTopic");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateTopic");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateTopic");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Topic;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateViewpoint operation.
     * @callback module:api/BcfApi~updateViewpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Viewpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update some fields of a Viewpoint
     * This is not a standard route. Update some fields of a Viewpoint Required scopes: bcf:write
     * @param {String} guid 
     * @param {String} projectsPk 
     * @param {String} topicsGuid 
     * @param {module:model/Viewpoint} data 
     * @param {module:api/BcfApi~updateViewpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Viewpoint}
     */
    updateViewpoint(guid, projectsPk, topicsGuid, data, callback) {
      let postBody = data;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling updateViewpoint");
      }
      // verify the required parameter 'projectsPk' is set
      if (projectsPk === undefined || projectsPk === null) {
        throw new Error("Missing the required parameter 'projectsPk' when calling updateViewpoint");
      }
      // verify the required parameter 'topicsGuid' is set
      if (topicsGuid === undefined || topicsGuid === null) {
        throw new Error("Missing the required parameter 'topicsGuid' when calling updateViewpoint");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateViewpoint");
      }

      let pathParams = {
        'guid': guid,
        'projects_pk': projectsPk,
        'topics_guid': topicsGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Viewpoint;
      return this.apiClient.callApi(
        '/bcf/2.1/projects/{projects_pk}/topics/{topics_guid}/viewpoints/{guid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
