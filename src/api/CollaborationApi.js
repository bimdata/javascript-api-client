/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CheckProjectAccess from '../model/CheckProjectAccess';
import Classification from '../model/Classification';
import ClassificationRequest from '../model/ClassificationRequest';
import Cloud from '../model/Cloud';
import CloudInvitation from '../model/CloudInvitation';
import CloudInvitationRequest from '../model/CloudInvitationRequest';
import CloudRequest from '../model/CloudRequest';
import Document from '../model/Document';
import DocumentPreviewFile from '../model/DocumentPreviewFile';
import Folder from '../model/Folder';
import FolderTree from '../model/FolderTree';
import FolderUserProject from '../model/FolderUserProject';
import FolderWithoutChildren from '../model/FolderWithoutChildren';
import FolderWithoutChildrenRequest from '../model/FolderWithoutChildrenRequest';
import Group from '../model/Group';
import GroupFolder from '../model/GroupFolder';
import GroupRequest from '../model/GroupRequest';
import ImportGroupRequest from '../model/ImportGroupRequest';
import LogEntry from '../model/LogEntry';
import PatchedClassificationRequest from '../model/PatchedClassificationRequest';
import PatchedCloudRequest from '../model/PatchedCloudRequest';
import PatchedDocumentRequest from '../model/PatchedDocumentRequest';
import PatchedFolderWithoutChildrenRequest from '../model/PatchedFolderWithoutChildrenRequest';
import PatchedGroupFolderRequest from '../model/PatchedGroupFolderRequest';
import PatchedGroupRequest from '../model/PatchedGroupRequest';
import PatchedProjectRequest from '../model/PatchedProjectRequest';
import PatchedTagRequest from '../model/PatchedTagRequest';
import PatchedUserCloudUpdateRequest from '../model/PatchedUserCloudUpdateRequest';
import PatchedUserProjectUpdateRequest from '../model/PatchedUserProjectUpdateRequest';
import PatchedVisaCommentRequest from '../model/PatchedVisaCommentRequest';
import PatchedVisaRequest from '../model/PatchedVisaRequest';
import PatchedVisaValidationRequest from '../model/PatchedVisaValidationRequest';
import Project from '../model/Project';
import ProjectAccessToken from '../model/ProjectAccessToken';
import ProjectAccessTokenRequest from '../model/ProjectAccessTokenRequest';
import ProjectImportRequest from '../model/ProjectImportRequest';
import ProjectInvitation from '../model/ProjectInvitation';
import ProjectInvitationRequest from '../model/ProjectInvitationRequest';
import ProjectRequest from '../model/ProjectRequest';
import ProjectSize from '../model/ProjectSize';
import SelfUser from '../model/SelfUser';
import Size from '../model/Size';
import Tag from '../model/Tag';
import TagIdRequest from '../model/TagIdRequest';
import TagRequest from '../model/TagRequest';
import User from '../model/User';
import UserInvitation from '../model/UserInvitation';
import UserProject from '../model/UserProject';
import UserProjectIdRequest from '../model/UserProjectIdRequest';
import Visa from '../model/Visa';
import VisaAttachment from '../model/VisaAttachment';
import VisaComment from '../model/VisaComment';
import VisaCommentRequest from '../model/VisaCommentRequest';
import VisaRequest from '../model/VisaRequest';
import VisaValidation from '../model/VisaValidation';
import VisaValidationRequest from '../model/VisaValidationRequest';
import VisaWithDocument from '../model/VisaWithDocument';
import WriteFolderRequest from '../model/WriteFolderRequest';

/**
* Collaboration service.
* @module api/CollaborationApi
* @version 0.0.0
*/
export default class CollaborationApi {

    /**
    * Constructs a new CollaborationApi. 
    * @alias module:api/CollaborationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Accept an invitation
     * The user is added to the cloud and projet.  Required scopes: user:write
     * @param {Number} id A unique integer value identifying this invitation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    acceptUserInvitationWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling acceptUserInvitation");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/invitations/{id}/accept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Accept an invitation
     * The user is added to the cloud and projet.  Required scopes: user:write
     * @param {Number} id A unique integer value identifying this invitation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    acceptUserInvitation(id) {
      return this.acceptUserInvitationWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Accept a validation
     * Accept a validation  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa validation.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @param {Object} opts Optional parameters
     * @param {File} opts.attachment 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VisaAttachment} and HTTP response
     */
    acceptValidationWithHttpInfo(cloudPk, documentPk, id, projectPk, visaPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling acceptValidation");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling acceptValidation");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling acceptValidation");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling acceptValidation");
      }
      // verify the required parameter 'visaPk' is set
      if (visaPk === undefined || visaPk === null) {
        throw new Error("Missing the required parameter 'visaPk' when calling acceptValidation");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'id': id,
        'project_pk': projectPk,
        'visa_pk': visaPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'attachment': opts['attachment']
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = VisaAttachment;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}/accept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Accept a validation
     * Accept a validation  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa validation.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @param {Object} opts Optional parameters
     * @param {File} opts.attachment 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VisaAttachment}
     */
    acceptValidation(cloudPk, documentPk, id, projectPk, visaPk, opts) {
      return this.acceptValidationWithHttpInfo(cloudPk, documentPk, id, projectPk, visaPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a tag to a document
     * Add a tag to a document  Required scopes: document:write
     * @param {Number} cloudPk 
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} projectPk 
     * @param {module:model/TagIdRequest} tagIdRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Document} and HTTP response
     */
    addDocumentTagWithHttpInfo(cloudPk, documentPk, projectPk, tagIdRequest) {
      let postBody = tagIdRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling addDocumentTag");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling addDocumentTag");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling addDocumentTag");
      }
      // verify the required parameter 'tagIdRequest' is set
      if (tagIdRequest === undefined || tagIdRequest === null) {
        throw new Error("Missing the required parameter 'tagIdRequest' when calling addDocumentTag");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/tag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add a tag to a document
     * Add a tag to a document  Required scopes: document:write
     * @param {Number} cloudPk 
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} projectPk 
     * @param {module:model/TagIdRequest} tagIdRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Document}
     */
    addDocumentTag(cloudPk, documentPk, projectPk, tagIdRequest) {
      return this.addDocumentTagWithHttpInfo(cloudPk, documentPk, projectPk, tagIdRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a user to a group
     * Add a userproject to a group. Must be an admin of the project  Required scopes: org:manage
     * @param {Number} cloudPk 
     * @param {Number} groupPk A unique integer value identifying this group.
     * @param {Number} projectPk 
     * @param {module:model/UserProjectIdRequest} userProjectIdRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserProject} and HTTP response
     */
    addGroupMemberWithHttpInfo(cloudPk, groupPk, projectPk, userProjectIdRequest) {
      let postBody = userProjectIdRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling addGroupMember");
      }
      // verify the required parameter 'groupPk' is set
      if (groupPk === undefined || groupPk === null) {
        throw new Error("Missing the required parameter 'groupPk' when calling addGroupMember");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling addGroupMember");
      }
      // verify the required parameter 'userProjectIdRequest' is set
      if (userProjectIdRequest === undefined || userProjectIdRequest === null) {
        throw new Error("Missing the required parameter 'userProjectIdRequest' when calling addGroupMember");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'group_pk': groupPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UserProject;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/group/{group_pk}/member', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add a user to a group
     * Add a userproject to a group. Must be an admin of the project  Required scopes: org:manage
     * @param {Number} cloudPk 
     * @param {Number} groupPk A unique integer value identifying this group.
     * @param {Number} projectPk 
     * @param {module:model/UserProjectIdRequest} userProjectIdRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserProject}
     */
    addGroupMember(cloudPk, groupPk, projectPk, userProjectIdRequest) {
      return this.addGroupMemberWithHttpInfo(cloudPk, groupPk, projectPk, userProjectIdRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cancel a pending invitation
     * Cancel a pending invitation  Required scopes: org:manage
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this invitation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    cancelCloudUserInvitationWithHttpInfo(cloudPk, id) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling cancelCloudUserInvitation");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelCloudUserInvitation");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/invitation/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancel a pending invitation
     * Cancel a pending invitation  Required scopes: org:manage
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this invitation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    cancelCloudUserInvitation(cloudPk, id) {
      return this.cancelCloudUserInvitationWithHttpInfo(cloudPk, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cancel a pending invitation
     * Cancel a pending invitation  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this invitation.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    cancelProjectUserInvitationWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling cancelProjectUserInvitation");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelProjectUserInvitation");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling cancelProjectUserInvitation");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/invitation/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancel a pending invitation
     * Cancel a pending invitation  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this invitation.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    cancelProjectUserInvitation(cloudPk, id, projectPk) {
      return this.cancelProjectUserInvitationWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Check app access from cloud
     * Return code 200 if the cloud has access to the marketplace app
     * @param {Number} id A unique integer value identifying this cloud.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    checkAccessWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling checkAccess");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{id}/check-access', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Check app access from cloud
     * Return code 200 if the cloud has access to the marketplace app
     * @param {Number} id A unique integer value identifying this cloud.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    checkAccess(id) {
      return this.checkAccessWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Check if the current token has access to the requested project
     *                  The response gives you details about the right of the user or app, the scopes of the token and the usable scopes (scopes filtered by the right of the user).                 It works with user tokens, app tokens and ProjectAccessToken             
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckProjectAccess} and HTTP response
     */
    checkProjectAccessWithHttpInfo(cloudPk, id) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling checkProjectAccess");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling checkProjectAccess");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckProjectAccess;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{id}/check-access', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Check if the current token has access to the requested project
     *                  The response gives you details about the right of the user or app, the scopes of the token and the usable scopes (scopes filtered by the right of the user).                 It works with user tokens, app tokens and ProjectAccessToken             
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckProjectAccess}
     */
    checkProjectAccess(cloudPk, id) {
      return this.checkProjectAccessWithHttpInfo(cloudPk, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Close a visa of a document
     * Close a visa of a document  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    closeVisaWithHttpInfo(cloudPk, documentPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling closeVisa");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling closeVisa");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling closeVisa");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling closeVisa");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}/close', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Close a visa of a document
     * Close a visa of a document  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    closeVisa(cloudPk, documentPk, id, projectPk) {
      return this.closeVisaWithHttpInfo(cloudPk, documentPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a classification
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  If created classification already exists, it will not be duplicated and the previous one will be returned. You also can add a 'classification' filter on this endpoint. By ex: /classification?name='untec'. The name is case sensitive  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/ClassificationRequest>} classificationRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Classification>} and HTTP response
     */
    createClassificationWithHttpInfo(cloudPk, projectPk, classificationRequest) {
      let postBody = classificationRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createClassification");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createClassification");
      }
      // verify the required parameter 'classificationRequest' is set
      if (classificationRequest === undefined || classificationRequest === null) {
        throw new Error("Missing the required parameter 'classificationRequest' when calling createClassification");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [Classification];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/classification', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a classification
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  If created classification already exists, it will not be duplicated and the previous one will be returned. You also can add a 'classification' filter on this endpoint. By ex: /classification?name='untec'. The name is case sensitive  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Array.<module:model/ClassificationRequest>} classificationRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Classification>}
     */
    createClassification(cloudPk, projectPk, classificationRequest) {
      return this.createClassificationWithHttpInfo(cloudPk, projectPk, classificationRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a cloud
     * Create a cloud  Required scopes: cloud:manage
     * @param {module:model/CloudRequest} cloudRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Cloud} and HTTP response
     */
    createCloudWithHttpInfo(cloudRequest) {
      let postBody = cloudRequest;
      // verify the required parameter 'cloudRequest' is set
      if (cloudRequest === undefined || cloudRequest === null) {
        throw new Error("Missing the required parameter 'cloudRequest' when calling createCloud");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Cloud;
      return this.apiClient.callApi(
        '/cloud', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a cloud
     * Create a cloud  Required scopes: cloud:manage
     * @param {module:model/CloudRequest} cloudRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Cloud}
     */
    createCloud(cloudRequest) {
      return this.createCloudWithHttpInfo(cloudRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a complete DMS tree
     * Create a DMS structure of folders  Required scopes: org:manage
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this project.
     * @param {Array.<module:model/WriteFolderRequest>} writeFolderRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Folder} and HTTP response
     */
    createDMSTreeWithHttpInfo(cloudPk, id, writeFolderRequest) {
      let postBody = writeFolderRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createDMSTree");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createDMSTree");
      }
      // verify the required parameter 'writeFolderRequest' is set
      if (writeFolderRequest === undefined || writeFolderRequest === null) {
        throw new Error("Missing the required parameter 'writeFolderRequest' when calling createDMSTree");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Folder;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{id}/dms-tree', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a complete DMS tree
     * Create a DMS structure of folders  Required scopes: org:manage
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this project.
     * @param {Array.<module:model/WriteFolderRequest>} writeFolderRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Folder}
     */
    createDMSTree(cloudPk, id, writeFolderRequest) {
      return this.createDMSTreeWithHttpInfo(cloudPk, id, writeFolderRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Demo project in a cloud
     * Create a project name 'Demo' with an already processed model in it  Required scopes: cloud:manage
     * @param {Number} id A unique integer value identifying this cloud.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
     */
    createDemoWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createDemo");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/cloud/{id}/create-demo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Demo project in a cloud
     * Create a project name 'Demo' with an already processed model in it  Required scopes: cloud:manage
     * @param {Number} id A unique integer value identifying this cloud.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
     */
    createDemo(id) {
      return this.createDemoWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a document
     * Create a document. If the document is one of {'DXF', 'IFC', 'DWG', 'OBJ', 'POINT_CLOUD', 'GLTF'}, a model will be created and attached to this document  Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} name Shown name of the file
     * @param {File} file 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.parentId 
     * @param {String} opts.fileName Full name of the file
     * @param {String} opts.description Description of the file
     * @param {module:model/String} opts.modelSource Define the model.source field if the upload is a Model (IFC, PDF, DWG...)  * `UPLOAD` - UPLOAD * `SPLIT` - SPLIT * `MERGE` - MERGE * `EXPORT` - EXPORT * `OPTIMIZED` - OPTIMIZED
     * @param {module:model/String} opts.ifcSource DEPRECATED: Use 'model_source' instead. Define the model.source field if the upload is a Model (IFC, PDF, DWG...)  * `UPLOAD` - UPLOAD * `SPLIT` - SPLIT * `MERGE` - MERGE * `EXPORT` - EXPORT * `OPTIMIZED` - OPTIMIZED
     * @param {Number} opts.successorOf Old document version to replace. Only for create
     * @param {module:model/String} opts.processHint Provide a info about the document in order to customize the way it is processed.  * `PHOTOSPHERE` - PHOTOSPHERE
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Document} and HTTP response
     */
    createDocumentWithHttpInfo(cloudPk, projectPk, name, file, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createDocument");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createDocument");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createDocument");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling createDocument");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'parent_id': opts['parentId'],
        'name': name,
        'file_name': opts['fileName'],
        'description': opts['description'],
        'file': file,
        'model_source': opts['modelSource'],
        'ifc_source': opts['ifcSource'],
        'successor_of': opts['successorOf'],
        'process_hint': opts['processHint']
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a document
     * Create a document. If the document is one of {'DXF', 'IFC', 'DWG', 'OBJ', 'POINT_CLOUD', 'GLTF'}, a model will be created and attached to this document  Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} name Shown name of the file
     * @param {File} file 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.parentId 
     * @param {String} opts.fileName Full name of the file
     * @param {String} opts.description Description of the file
     * @param {module:model/String} opts.modelSource Define the model.source field if the upload is a Model (IFC, PDF, DWG...)  * `UPLOAD` - UPLOAD * `SPLIT` - SPLIT * `MERGE` - MERGE * `EXPORT` - EXPORT * `OPTIMIZED` - OPTIMIZED
     * @param {module:model/String} opts.ifcSource DEPRECATED: Use 'model_source' instead. Define the model.source field if the upload is a Model (IFC, PDF, DWG...)  * `UPLOAD` - UPLOAD * `SPLIT` - SPLIT * `MERGE` - MERGE * `EXPORT` - EXPORT * `OPTIMIZED` - OPTIMIZED
     * @param {Number} opts.successorOf Old document version to replace. Only for create
     * @param {module:model/String} opts.processHint Provide a info about the document in order to customize the way it is processed.  * `PHOTOSPHERE` - PHOTOSPHERE
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Document}
     */
    createDocument(cloudPk, projectPk, name, file, opts) {
      return this.createDocumentWithHttpInfo(cloudPk, projectPk, name, file, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a folder
     * If the created folder have no parent, it will be put as a child of the default root folder of the project  Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {module:model/FolderWithoutChildrenRequest} folderWithoutChildrenRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FolderWithoutChildren} and HTTP response
     */
    createFolderWithHttpInfo(cloudPk, projectPk, folderWithoutChildrenRequest) {
      let postBody = folderWithoutChildrenRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createFolder");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createFolder");
      }
      // verify the required parameter 'folderWithoutChildrenRequest' is set
      if (folderWithoutChildrenRequest === undefined || folderWithoutChildrenRequest === null) {
        throw new Error("Missing the required parameter 'folderWithoutChildrenRequest' when calling createFolder");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FolderWithoutChildren;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/folder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a folder
     * If the created folder have no parent, it will be put as a child of the default root folder of the project  Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {module:model/FolderWithoutChildrenRequest} folderWithoutChildrenRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FolderWithoutChildren}
     */
    createFolder(cloudPk, projectPk, folderWithoutChildrenRequest) {
      return this.createFolderWithHttpInfo(cloudPk, projectPk, folderWithoutChildrenRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a group
     * Create a group. Must be an admin of the project  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {module:model/GroupRequest} groupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Group} and HTTP response
     */
    createManageGroupWithHttpInfo(cloudPk, projectPk, groupRequest) {
      let postBody = groupRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createManageGroup");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createManageGroup");
      }
      // verify the required parameter 'groupRequest' is set
      if (groupRequest === undefined || groupRequest === null) {
        throw new Error("Missing the required parameter 'groupRequest' when calling createManageGroup");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a group
     * Create a group. Must be an admin of the project  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {module:model/GroupRequest} groupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Group}
     */
    createManageGroup(cloudPk, projectPk, groupRequest) {
      return this.createManageGroupWithHttpInfo(cloudPk, projectPk, groupRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a project
     * Create a project  Required scopes: org:manage
     * @param {Number} cloudPk 
     * @param {module:model/ProjectRequest} projectRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
     */
    createProjectWithHttpInfo(cloudPk, projectRequest) {
      let postBody = projectRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createProject");
      }
      // verify the required parameter 'projectRequest' is set
      if (projectRequest === undefined || projectRequest === null) {
        throw new Error("Missing the required parameter 'projectRequest' when calling createProject");
      }

      let pathParams = {
        'cloud_pk': cloudPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a project
     * Create a project  Required scopes: org:manage
     * @param {Number} cloudPk 
     * @param {module:model/ProjectRequest} projectRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
     */
    createProject(cloudPk, projectRequest) {
      return this.createProjectWithHttpInfo(cloudPk, projectRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a token for this project
     * Tokens are valid 1 day by default  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {module:model/ProjectAccessTokenRequest} projectAccessTokenRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProjectAccessToken} and HTTP response
     */
    createProjectAccessTokenWithHttpInfo(cloudPk, projectPk, projectAccessTokenRequest) {
      let postBody = projectAccessTokenRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createProjectAccessToken");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createProjectAccessToken");
      }
      // verify the required parameter 'projectAccessTokenRequest' is set
      if (projectAccessTokenRequest === undefined || projectAccessTokenRequest === null) {
        throw new Error("Missing the required parameter 'projectAccessTokenRequest' when calling createProjectAccessToken");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ProjectAccessToken;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/access-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a token for this project
     * Tokens are valid 1 day by default  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {module:model/ProjectAccessTokenRequest} projectAccessTokenRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProjectAccessToken}
     */
    createProjectAccessToken(cloudPk, projectPk, projectAccessTokenRequest) {
      return this.createProjectAccessTokenWithHttpInfo(cloudPk, projectPk, projectAccessTokenRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a tag
     * Create a tag  Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {module:model/TagRequest} tagRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Tag} and HTTP response
     */
    createTagWithHttpInfo(cloudPk, projectPk, tagRequest) {
      let postBody = tagRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createTag");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createTag");
      }
      // verify the required parameter 'tagRequest' is set
      if (tagRequest === undefined || tagRequest === null) {
        throw new Error("Missing the required parameter 'tagRequest' when calling createTag");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/tag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a tag
     * Create a tag  Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {module:model/TagRequest} tagRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Tag}
     */
    createTag(cloudPk, projectPk, tagRequest) {
      return this.createTagWithHttpInfo(cloudPk, projectPk, tagRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a validation to a visa
     * Add a validation to a visa  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @param {module:model/VisaValidationRequest} visaValidationRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VisaValidation} and HTTP response
     */
    createValidationWithHttpInfo(cloudPk, documentPk, projectPk, visaPk, visaValidationRequest) {
      let postBody = visaValidationRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createValidation");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling createValidation");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createValidation");
      }
      // verify the required parameter 'visaPk' is set
      if (visaPk === undefined || visaPk === null) {
        throw new Error("Missing the required parameter 'visaPk' when calling createValidation");
      }
      // verify the required parameter 'visaValidationRequest' is set
      if (visaValidationRequest === undefined || visaValidationRequest === null) {
        throw new Error("Missing the required parameter 'visaValidationRequest' when calling createValidation");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'project_pk': projectPk,
        'visa_pk': visaPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = VisaValidation;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add a validation to a visa
     * Add a validation to a visa  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @param {module:model/VisaValidationRequest} visaValidationRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VisaValidation}
     */
    createValidation(cloudPk, documentPk, projectPk, visaPk, visaValidationRequest) {
      return this.createValidationWithHttpInfo(cloudPk, documentPk, projectPk, visaPk, visaValidationRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a visa
     * Create a visa  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/VisaRequest} opts.visaRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Visa} and HTTP response
     */
    createVisaWithHttpInfo(cloudPk, documentPk, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['visaRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createVisa");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling createVisa");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createVisa");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Visa;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a visa
     * Create a visa  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/VisaRequest} opts.visaRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Visa}
     */
    createVisa(cloudPk, documentPk, projectPk, opts) {
      return this.createVisaWithHttpInfo(cloudPk, documentPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a comment
     * Add a comment  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @param {Object} opts Optional parameters
     * @param {module:model/VisaCommentRequest} opts.visaCommentRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VisaComment} and HTTP response
     */
    createVisaCommentWithHttpInfo(cloudPk, documentPk, projectPk, visaPk, opts) {
      opts = opts || {};
      let postBody = opts['visaCommentRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createVisaComment");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling createVisaComment");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createVisaComment");
      }
      // verify the required parameter 'visaPk' is set
      if (visaPk === undefined || visaPk === null) {
        throw new Error("Missing the required parameter 'visaPk' when calling createVisaComment");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'project_pk': projectPk,
        'visa_pk': visaPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = VisaComment;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add a comment
     * Add a comment  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @param {Object} opts Optional parameters
     * @param {module:model/VisaCommentRequest} opts.visaCommentRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VisaComment}
     */
    createVisaComment(cloudPk, documentPk, projectPk, visaPk, opts) {
      return this.createVisaCommentWithHttpInfo(cloudPk, documentPk, projectPk, visaPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete all document history
     * Delete the document from the head version and all its history  Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAllDocumentHistoryWithHttpInfo(cloudPk, documentPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteAllDocumentHistory");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling deleteAllDocumentHistory");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteAllDocumentHistory");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/history/delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete all document history
     * Delete the document from the head version and all its history  Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAllDocumentHistory(cloudPk, documentPk, projectPk) {
      return this.deleteAllDocumentHistoryWithHttpInfo(cloudPk, documentPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a classification
     * All elements having this classification will lose it  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this classification.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteClassificationWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteClassification");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteClassification");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteClassification");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/classification/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a classification
     * All elements having this classification will lose it  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this classification.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteClassification(cloudPk, id, projectPk) {
      return this.deleteClassificationWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a cloud
     * Delete a cloud  Required scopes: cloud:manage
     * @param {Number} id A unique integer value identifying this cloud.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCloudWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCloud");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a cloud
     * Delete a cloud  Required scopes: cloud:manage
     * @param {Number} id A unique integer value identifying this cloud.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCloud(id) {
      return this.deleteCloudWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a user from a cloud
     * The user will also be removed from all the projects of the cloud  Required scopes: cloud:manage
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this fos user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCloudUserWithHttpInfo(cloudPk, id) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteCloudUser");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCloudUser");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/user/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a user from a cloud
     * The user will also be removed from all the projects of the cloud  Required scopes: cloud:manage
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this fos user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCloudUser(cloudPk, id) {
      return this.deleteCloudUserWithHttpInfo(cloudPk, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete the document
     * Delete the document  Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteDocumentWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteDocument");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDocument");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteDocument");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete the document
     * Delete the document  Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteDocument(cloudPk, id, projectPk) {
      return this.deleteDocumentWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a tag from a document
     * Delete a tag from a document  Required scopes: document:write
     * @param {Number} cloudPk 
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this document.
     * @param {Number} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteDocumentTagWithHttpInfo(cloudPk, documentPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteDocumentTag");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling deleteDocumentTag");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDocumentTag");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteDocumentTag");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/tag/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a tag from a document
     * Delete a tag from a document  Required scopes: document:write
     * @param {Number} cloudPk 
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this document.
     * @param {Number} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteDocumentTag(cloudPk, documentPk, id, projectPk) {
      return this.deleteDocumentTagWithHttpInfo(cloudPk, documentPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a folder
     * All files and subfolders will be deleted too. If folder is a project's root folder, only children are deleted  Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this folder.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteFolderWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteFolder");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFolder");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteFolder");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/folder/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a folder
     * All files and subfolders will be deleted too. If folder is a project's root folder, only children are deleted  Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this folder.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteFolder(cloudPk, id, projectPk) {
      return this.deleteFolderWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a user from a group
     * Delete a userproject from a group. Id is the userproject_id. Must be an admin of the project.  Required scopes: org:manage
     * @param {Number} cloudPk 
     * @param {Number} groupPk A unique integer value identifying this group.
     * @param {Number} id A unique integer value identifying this group.
     * @param {Number} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteGroupMemberWithHttpInfo(cloudPk, groupPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteGroupMember");
      }
      // verify the required parameter 'groupPk' is set
      if (groupPk === undefined || groupPk === null) {
        throw new Error("Missing the required parameter 'groupPk' when calling deleteGroupMember");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteGroupMember");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteGroupMember");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'group_pk': groupPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/group/{group_pk}/member/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a user from a group
     * Delete a userproject from a group. Id is the userproject_id. Must be an admin of the project.  Required scopes: org:manage
     * @param {Number} cloudPk 
     * @param {Number} groupPk A unique integer value identifying this group.
     * @param {Number} id A unique integer value identifying this group.
     * @param {Number} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteGroupMember(cloudPk, groupPk, id, projectPk) {
      return this.deleteGroupMemberWithHttpInfo(cloudPk, groupPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a group
     * Delete a group. Must be an admin of the project  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this group.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteManageGroupWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteManageGroup");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteManageGroup");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteManageGroup");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/group/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a group
     * Delete a group. Must be an admin of the project  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this group.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteManageGroup(cloudPk, id, projectPk) {
      return this.deleteManageGroupWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a project
     * It can take a long time to respond because we may need to delete all properties of all elements of all models in the project  Required scopes: org:manage
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProjectWithHttpInfo(cloudPk, id) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteProject");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProject");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a project
     * It can take a long time to respond because we may need to delete all properties of all elements of all models in the project  Required scopes: org:manage
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProject(cloudPk, id) {
      return this.deleteProjectWithHttpInfo(cloudPk, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a token
     * Deleting a token will revoke it  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProjectAccessTokenWithHttpInfo(cloudPk, projectPk, token) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteProjectAccessToken");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteProjectAccessToken");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteProjectAccessToken");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/access-token/{token}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a token
     * Deleting a token will revoke it  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProjectAccessToken(cloudPk, projectPk, token) {
      return this.deleteProjectAccessTokenWithHttpInfo(cloudPk, projectPk, token)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a user from a project
     * Remove a user from a project  Required scopes: cloud:manage
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this user project.
     * @param {Number} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProjectUserWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteProjectUser");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProjectUser");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteProjectUser");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/user/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a user from a project
     * Remove a user from a project  Required scopes: cloud:manage
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this user project.
     * @param {Number} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProjectUser(cloudPk, id, projectPk) {
      return this.deleteProjectUserWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete the tag
     * Delete the tag  Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this tag.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteTagWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteTag");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTag");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteTag");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/tag/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete the tag
     * Delete the tag  Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this tag.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteTag(cloudPk, id, projectPk) {
      return this.deleteTagWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a validation
     * Remove a validation  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa validation.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteValidationWithHttpInfo(cloudPk, documentPk, id, projectPk, visaPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteValidation");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling deleteValidation");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteValidation");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteValidation");
      }
      // verify the required parameter 'visaPk' is set
      if (visaPk === undefined || visaPk === null) {
        throw new Error("Missing the required parameter 'visaPk' when calling deleteValidation");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'id': id,
        'project_pk': projectPk,
        'visa_pk': visaPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a validation
     * Remove a validation  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa validation.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteValidation(cloudPk, documentPk, id, projectPk, visaPk) {
      return this.deleteValidationWithHttpInfo(cloudPk, documentPk, id, projectPk, visaPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a visa
     * Remove a visa  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteVisaWithHttpInfo(cloudPk, documentPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteVisa");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling deleteVisa");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteVisa");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteVisa");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a visa
     * Remove a visa  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteVisa(cloudPk, documentPk, id, projectPk) {
      return this.deleteVisaWithHttpInfo(cloudPk, documentPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a comment
     * Remove a comment  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa comment.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteVisaCommentWithHttpInfo(cloudPk, documentPk, id, projectPk, visaPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteVisaComment");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling deleteVisaComment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteVisaComment");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteVisaComment");
      }
      // verify the required parameter 'visaPk' is set
      if (visaPk === undefined || visaPk === null) {
        throw new Error("Missing the required parameter 'visaPk' when calling deleteVisaComment");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'id': id,
        'project_pk': projectPk,
        'visa_pk': visaPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a comment
     * Remove a comment  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa comment.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteVisaComment(cloudPk, documentPk, id, projectPk, visaPk) {
      return this.deleteVisaCommentWithHttpInfo(cloudPk, documentPk, id, projectPk, visaPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deny an invitation
     * The invitation status change to DENIED and the user is not added to the cloud. You can accept an invitation previously denied  Required scopes: user:write
     * @param {Number} id A unique integer value identifying this invitation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    denyUserInvitationWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling denyUserInvitation");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/invitations/{id}/deny', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deny an invitation
     * The invitation status change to DENIED and the user is not added to the cloud. You can accept an invitation previously denied  Required scopes: user:write
     * @param {Number} id A unique integer value identifying this invitation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    denyUserInvitation(id) {
      return this.denyUserInvitationWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deny a validation
     * Deny a validation  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa validation.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @param {Object} opts Optional parameters
     * @param {File} opts.attachment 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VisaAttachment} and HTTP response
     */
    denyValidationWithHttpInfo(cloudPk, documentPk, id, projectPk, visaPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling denyValidation");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling denyValidation");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling denyValidation");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling denyValidation");
      }
      // verify the required parameter 'visaPk' is set
      if (visaPk === undefined || visaPk === null) {
        throw new Error("Missing the required parameter 'visaPk' when calling denyValidation");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'id': id,
        'project_pk': projectPk,
        'visa_pk': visaPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'attachment': opts['attachment']
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = VisaAttachment;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}/deny', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deny a validation
     * Deny a validation  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa validation.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @param {Object} opts Optional parameters
     * @param {File} opts.attachment 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VisaAttachment}
     */
    denyValidation(cloudPk, documentPk, id, projectPk, visaPk, opts) {
      return this.denyValidationWithHttpInfo(cloudPk, documentPk, id, projectPk, visaPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a classification
     * Retrieve a classification  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this classification.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Classification} and HTTP response
     */
    getClassificationWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getClassification");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getClassification");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getClassification");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Classification;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/classification/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a classification
     * Retrieve a classification  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this classification.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Classification}
     */
    getClassification(cloudPk, id, projectPk) {
      return this.getClassificationWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all classifications
     * Retrieve all classifications of all models in the project  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Classification>} and HTTP response
     */
    getClassificationsWithHttpInfo(cloudPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getClassifications");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getClassifications");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Classification];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/classification', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all classifications
     * Retrieve all classifications of all models in the project  Required scopes: ifc:read, model:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Classification>}
     */
    getClassifications(cloudPk, projectPk) {
      return this.getClassificationsWithHttpInfo(cloudPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one cloud
     * Retrieve one cloud
     * @param {Number} id A unique integer value identifying this cloud.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Cloud} and HTTP response
     */
    getCloudWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCloud");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Cloud;
      return this.apiClient.callApi(
        '/cloud/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve one cloud
     * Retrieve one cloud
     * @param {Number} id A unique integer value identifying this cloud.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Cloud}
     */
    getCloud(id) {
      return this.getCloudWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all pending invitations in the cloud
     * Returns app's invitations only  Required scopes: org:manage
     * @param {Number} cloudPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CloudInvitation>} and HTTP response
     */
    getCloudInvitationsWithHttpInfo(cloudPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCloudInvitations");
      }

      let pathParams = {
        'cloud_pk': cloudPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CloudInvitation];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/invitation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all pending invitations in the cloud
     * Returns app's invitations only  Required scopes: org:manage
     * @param {Number} cloudPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CloudInvitation>}
     */
    getCloudInvitations(cloudPk) {
      return this.getCloudInvitationsWithHttpInfo(cloudPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get size of the cloud
     *  Returns the sizes of the cloud in Bytes. The response fields depends on the role of the user. If the user is an admin, all field will be returned. If the user is a standard user, only `remaining_total_size` and `remaining_smart_data_size` will be set. If the call is made from an API access, role admin (100) will be returned and all fields will be set. The fields `managed by` indicate if the subscription for this cloud is an API subscription or a BIMData Platform subscription. If the cloud is managed by an API plan, the remaining sizes will take others organizations's clouds size into account
     * @param {Number} id A unique integer value identifying this cloud.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Size} and HTTP response
     */
    getCloudSizeWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCloudSize");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Size;
      return this.apiClient.callApi(
        '/cloud/{id}/size', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get size of the cloud
     *  Returns the sizes of the cloud in Bytes. The response fields depends on the role of the user. If the user is an admin, all field will be returned. If the user is a standard user, only `remaining_total_size` and `remaining_smart_data_size` will be set. If the call is made from an API access, role admin (100) will be returned and all fields will be set. The fields `managed by` indicate if the subscription for this cloud is an API subscription or a BIMData Platform subscription. If the cloud is managed by an API plan, the remaining sizes will take others organizations's clouds size into account
     * @param {Number} id A unique integer value identifying this cloud.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Size}
     */
    getCloudSize(id) {
      return this.getCloudSizeWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a user in a cloud
     * Only administrators can see a cloud member  Required scopes: cloud:read
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this fos user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/User} and HTTP response
     */
    getCloudUserWithHttpInfo(cloudPk, id) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCloudUser");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCloudUser");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/user/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a user in a cloud
     * Only administrators can see a cloud member  Required scopes: cloud:read
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this fos user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/User}
     */
    getCloudUser(cloudPk, id) {
      return this.getCloudUserWithHttpInfo(cloudPk, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all users in a cloud, or a list with a filter by email
     * Only administrators can see cloud members.  Required scopes: cloud:read
     * @param {Number} cloudPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.email 
     * @param {String} opts.emailContains 
     * @param {String} opts.emailEndswith 
     * @param {String} opts.emailStartswith 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/User>} and HTTP response
     */
    getCloudUsersWithHttpInfo(cloudPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCloudUsers");
      }

      let pathParams = {
        'cloud_pk': cloudPk
      };
      let queryParams = {
        'email': opts['email'],
        'email__contains': opts['emailContains'],
        'email__endswith': opts['emailEndswith'],
        'email__startswith': opts['emailStartswith']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all users in a cloud, or a list with a filter by email
     * Only administrators can see cloud members.  Required scopes: cloud:read
     * @param {Number} cloudPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.email 
     * @param {String} opts.emailContains 
     * @param {String} opts.emailEndswith 
     * @param {String} opts.emailStartswith 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/User>}
     */
    getCloudUsers(cloudPk, opts) {
      return this.getCloudUsersWithHttpInfo(cloudPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all clouds
     * Returns user's (or app's) clouds only
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Cloud>} and HTTP response
     */
    getCloudsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Cloud];
      return this.apiClient.callApi(
        '/cloud', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all clouds
     * Returns user's (or app's) clouds only
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Cloud>}
     */
    getClouds() {
      return this.getCloudsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a document
     * Retrieve a document in the project  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Document} and HTTP response
     */
    getDocumentWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getDocument");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDocument");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getDocument");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a document
     * Retrieve a document in the project  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Document}
     */
    getDocument(cloudPk, id, projectPk) {
      return this.getDocumentWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all document histories
     * Retrieve all documents from the header document history  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Document>} and HTTP response
     */
    getDocumentHistoriesWithHttpInfo(cloudPk, documentPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getDocumentHistories");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling getDocumentHistories");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getDocumentHistories");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Document];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all document histories
     * Retrieve all documents from the header document history  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Document>}
     */
    getDocumentHistories(cloudPk, documentPk, projectPk) {
      return this.getDocumentHistoriesWithHttpInfo(cloudPk, documentPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all documents
     * Retrieve all documents in the project. Filters are case insentive  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.createdAfter 
     * @param {Date} opts.createdBefore 
     * @param {String} opts.creatorEmail 
     * @param {String} opts.description 
     * @param {String} opts.descriptionContains 
     * @param {String} opts.descriptionEndswith 
     * @param {String} opts.descriptionStartswith 
     * @param {String} opts.fileName 
     * @param {String} opts.fileNameContains 
     * @param {String} opts.fileNameEndswith 
     * @param {String} opts.fileNameStartswith 
     * @param {Boolean} opts.hasVisa 
     * @param {String} opts.name 
     * @param {String} opts.nameContains 
     * @param {String} opts.nameEndswith 
     * @param {String} opts.nameStartswith 
     * @param {Number} opts.sizeMax Size of the file.
     * @param {Number} opts.sizeMin Size of the file.
     * @param {Array.<String>} opts.tags Multiple values may be separated by commas.
     * @param {String} opts.visaCreatorEmail 
     * @param {Date} opts.visaDeadlineAfter 
     * @param {Date} opts.visaDeadlineBefore 
     * @param {Boolean} opts.visaPastDeadline if True, Get documents that have at least one visa opened with a deadline in past
     * @param {Boolean} opts.visaPastDeadlineStrict if True, Get documents that *only* have visa opened with a deadline in past
     * @param {module:model/String} opts.visaStatus Get documents that have at least one visa in the requested status  * `O` - opened * `P` - paused * `C` - closed
     * @param {module:model/String} opts.visaStatusStrict Get documents that *exclusively* have visa in the requested status  * `O` - opened * `P` - paused * `C` - closed
     * @param {String} opts.visaValidationStatus 
     * @param {String} opts.visaValidatorEmail 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Document>} and HTTP response
     */
    getDocumentsWithHttpInfo(cloudPk, projectPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getDocuments");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getDocuments");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
        'created_after': opts['createdAfter'],
        'created_before': opts['createdBefore'],
        'creator_email': opts['creatorEmail'],
        'description': opts['description'],
        'description__contains': opts['descriptionContains'],
        'description__endswith': opts['descriptionEndswith'],
        'description__startswith': opts['descriptionStartswith'],
        'file_name': opts['fileName'],
        'file_name__contains': opts['fileNameContains'],
        'file_name__endswith': opts['fileNameEndswith'],
        'file_name__startswith': opts['fileNameStartswith'],
        'has__visa': opts['hasVisa'],
        'name': opts['name'],
        'name__contains': opts['nameContains'],
        'name__endswith': opts['nameEndswith'],
        'name__startswith': opts['nameStartswith'],
        'size_max': opts['sizeMax'],
        'size_min': opts['sizeMin'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'visa__creator_email': opts['visaCreatorEmail'],
        'visa__deadline_after': opts['visaDeadlineAfter'],
        'visa__deadline_before': opts['visaDeadlineBefore'],
        'visa__past__deadline': opts['visaPastDeadline'],
        'visa__past__deadline__strict': opts['visaPastDeadlineStrict'],
        'visa__status': opts['visaStatus'],
        'visa__status__strict': opts['visaStatusStrict'],
        'visa__validation_status': opts['visaValidationStatus'],
        'visa__validator_email': opts['visaValidatorEmail']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Document];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all documents
     * Retrieve all documents in the project. Filters are case insentive  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.createdAfter 
     * @param {Date} opts.createdBefore 
     * @param {String} opts.creatorEmail 
     * @param {String} opts.description 
     * @param {String} opts.descriptionContains 
     * @param {String} opts.descriptionEndswith 
     * @param {String} opts.descriptionStartswith 
     * @param {String} opts.fileName 
     * @param {String} opts.fileNameContains 
     * @param {String} opts.fileNameEndswith 
     * @param {String} opts.fileNameStartswith 
     * @param {Boolean} opts.hasVisa 
     * @param {String} opts.name 
     * @param {String} opts.nameContains 
     * @param {String} opts.nameEndswith 
     * @param {String} opts.nameStartswith 
     * @param {Number} opts.sizeMax Size of the file.
     * @param {Number} opts.sizeMin Size of the file.
     * @param {Array.<String>} opts.tags Multiple values may be separated by commas.
     * @param {String} opts.visaCreatorEmail 
     * @param {Date} opts.visaDeadlineAfter 
     * @param {Date} opts.visaDeadlineBefore 
     * @param {Boolean} opts.visaPastDeadline if True, Get documents that have at least one visa opened with a deadline in past
     * @param {Boolean} opts.visaPastDeadlineStrict if True, Get documents that *only* have visa opened with a deadline in past
     * @param {module:model/String} opts.visaStatus Get documents that have at least one visa in the requested status  * `O` - opened * `P` - paused * `C` - closed
     * @param {module:model/String} opts.visaStatusStrict Get documents that *exclusively* have visa in the requested status  * `O` - opened * `P` - paused * `C` - closed
     * @param {String} opts.visaValidationStatus 
     * @param {String} opts.visaValidatorEmail 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Document>}
     */
    getDocuments(cloudPk, projectPk, opts) {
      return this.getDocumentsWithHttpInfo(cloudPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a folder
     * Retrieve a folder  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this folder.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FolderWithoutChildren} and HTTP response
     */
    getFolderWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getFolder");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFolder");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getFolder");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FolderWithoutChildren;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/folder/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a folder
     * Retrieve a folder  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this folder.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FolderWithoutChildren}
     */
    getFolder(cloudPk, id, projectPk) {
      return this.getFolderWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all documents of a folder
     * Get all documents of a folder  Required scopes: document:read
     * @param {Number} cloudPk 
     * @param {Number} folderPk 
     * @param {Number} projectPk 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.createdAfter 
     * @param {Date} opts.createdBefore 
     * @param {String} opts.creatorEmail 
     * @param {String} opts.description 
     * @param {String} opts.descriptionContains 
     * @param {String} opts.descriptionEndswith 
     * @param {String} opts.descriptionStartswith 
     * @param {String} opts.fileName 
     * @param {String} opts.fileNameContains 
     * @param {String} opts.fileNameEndswith 
     * @param {String} opts.fileNameStartswith 
     * @param {Boolean} opts.hasVisa 
     * @param {String} opts.name 
     * @param {String} opts.nameContains 
     * @param {String} opts.nameEndswith 
     * @param {String} opts.nameStartswith 
     * @param {Number} opts.sizeMax Size of the file.
     * @param {Number} opts.sizeMin Size of the file.
     * @param {Array.<String>} opts.tags Multiple values may be separated by commas.
     * @param {String} opts.visaCreatorEmail 
     * @param {Date} opts.visaDeadlineAfter 
     * @param {Date} opts.visaDeadlineBefore 
     * @param {Boolean} opts.visaPastDeadline if True, Get documents that have at least one visa opened with a deadline in past
     * @param {Boolean} opts.visaPastDeadlineStrict if True, Get documents that *only* have visa opened with a deadline in past
     * @param {module:model/String} opts.visaStatus Get documents that have at least one visa in the requested status  * `O` - opened * `P` - paused * `C` - closed
     * @param {module:model/String} opts.visaStatusStrict Get documents that *exclusively* have visa in the requested status  * `O` - opened * `P` - paused * `C` - closed
     * @param {String} opts.visaValidationStatus 
     * @param {String} opts.visaValidatorEmail 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Document>} and HTTP response
     */
    getFolderDocumentsWithHttpInfo(cloudPk, folderPk, projectPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getFolderDocuments");
      }
      // verify the required parameter 'folderPk' is set
      if (folderPk === undefined || folderPk === null) {
        throw new Error("Missing the required parameter 'folderPk' when calling getFolderDocuments");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getFolderDocuments");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'folder_pk': folderPk,
        'project_pk': projectPk
      };
      let queryParams = {
        'created_after': opts['createdAfter'],
        'created_before': opts['createdBefore'],
        'creator_email': opts['creatorEmail'],
        'description': opts['description'],
        'description__contains': opts['descriptionContains'],
        'description__endswith': opts['descriptionEndswith'],
        'description__startswith': opts['descriptionStartswith'],
        'file_name': opts['fileName'],
        'file_name__contains': opts['fileNameContains'],
        'file_name__endswith': opts['fileNameEndswith'],
        'file_name__startswith': opts['fileNameStartswith'],
        'has__visa': opts['hasVisa'],
        'name': opts['name'],
        'name__contains': opts['nameContains'],
        'name__endswith': opts['nameEndswith'],
        'name__startswith': opts['nameStartswith'],
        'size_max': opts['sizeMax'],
        'size_min': opts['sizeMin'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'visa__creator_email': opts['visaCreatorEmail'],
        'visa__deadline_after': opts['visaDeadlineAfter'],
        'visa__deadline_before': opts['visaDeadlineBefore'],
        'visa__past__deadline': opts['visaPastDeadline'],
        'visa__past__deadline__strict': opts['visaPastDeadlineStrict'],
        'visa__status': opts['visaStatus'],
        'visa__status__strict': opts['visaStatusStrict'],
        'visa__validation_status': opts['visaValidationStatus'],
        'visa__validator_email': opts['visaValidatorEmail']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Document];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/folder/{folder_pk}/document', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all documents of a folder
     * Get all documents of a folder  Required scopes: document:read
     * @param {Number} cloudPk 
     * @param {Number} folderPk 
     * @param {Number} projectPk 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.createdAfter 
     * @param {Date} opts.createdBefore 
     * @param {String} opts.creatorEmail 
     * @param {String} opts.description 
     * @param {String} opts.descriptionContains 
     * @param {String} opts.descriptionEndswith 
     * @param {String} opts.descriptionStartswith 
     * @param {String} opts.fileName 
     * @param {String} opts.fileNameContains 
     * @param {String} opts.fileNameEndswith 
     * @param {String} opts.fileNameStartswith 
     * @param {Boolean} opts.hasVisa 
     * @param {String} opts.name 
     * @param {String} opts.nameContains 
     * @param {String} opts.nameEndswith 
     * @param {String} opts.nameStartswith 
     * @param {Number} opts.sizeMax Size of the file.
     * @param {Number} opts.sizeMin Size of the file.
     * @param {Array.<String>} opts.tags Multiple values may be separated by commas.
     * @param {String} opts.visaCreatorEmail 
     * @param {Date} opts.visaDeadlineAfter 
     * @param {Date} opts.visaDeadlineBefore 
     * @param {Boolean} opts.visaPastDeadline if True, Get documents that have at least one visa opened with a deadline in past
     * @param {Boolean} opts.visaPastDeadlineStrict if True, Get documents that *only* have visa opened with a deadline in past
     * @param {module:model/String} opts.visaStatus Get documents that have at least one visa in the requested status  * `O` - opened * `P` - paused * `C` - closed
     * @param {module:model/String} opts.visaStatusStrict Get documents that *exclusively* have visa in the requested status  * `O` - opened * `P` - paused * `C` - closed
     * @param {String} opts.visaValidationStatus 
     * @param {String} opts.visaValidatorEmail 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Document>}
     */
    getFolderDocuments(cloudPk, folderPk, projectPk, opts) {
      return this.getFolderDocumentsWithHttpInfo(cloudPk, folderPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all users in a project with the permission on the folder
     * Retrieve all users in a project with the permission on the folder  Required scopes: document:read
     * @param {Number} cloudPk 
     * @param {Number} folderPk A unique integer value identifying this folder.
     * @param {Number} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/FolderUserProject>} and HTTP response
     */
    getFolderProjectUsersWithHttpInfo(cloudPk, folderPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getFolderProjectUsers");
      }
      // verify the required parameter 'folderPk' is set
      if (folderPk === undefined || folderPk === null) {
        throw new Error("Missing the required parameter 'folderPk' when calling getFolderProjectUsers");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getFolderProjectUsers");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'folder_pk': folderPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FolderUserProject];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/folder/{folder_pk}/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all users in a project with the permission on the folder
     * Retrieve all users in a project with the permission on the folder  Required scopes: document:read
     * @param {Number} cloudPk 
     * @param {Number} folderPk A unique integer value identifying this folder.
     * @param {Number} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/FolderUserProject>}
     */
    getFolderProjectUsers(cloudPk, folderPk, projectPk) {
      return this.getFolderProjectUsersWithHttpInfo(cloudPk, folderPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all folders
     * Retrieve all folders in the project. This is an array of folder. If you want to get the tree of all folders, see getProjectTree  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/FolderWithoutChildren>} and HTTP response
     */
    getFoldersWithHttpInfo(cloudPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getFolders");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getFolders");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FolderWithoutChildren];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/folder', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all folders
     * Retrieve all folders in the project. This is an array of folder. If you want to get the tree of all folders, see getProjectTree  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/FolderWithoutChildren>}
     */
    getFolders(cloudPk, projectPk) {
      return this.getFoldersWithHttpInfo(cloudPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a group
     * Retrieve a group to which the user belongs  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this group.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Group} and HTTP response
     */
    getGroupWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getGroup");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroup");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getGroup");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/me/group/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a group
     * Retrieve a group to which the user belongs  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this group.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Group}
     */
    getGroup(cloudPk, id, projectPk) {
      return this.getGroupWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all groups
     * Retrieves all groups to which the user belongs  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Group>} and HTTP response
     */
    getGroupsWithHttpInfo(cloudPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getGroups");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getGroups");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Group];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/me/group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all groups
     * Retrieves all groups to which the user belongs  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Group>}
     */
    getGroups(cloudPk, projectPk) {
      return this.getGroupsWithHttpInfo(cloudPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all logs of the project
     * Retrieve all logs of the project  Required scopes: logs:read
     * @param {Number} cloudPk 
     * @param {Number} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LogEntry>} and HTTP response
     */
    getLogsWithHttpInfo(cloudPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getLogs");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getLogs");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LogEntry];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all logs of the project
     * Retrieve all logs of the project  Required scopes: logs:read
     * @param {Number} cloudPk 
     * @param {Number} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LogEntry>}
     */
    getLogs(cloudPk, projectPk) {
      return this.getLogsWithHttpInfo(cloudPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a group
     * Retrieve a group. Must be an admin of the project  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this group.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Group} and HTTP response
     */
    getManageGroupWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getManageGroup");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getManageGroup");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getManageGroup");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/group/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a group
     * Retrieve a group. Must be an admin of the project  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this group.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Group}
     */
    getManageGroup(cloudPk, id, projectPk) {
      return this.getManageGroupWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all groups
     * Retrieve all groups in the project. Must be an admin of the project  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Group>} and HTTP response
     */
    getManageGroupsWithHttpInfo(cloudPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getManageGroups");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getManageGroups");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Group];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all groups
     * Retrieve all groups in the project. Must be an admin of the project  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Group>}
     */
    getManageGroups(cloudPk, projectPk) {
      return this.getManageGroupsWithHttpInfo(cloudPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a project
     * Retrieve a project
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
     */
    getProjectWithHttpInfo(cloudPk, id) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getProject");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProject");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a project
     * Retrieve a project
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
     */
    getProject(cloudPk, id) {
      return this.getProjectWithHttpInfo(cloudPk, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one token created for this project
     * Retrieve one token created for this project  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProjectAccessToken} and HTTP response
     */
    getProjectAccessTokenWithHttpInfo(cloudPk, projectPk, token) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getProjectAccessToken");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getProjectAccessToken");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getProjectAccessToken");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectAccessToken;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/access-token/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve one token created for this project
     * Retrieve one token created for this project  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {String} token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProjectAccessToken}
     */
    getProjectAccessToken(cloudPk, projectPk, token) {
      return this.getProjectAccessTokenWithHttpInfo(cloudPk, projectPk, token)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all tokens created for this project
     * Retrieve all tokens created for this project  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ProjectAccessToken>} and HTTP response
     */
    getProjectAccessTokensWithHttpInfo(cloudPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getProjectAccessTokens");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getProjectAccessTokens");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectAccessToken];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/access-token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all tokens created for this project
     * Retrieve all tokens created for this project  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ProjectAccessToken>}
     */
    getProjectAccessTokens(cloudPk, projectPk) {
      return this.getProjectAccessTokensWithHttpInfo(cloudPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List visas created by user
     * List visas created by user in a project  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.deadlineAfter 
     * @param {Date} opts.deadlineBefore 
     * @param {Boolean} opts.hasPastDeadline 
     * @param {module:model/String} opts.status * `O` - opened * `P` - paused * `C` - closed
     * @param {String} opts.validationStatus 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/VisaWithDocument>} and HTTP response
     */
    getProjectCreatorVisasWithHttpInfo(cloudPk, projectPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getProjectCreatorVisas");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getProjectCreatorVisas");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
        'deadline_after': opts['deadlineAfter'],
        'deadline_before': opts['deadlineBefore'],
        'has__past_deadline': opts['hasPastDeadline'],
        'status': opts['status'],
        'validation_status': opts['validationStatus']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VisaWithDocument];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/me/visa/creator', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List visas created by user
     * List visas created by user in a project  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.deadlineAfter 
     * @param {Date} opts.deadlineBefore 
     * @param {Boolean} opts.hasPastDeadline 
     * @param {module:model/String} opts.status * `O` - opened * `P` - paused * `C` - closed
     * @param {String} opts.validationStatus 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/VisaWithDocument>}
     */
    getProjectCreatorVisas(cloudPk, projectPk, opts) {
      return this.getProjectCreatorVisasWithHttpInfo(cloudPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve the complete DMS tree
     * Retrieve the complete DMS tree (all folders and all documents in the project)
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Folder} and HTTP response
     */
    getProjectDMSTreeWithHttpInfo(cloudPk, id) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getProjectDMSTree");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProjectDMSTree");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Folder;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{id}/dms-tree', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve the complete DMS tree
     * Retrieve the complete DMS tree (all folders and all documents in the project)
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Folder}
     */
    getProjectDMSTree(cloudPk, id) {
      return this.getProjectDMSTreeWithHttpInfo(cloudPk, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve folder tree of the project
     * Retrieve folder tree of the project
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/FolderTree>} and HTTP response
     */
    getProjectFolderTreeWithHttpInfo(cloudPk, id) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getProjectFolderTree");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProjectFolderTree");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FolderTree];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{id}/folder-tree', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve folder tree of the project
     * Retrieve folder tree of the project
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/FolderTree>}
     */
    getProjectFolderTree(cloudPk, id) {
      return this.getProjectFolderTreeWithHttpInfo(cloudPk, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all pending invitations in the project
     * Returns app's invitations only  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ProjectInvitation>} and HTTP response
     */
    getProjectInvitationsWithHttpInfo(cloudPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getProjectInvitations");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getProjectInvitations");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectInvitation];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/invitation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all pending invitations in the project
     * Returns app's invitations only  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ProjectInvitation>}
     */
    getProjectInvitations(cloudPk, projectPk) {
      return this.getProjectInvitationsWithHttpInfo(cloudPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get size of all model files in the project
     * Returns the size of the project in Bytes
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProjectSize} and HTTP response
     */
    getProjectSizeWithHttpInfo(cloudPk, id) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getProjectSize");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProjectSize");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectSize;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{id}/size', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get size of all model files in the project
     * Returns the size of the project in Bytes
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProjectSize}
     */
    getProjectSize(cloudPk, id) {
      return this.getProjectSizeWithHttpInfo(cloudPk, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve the complete DMS tree
     * Retrieve the complete DMS tree (all folders and all documents in the project). DEPRECATED: renamed to getProjectDMSTree
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Folder} and HTTP response
     */
    getProjectTreeWithHttpInfo(cloudPk, id) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getProjectTree");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProjectTree");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Folder;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{id}/tree', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve the complete DMS tree
     * Retrieve the complete DMS tree (all folders and all documents in the project). DEPRECATED: renamed to getProjectDMSTree
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Folder}
     */
    getProjectTree(cloudPk, id) {
      return this.getProjectTreeWithHttpInfo(cloudPk, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all users in a project, or a list with a filter by email
     * Each member of a project can see other members of the project  Required scopes: cloud:read, bcf:read
     * @param {Number} cloudPk 
     * @param {Number} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.email Filter the returned list by email
     * @param {String} opts.emailContains Filter the returned list by email__contains
     * @param {String} opts.emailEndswith Filter the returned list by email__endswith
     * @param {String} opts.emailStartswith Filter the returned list by email__startswith
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/UserProject>} and HTTP response
     */
    getProjectUsersWithHttpInfo(cloudPk, projectPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getProjectUsers");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getProjectUsers");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
        'email': opts['email'],
        'email__contains': opts['emailContains'],
        'email__endswith': opts['emailEndswith'],
        'email__startswith': opts['emailStartswith']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserProject];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all users in a project, or a list with a filter by email
     * Each member of a project can see other members of the project  Required scopes: cloud:read, bcf:read
     * @param {Number} cloudPk 
     * @param {Number} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.email Filter the returned list by email
     * @param {String} opts.emailContains Filter the returned list by email__contains
     * @param {String} opts.emailEndswith Filter the returned list by email__endswith
     * @param {String} opts.emailStartswith Filter the returned list by email__startswith
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/UserProject>}
     */
    getProjectUsers(cloudPk, projectPk, opts) {
      return this.getProjectUsersWithHttpInfo(cloudPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List visas where user is a validator
     * List visas where user is a validator in a project  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.deadlineAfter 
     * @param {Date} opts.deadlineBefore 
     * @param {Boolean} opts.hasPastDeadline 
     * @param {module:model/String} opts.status * `O` - opened * `P` - paused * `C` - closed
     * @param {String} opts.validationStatus 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/VisaWithDocument>} and HTTP response
     */
    getProjectValidatorVisasWithHttpInfo(cloudPk, projectPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getProjectValidatorVisas");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getProjectValidatorVisas");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
        'deadline_after': opts['deadlineAfter'],
        'deadline_before': opts['deadlineBefore'],
        'has__past_deadline': opts['hasPastDeadline'],
        'status': opts['status'],
        'validation_status': opts['validationStatus']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VisaWithDocument];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/me/visa/validator', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List visas where user is a validator
     * List visas where user is a validator in a project  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.deadlineAfter 
     * @param {Date} opts.deadlineBefore 
     * @param {Boolean} opts.hasPastDeadline 
     * @param {module:model/String} opts.status * `O` - opened * `P` - paused * `C` - closed
     * @param {String} opts.validationStatus 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/VisaWithDocument>}
     */
    getProjectValidatorVisas(cloudPk, projectPk, opts) {
      return this.getProjectValidatorVisasWithHttpInfo(cloudPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all projects
     * Retrieve all projects of the cloud. All project are shown at the same level. see #getProjectSubTree
     * @param {Number} cloudPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Project>} and HTTP response
     */
    getProjectsWithHttpInfo(cloudPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getProjects");
      }

      let pathParams = {
        'cloud_pk': cloudPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Project];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all projects
     * Retrieve all projects of the cloud. All project are shown at the same level. see #getProjectSubTree
     * @param {Number} cloudPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Project>}
     */
    getProjects(cloudPk) {
      return this.getProjectsWithHttpInfo(cloudPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List current user's projects
     * List user's projects of all clouds  Required scopes: user:read
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Project>} and HTTP response
     */
    getSelfProjectsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Project];
      return this.apiClient.callApi(
        '/user/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List current user's projects
     * List user's projects of all clouds  Required scopes: user:read
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Project>}
     */
    getSelfProjects() {
      return this.getSelfProjectsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get info about the current user
     * Get info about the current user  Required scopes: user:read
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SelfUser} and HTTP response
     */
    getSelfUserWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SelfUser;
      return this.apiClient.callApi(
        '/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get info about the current user
     * Get info about the current user  Required scopes: user:read
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SelfUser}
     */
    getSelfUser() {
      return this.getSelfUserWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a tag
     * Retrieve a tag in the project  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this tag.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Tag} and HTTP response
     */
    getTagWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getTag");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTag");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getTag");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/tag/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a tag
     * Retrieve a tag in the project  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this tag.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Tag}
     */
    getTag(cloudPk, id, projectPk) {
      return this.getTagWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all tags
     * Retrieve all tags in the project  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Tag>} and HTTP response
     */
    getTagsWithHttpInfo(cloudPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getTags");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getTags");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Tag];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all tags
     * Retrieve all tags in the project  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Tag>}
     */
    getTags(cloudPk, projectPk) {
      return this.getTagsWithHttpInfo(cloudPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve an invitation
     * Retrieve the invitation  Required scopes: user:read
     * @param {Number} id A unique integer value identifying this invitation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserInvitation} and HTTP response
     */
    getUserInvitationWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserInvitation");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserInvitation;
      return this.apiClient.callApi(
        '/user/invitations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve an invitation
     * Retrieve the invitation  Required scopes: user:read
     * @param {Number} id A unique integer value identifying this invitation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserInvitation}
     */
    getUserInvitation(id) {
      return this.getUserInvitationWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List user's invitations
     * List all user's invitations  Required scopes: user:read
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/UserInvitation>} and HTTP response
     */
    getUserInvitationsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserInvitation];
      return this.apiClient.callApi(
        '/user/invitations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List user's invitations
     * List all user's invitations  Required scopes: user:read
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/UserInvitation>}
     */
    getUserInvitations() {
      return this.getUserInvitationsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a validation to a visa
     * Retrieve a validation to a visa  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa validation.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VisaValidation} and HTTP response
     */
    getValidationWithHttpInfo(cloudPk, documentPk, id, projectPk, visaPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getValidation");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling getValidation");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getValidation");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getValidation");
      }
      // verify the required parameter 'visaPk' is set
      if (visaPk === undefined || visaPk === null) {
        throw new Error("Missing the required parameter 'visaPk' when calling getValidation");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'id': id,
        'project_pk': projectPk,
        'visa_pk': visaPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VisaValidation;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a validation to a visa
     * Retrieve a validation to a visa  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa validation.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VisaValidation}
     */
    getValidation(cloudPk, documentPk, id, projectPk, visaPk) {
      return this.getValidationWithHttpInfo(cloudPk, documentPk, id, projectPk, visaPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all validations to a visa
     * List all validations to a visa  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/VisaValidation>} and HTTP response
     */
    getValidationsWithHttpInfo(cloudPk, documentPk, projectPk, visaPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getValidations");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling getValidations");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getValidations");
      }
      // verify the required parameter 'visaPk' is set
      if (visaPk === undefined || visaPk === null) {
        throw new Error("Missing the required parameter 'visaPk' when calling getValidations");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'project_pk': projectPk,
        'visa_pk': visaPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VisaValidation];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all validations to a visa
     * List all validations to a visa  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/VisaValidation>}
     */
    getValidations(cloudPk, documentPk, projectPk, visaPk) {
      return this.getValidationsWithHttpInfo(cloudPk, documentPk, projectPk, visaPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a visa of a document
     * Retrieve a unique visa of a document  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Visa} and HTTP response
     */
    getVisaWithHttpInfo(cloudPk, documentPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getVisa");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling getVisa");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVisa");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getVisa");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Visa;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a visa of a document
     * Retrieve a unique visa of a document  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Visa}
     */
    getVisa(cloudPk, documentPk, id, projectPk) {
      return this.getVisaWithHttpInfo(cloudPk, documentPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a comment
     * Retrieve a comment  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa comment.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VisaComment} and HTTP response
     */
    getVisaCommentWithHttpInfo(cloudPk, documentPk, id, projectPk, visaPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getVisaComment");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling getVisaComment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVisaComment");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getVisaComment");
      }
      // verify the required parameter 'visaPk' is set
      if (visaPk === undefined || visaPk === null) {
        throw new Error("Missing the required parameter 'visaPk' when calling getVisaComment");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'id': id,
        'project_pk': projectPk,
        'visa_pk': visaPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VisaComment;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a comment
     * Retrieve a comment  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa comment.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VisaComment}
     */
    getVisaComment(cloudPk, documentPk, id, projectPk, visaPk) {
      return this.getVisaCommentWithHttpInfo(cloudPk, documentPk, id, projectPk, visaPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all comment of a visa
     * List all comment of a visa  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/VisaComment>} and HTTP response
     */
    getVisaCommentsWithHttpInfo(cloudPk, documentPk, projectPk, visaPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getVisaComments");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling getVisaComments");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getVisaComments");
      }
      // verify the required parameter 'visaPk' is set
      if (visaPk === undefined || visaPk === null) {
        throw new Error("Missing the required parameter 'visaPk' when calling getVisaComments");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'project_pk': projectPk,
        'visa_pk': visaPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VisaComment];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all comment of a visa
     * List all comment of a visa  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/VisaComment>}
     */
    getVisaComments(cloudPk, documentPk, projectPk, visaPk) {
      return this.getVisaCommentsWithHttpInfo(cloudPk, documentPk, projectPk, visaPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all visas of a document
     * List all visas of a document  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Visa>} and HTTP response
     */
    getVisasWithHttpInfo(cloudPk, documentPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getVisas");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling getVisas");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getVisas");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Visa];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all visas of a document
     * List all visas of a document  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Visa>}
     */
    getVisas(cloudPk, documentPk, projectPk) {
      return this.getVisasWithHttpInfo(cloudPk, documentPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Import data from a project
     * Import dms tree and/or the groups from a project  Required scopes: org:manage
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this project.
     * @param {module:model/ProjectImportRequest} projectImportRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
     */
    importFromProjectWithHttpInfo(cloudPk, id, projectImportRequest) {
      let postBody = projectImportRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling importFromProject");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling importFromProject");
      }
      // verify the required parameter 'projectImportRequest' is set
      if (projectImportRequest === undefined || projectImportRequest === null) {
        throw new Error("Missing the required parameter 'projectImportRequest' when calling importFromProject");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{id}/import_from', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Import data from a project
     * Import dms tree and/or the groups from a project  Required scopes: org:manage
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this project.
     * @param {module:model/ProjectImportRequest} projectImportRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
     */
    importFromProject(cloudPk, id, projectImportRequest) {
      return this.importFromProjectWithHttpInfo(cloudPk, id, projectImportRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Import a group from another project
     * DEPECRATED: Use ImportFromProject instead  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {module:model/ImportGroupRequest} importGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Group>} and HTTP response
     */
    importManageGroupWithHttpInfo(cloudPk, projectPk, importGroupRequest) {
      let postBody = importGroupRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling importManageGroup");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling importManageGroup");
      }
      // verify the required parameter 'importGroupRequest' is set
      if (importGroupRequest === undefined || importGroupRequest === null) {
        throw new Error("Missing the required parameter 'importGroupRequest' when calling importManageGroup");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [Group];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/group/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Import a group from another project
     * DEPECRATED: Use ImportFromProject instead  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {module:model/ImportGroupRequest} importGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Group>}
     */
    importManageGroup(cloudPk, projectPk, importGroupRequest) {
      return this.importManageGroupWithHttpInfo(cloudPk, projectPk, importGroupRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Invite a cloud member
     * Invite a cloud member. To invite in a project, see inviteProjectUser. You can't invite a user already in the cloud. Create multiple invitations of the same email in the same cloud will generate multiple invitation emails but not multiple invitation object  Required scopes: org:manage
     * @param {Number} cloudPk 
     * @param {module:model/CloudInvitationRequest} cloudInvitationRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CloudInvitation} and HTTP response
     */
    inviteCloudUserWithHttpInfo(cloudPk, cloudInvitationRequest) {
      let postBody = cloudInvitationRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling inviteCloudUser");
      }
      // verify the required parameter 'cloudInvitationRequest' is set
      if (cloudInvitationRequest === undefined || cloudInvitationRequest === null) {
        throw new Error("Missing the required parameter 'cloudInvitationRequest' when calling inviteCloudUser");
      }

      let pathParams = {
        'cloud_pk': cloudPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CloudInvitation;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/invitation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Invite a cloud member
     * Invite a cloud member. To invite in a project, see inviteProjectUser. You can't invite a user already in the cloud. Create multiple invitations of the same email in the same cloud will generate multiple invitation emails but not multiple invitation object  Required scopes: org:manage
     * @param {Number} cloudPk 
     * @param {module:model/CloudInvitationRequest} cloudInvitationRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CloudInvitation}
     */
    inviteCloudUser(cloudPk, cloudInvitationRequest) {
      return this.inviteCloudUserWithHttpInfo(cloudPk, cloudInvitationRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Invite a project member
     * Invite a project member. If the user is not already a cloud member, they will also be invited in the cloud with USER role.  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {module:model/ProjectInvitationRequest} projectInvitationRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProjectInvitation} and HTTP response
     */
    inviteProjectUserWithHttpInfo(cloudPk, projectPk, projectInvitationRequest) {
      let postBody = projectInvitationRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling inviteProjectUser");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling inviteProjectUser");
      }
      // verify the required parameter 'projectInvitationRequest' is set
      if (projectInvitationRequest === undefined || projectInvitationRequest === null) {
        throw new Error("Missing the required parameter 'projectInvitationRequest' when calling inviteProjectUser");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ProjectInvitation;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/invitation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Invite a project member
     * Invite a project member. If the user is not already a cloud member, they will also be invited in the cloud with USER role.  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {module:model/ProjectInvitationRequest} projectInvitationRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProjectInvitation}
     */
    inviteProjectUser(cloudPk, projectPk, projectInvitationRequest) {
      return this.inviteProjectUserWithHttpInfo(cloudPk, projectPk, projectInvitationRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Leave the project
     * Leave the project. Only authenticated users (no app) can call this route.  Required scopes: org:manage
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    leaveProjectWithHttpInfo(cloudPk, id) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling leaveProject");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling leaveProject");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{id}/leave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Leave the project
     * Leave the project. Only authenticated users (no app) can call this route.  Required scopes: org:manage
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    leaveProject(cloudPk, id) {
      return this.leaveProjectWithHttpInfo(cloudPk, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Leave the history version
     * This will create a new independent document in the same folder  Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Document} and HTTP response
     */
    leaveVersionDocumentHistoryWithHttpInfo(cloudPk, documentPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling leaveVersionDocumentHistory");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling leaveVersionDocumentHistory");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling leaveVersionDocumentHistory");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling leaveVersionDocumentHistory");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/history/{id}/leave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Leave the history version
     * This will create a new independent document in the same folder  Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Document}
     */
    leaveVersionDocumentHistory(cloudPk, documentPk, id, projectPk) {
      return this.leaveVersionDocumentHistoryWithHttpInfo(cloudPk, documentPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Make the head of the version
     * The actual head version will be defined as the previous version  Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Document} and HTTP response
     */
    makeHeadVersionDocumentHistoryWithHttpInfo(cloudPk, documentPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling makeHeadVersionDocumentHistory");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling makeHeadVersionDocumentHistory");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling makeHeadVersionDocumentHistory");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling makeHeadVersionDocumentHistory");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/history/{id}/head-version', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Make the head of the version
     * The actual head version will be defined as the previous version  Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Document}
     */
    makeHeadVersionDocumentHistory(cloudPk, documentPk, id, projectPk) {
      return this.makeHeadVersionDocumentHistoryWithHttpInfo(cloudPk, documentPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Pause a visa of a document
     * Pause a visa of a document  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    pauseVisaWithHttpInfo(cloudPk, documentPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling pauseVisa");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling pauseVisa");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling pauseVisa");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling pauseVisa");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}/pause', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Pause a visa of a document
     * Pause a visa of a document  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    pauseVisa(cloudPk, documentPk, id, projectPk) {
      return this.pauseVisaWithHttpInfo(cloudPk, documentPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reset a validation
     * Reset a validation if the validation has been accepted or rejected. The attachment will be removed  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa validation.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    resetValidationWithHttpInfo(cloudPk, documentPk, id, projectPk, visaPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling resetValidation");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling resetValidation");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resetValidation");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling resetValidation");
      }
      // verify the required parameter 'visaPk' is set
      if (visaPk === undefined || visaPk === null) {
        throw new Error("Missing the required parameter 'visaPk' when calling resetValidation");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'id': id,
        'project_pk': projectPk,
        'visa_pk': visaPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reset a validation
     * Reset a validation if the validation has been accepted or rejected. The attachment will be removed  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa validation.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    resetValidation(cloudPk, documentPk, id, projectPk, visaPk) {
      return this.resetValidationWithHttpInfo(cloudPk, documentPk, id, projectPk, visaPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Resume a visa of a document
     * Resume a visa of a document after a pause  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    resumeVisaWithHttpInfo(cloudPk, documentPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling resumeVisa");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling resumeVisa");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resumeVisa");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling resumeVisa");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}/resume', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Resume a visa of a document
     * Resume a visa of a document after a pause  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    resumeVisa(cloudPk, documentPk, id, projectPk) {
      return this.resumeVisaWithHttpInfo(cloudPk, documentPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a classification
     * Update some fields of a classification  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this classification.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedClassificationRequest} opts.patchedClassificationRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Classification} and HTTP response
     */
    updateClassificationWithHttpInfo(cloudPk, id, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedClassificationRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateClassification");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateClassification");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateClassification");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Classification;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/classification/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a classification
     * Update some fields of a classification  Required scopes: ifc:write, model:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this classification.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedClassificationRequest} opts.patchedClassificationRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Classification}
     */
    updateClassification(cloudPk, id, projectPk, opts) {
      return this.updateClassificationWithHttpInfo(cloudPk, id, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a cloud
     * Update some fields of a cloud  Required scopes: cloud:manage
     * @param {Number} id A unique integer value identifying this cloud.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedCloudRequest} opts.patchedCloudRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Cloud} and HTTP response
     */
    updateCloudWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['patchedCloudRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCloud");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Cloud;
      return this.apiClient.callApi(
        '/cloud/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a cloud
     * Update some fields of a cloud  Required scopes: cloud:manage
     * @param {Number} id A unique integer value identifying this cloud.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedCloudRequest} opts.patchedCloudRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Cloud}
     */
    updateCloud(id, opts) {
      return this.updateCloudWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change the user role in the cloud
     * Change the user role in the cloud  Required scopes: cloud:manage
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this fos user.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedUserCloudUpdateRequest} opts.patchedUserCloudUpdateRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/User} and HTTP response
     */
    updateCloudUserWithHttpInfo(cloudPk, id, opts) {
      opts = opts || {};
      let postBody = opts['patchedUserCloudUpdateRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateCloudUser");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCloudUser");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/user/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Change the user role in the cloud
     * Change the user role in the cloud  Required scopes: cloud:manage
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this fos user.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedUserCloudUpdateRequest} opts.patchedUserCloudUpdateRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/User}
     */
    updateCloudUser(cloudPk, id, opts) {
      return this.updateCloudUserWithHttpInfo(cloudPk, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of the document
     * Update some fields of the document  Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedDocumentRequest} opts.patchedDocumentRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Document} and HTTP response
     */
    updateDocumentWithHttpInfo(cloudPk, id, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedDocumentRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateDocument");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDocument");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateDocument");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of the document
     * Update some fields of the document  Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedDocumentRequest} opts.patchedDocumentRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Document}
     */
    updateDocument(cloudPk, id, projectPk, opts) {
      return this.updateDocumentWithHttpInfo(cloudPk, id, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a folder
     *  Update some fields of a folder. Only project admins can update the `default_permission` field.  `default_permission` choices are : ``` 1: ACCESS_DENIED, 50: READ_ONLY, 100: READ_WRTIE ``` When propagate is set to True, the permission of all children in the folder will be updated.  Caution: The 'default_permission' field is not applied to users belonging to one or more groups.   Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this folder.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedFolderWithoutChildrenRequest} opts.patchedFolderWithoutChildrenRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FolderWithoutChildren} and HTTP response
     */
    updateFolderWithHttpInfo(cloudPk, id, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedFolderWithoutChildrenRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateFolder");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateFolder");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateFolder");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FolderWithoutChildren;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/folder/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a folder
     *  Update some fields of a folder. Only project admins can update the `default_permission` field.  `default_permission` choices are : ``` 1: ACCESS_DENIED, 50: READ_ONLY, 100: READ_WRTIE ``` When propagate is set to True, the permission of all children in the folder will be updated.  Caution: The 'default_permission' field is not applied to users belonging to one or more groups.   Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this folder.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedFolderWithoutChildrenRequest} opts.patchedFolderWithoutChildrenRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FolderWithoutChildren}
     */
    updateFolder(cloudPk, id, projectPk, opts) {
      return this.updateFolderWithHttpInfo(cloudPk, id, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the permission of a group on a folder. When propagate is set to True, the permission of all children in the folder will be updated.
     *  Update the permission of a group on a folder. Permissions choices are : ``` 1: ACCESS_DENIED, 50: READ_ONLY, 100: READ_WRITE, None: Default value (See the default_permission field of the folder) ``` When propagate is set to True, the permission of all children in the folder will be updated.               Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} folderPk 
     * @param {Number} id A unique integer value identifying this group folder.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedGroupFolderRequest} opts.patchedGroupFolderRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GroupFolder} and HTTP response
     */
    updateGroupFolderWithHttpInfo(cloudPk, folderPk, id, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedGroupFolderRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateGroupFolder");
      }
      // verify the required parameter 'folderPk' is set
      if (folderPk === undefined || folderPk === null) {
        throw new Error("Missing the required parameter 'folderPk' when calling updateGroupFolder");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateGroupFolder");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateGroupFolder");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'folder_pk': folderPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = GroupFolder;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/folder/{folder_pk}/group/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update the permission of a group on a folder. When propagate is set to True, the permission of all children in the folder will be updated.
     *  Update the permission of a group on a folder. Permissions choices are : ``` 1: ACCESS_DENIED, 50: READ_ONLY, 100: READ_WRITE, None: Default value (See the default_permission field of the folder) ``` When propagate is set to True, the permission of all children in the folder will be updated.               Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} folderPk 
     * @param {Number} id A unique integer value identifying this group folder.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedGroupFolderRequest} opts.patchedGroupFolderRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GroupFolder}
     */
    updateGroupFolder(cloudPk, folderPk, id, projectPk, opts) {
      return this.updateGroupFolderWithHttpInfo(cloudPk, folderPk, id, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a group
     * Update some fields of a group. Must be an admin of the project  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this group.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedGroupRequest} opts.patchedGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Group} and HTTP response
     */
    updateManageGroupWithHttpInfo(cloudPk, id, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedGroupRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateManageGroup");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateManageGroup");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateManageGroup");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/group/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a group
     * Update some fields of a group. Must be an admin of the project  Required scopes: org:manage
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this group.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedGroupRequest} opts.patchedGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Group}
     */
    updateManageGroup(cloudPk, id, projectPk, opts) {
      return this.updateManageGroupWithHttpInfo(cloudPk, id, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update preview of the document
     * Update preview of the document  Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {File} opts.officePreview Office files will be converted as pdf to provide a web preview. Supported extensions are .ppt, .pptx, .odp, .xls, .xlsx, .ods, .doc, .docx, .odt
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentPreviewFile} and HTTP response
     */
    updatePreviewFileWithHttpInfo(cloudPk, id, projectPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updatePreviewFile");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePreviewFile");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updatePreviewFile");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'office_preview': opts['officePreview']
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DocumentPreviewFile;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{id}/preview-file', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update preview of the document
     * Update preview of the document  Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this document.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {File} opts.officePreview Office files will be converted as pdf to provide a web preview. Supported extensions are .ppt, .pptx, .odp, .xls, .xlsx, .ods, .doc, .docx, .odt
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentPreviewFile}
     */
    updatePreviewFile(cloudPk, id, projectPk, opts) {
      return this.updatePreviewFileWithHttpInfo(cloudPk, id, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a project
     * Update some fields of a project  Required scopes: org:manage
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedProjectRequest} opts.patchedProjectRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
     */
    updateProjectWithHttpInfo(cloudPk, id, opts) {
      opts = opts || {};
      let postBody = opts['patchedProjectRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateProject");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProject");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a project
     * Update some fields of a project  Required scopes: org:manage
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedProjectRequest} opts.patchedProjectRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
     */
    updateProject(cloudPk, id, opts) {
      return this.updateProjectWithHttpInfo(cloudPk, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change the user role in the cloud
     * Change the user role in the cloud  Required scopes: cloud:manage
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this user project.
     * @param {Number} projectPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedUserProjectUpdateRequest} opts.patchedUserProjectUpdateRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserProject} and HTTP response
     */
    updateProjectUserWithHttpInfo(cloudPk, id, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedUserProjectUpdateRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateProjectUser");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProjectUser");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateProjectUser");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UserProject;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/user/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Change the user role in the cloud
     * Change the user role in the cloud  Required scopes: cloud:manage
     * @param {Number} cloudPk 
     * @param {Number} id A unique integer value identifying this user project.
     * @param {Number} projectPk 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedUserProjectUpdateRequest} opts.patchedUserProjectUpdateRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserProject}
     */
    updateProjectUser(cloudPk, id, projectPk, opts) {
      return this.updateProjectUserWithHttpInfo(cloudPk, id, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of the tag
     * Update some fields of the tag  Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this tag.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedTagRequest} opts.patchedTagRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Tag} and HTTP response
     */
    updateTagWithHttpInfo(cloudPk, id, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedTagRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateTag");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTag");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateTag");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/tag/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of the tag
     * Update some fields of the tag  Required scopes: document:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this tag.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedTagRequest} opts.patchedTagRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Tag}
     */
    updateTag(cloudPk, id, projectPk, opts) {
      return this.updateTagWithHttpInfo(cloudPk, id, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the validator of validation
     * Update the validator of validation. This route is only useful for an App  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa validation.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedVisaValidationRequest} opts.patchedVisaValidationRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VisaValidation} and HTTP response
     */
    updateValidationWithHttpInfo(cloudPk, documentPk, id, projectPk, visaPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedVisaValidationRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateValidation");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling updateValidation");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateValidation");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateValidation");
      }
      // verify the required parameter 'visaPk' is set
      if (visaPk === undefined || visaPk === null) {
        throw new Error("Missing the required parameter 'visaPk' when calling updateValidation");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'id': id,
        'project_pk': projectPk,
        'visa_pk': visaPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = VisaValidation;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update the validator of validation
     * Update the validator of validation. This route is only useful for an App  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa validation.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedVisaValidationRequest} opts.patchedVisaValidationRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VisaValidation}
     */
    updateValidation(cloudPk, documentPk, id, projectPk, visaPk, opts) {
      return this.updateValidationWithHttpInfo(cloudPk, documentPk, id, projectPk, visaPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a visa
     * Update some fields of a visa  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedVisaRequest} opts.patchedVisaRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Visa} and HTTP response
     */
    updateVisaWithHttpInfo(cloudPk, documentPk, id, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedVisaRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateVisa");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling updateVisa");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateVisa");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateVisa");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Visa;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a visa
     * Update some fields of a visa  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedVisaRequest} opts.patchedVisaRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Visa}
     */
    updateVisa(cloudPk, documentPk, id, projectPk, opts) {
      return this.updateVisaWithHttpInfo(cloudPk, documentPk, id, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a comment
     * Update some fields of a comment  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa comment.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedVisaCommentRequest} opts.patchedVisaCommentRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VisaComment} and HTTP response
     */
    updateVisaCommentWithHttpInfo(cloudPk, documentPk, id, projectPk, visaPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedVisaCommentRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateVisaComment");
      }
      // verify the required parameter 'documentPk' is set
      if (documentPk === undefined || documentPk === null) {
        throw new Error("Missing the required parameter 'documentPk' when calling updateVisaComment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateVisaComment");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateVisaComment");
      }
      // verify the required parameter 'visaPk' is set
      if (visaPk === undefined || visaPk === null) {
        throw new Error("Missing the required parameter 'visaPk' when calling updateVisaComment");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'document_pk': documentPk,
        'id': id,
        'project_pk': projectPk,
        'visa_pk': visaPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = VisaComment;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a comment
     * Update some fields of a comment  Required scopes: document:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} documentPk A unique integer value identifying this document.
     * @param {Number} id A unique integer value identifying this visa comment.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} visaPk A unique integer value identifying this visa.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedVisaCommentRequest} opts.patchedVisaCommentRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VisaComment}
     */
    updateVisaComment(cloudPk, documentPk, id, projectPk, visaPk, opts) {
      return this.updateVisaCommentWithHttpInfo(cloudPk, documentPk, id, projectPk, visaPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
