/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * OpenAPI spec version: v1
 * Contact: contact@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/WebHook'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/WebHook'));
  } else {
    // Browser globals (root is window)
    if (!root.bimdata) {
      root.bimdata = {};
    }
    root.bimdata.ApplicationApi = factory(root.bimdata.ApiClient, root.bimdata.WebHook);
  }
}(this, function(ApiClient, WebHook) {
  'use strict';

  /**
   * Application service.
   * @module api/ApplicationApi
   * @version 0.0.0
   */

  /**
   * Constructs a new ApplicationApi. 
   * @alias module:api/ApplicationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a new Webhook
     * Create a new Webhook Required scopes: webhook:manage
     * @param {String} cloudPk 
     * @param {module:model/WebHook} webHook 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WebHook} and HTTP response
     */
    this.createWebHookWithHttpInfo = function(cloudPk, webHook) {
      var postBody = webHook;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createWebHook");
      }

      // verify the required parameter 'webHook' is set
      if (webHook === undefined || webHook === null) {
        throw new Error("Missing the required parameter 'webHook' when calling createWebHook");
      }


      var pathParams = {
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WebHook;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/webhook', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new Webhook
     * Create a new Webhook Required scopes: webhook:manage
     * @param {String} cloudPk 
     * @param {module:model/WebHook} webHook 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WebHook}
     */
    this.createWebHook = function(cloudPk, webHook) {
      return this.createWebHookWithHttpInfo(cloudPk, webHook)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a webhook
     * Delete a webhook Required scopes: webhook:manage
     * @param {String} cloudPk 
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteWebHookWithHttpInfo = function(cloudPk, id) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteWebHook");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteWebHook");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/webhook/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a webhook
     * Delete a webhook Required scopes: webhook:manage
     * @param {String} cloudPk 
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteWebHook = function(cloudPk, id) {
      return this.deleteWebHookWithHttpInfo(cloudPk, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all field of a webhook
     * Update all field of a webhook Required scopes: webhook:manage
     * @param {String} cloudPk 
     * @param {String} id 
     * @param {module:model/WebHook} webHook 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WebHook} and HTTP response
     */
    this.fullUpdateWebHookWithHttpInfo = function(cloudPk, id, webHook) {
      var postBody = webHook;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateWebHook");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateWebHook");
      }

      // verify the required parameter 'webHook' is set
      if (webHook === undefined || webHook === null) {
        throw new Error("Missing the required parameter 'webHook' when calling fullUpdateWebHook");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WebHook;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/webhook/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update all field of a webhook
     * Update all field of a webhook Required scopes: webhook:manage
     * @param {String} cloudPk 
     * @param {String} id 
     * @param {module:model/WebHook} webHook 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WebHook}
     */
    this.fullUpdateWebHook = function(cloudPk, id, webHook) {
      return this.fullUpdateWebHookWithHttpInfo(cloudPk, id, webHook)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one configured webhook
     * Retrieve one configured webhook Required scopes: webhook:manage
     * @param {String} cloudPk 
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WebHook} and HTTP response
     */
    this.getWebHookWithHttpInfo = function(cloudPk, id) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getWebHook");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWebHook");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WebHook;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/webhook/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve one configured webhook
     * Retrieve one configured webhook Required scopes: webhook:manage
     * @param {String} cloudPk 
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WebHook}
     */
    this.getWebHook = function(cloudPk, id) {
      return this.getWebHookWithHttpInfo(cloudPk, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all configured webhooks
     * Retrieve all configured webhooks Required scopes: webhook:manage
     * @param {String} cloudPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/WebHook>} and HTTP response
     */
    this.getWebHooksWithHttpInfo = function(cloudPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getWebHooks");
      }


      var pathParams = {
        'cloud_pk': cloudPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [WebHook];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/webhook', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all configured webhooks
     * Retrieve all configured webhooks Required scopes: webhook:manage
     * @param {String} cloudPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/WebHook>}
     */
    this.getWebHooks = function(cloudPk) {
      return this.getWebHooksWithHttpInfo(cloudPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Test a webhook
     * Trigger a Ping Event sending {\&quot;ok\&quot;: true} to the webhook URL. Useful to test your app Required scopes: webhook:manage
     * @param {String} cloudPk 
     * @param {String} id 
     * @param {module:model/WebHook} webHook 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WebHook} and HTTP response
     */
    this.pingWebHookWithHttpInfo = function(cloudPk, id, webHook) {
      var postBody = webHook;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling pingWebHook");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling pingWebHook");
      }

      // verify the required parameter 'webHook' is set
      if (webHook === undefined || webHook === null) {
        throw new Error("Missing the required parameter 'webHook' when calling pingWebHook");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WebHook;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/webhook/{id}/ping', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Test a webhook
     * Trigger a Ping Event sending {\&quot;ok\&quot;: true} to the webhook URL. Useful to test your app Required scopes: webhook:manage
     * @param {String} cloudPk 
     * @param {String} id 
     * @param {module:model/WebHook} webHook 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WebHook}
     */
    this.pingWebHook = function(cloudPk, id, webHook) {
      return this.pingWebHookWithHttpInfo(cloudPk, id, webHook)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some field of a webhook
     * Update some field of a webhook Required scopes: webhook:manage
     * @param {String} cloudPk 
     * @param {String} id 
     * @param {module:model/WebHook} webHook 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WebHook} and HTTP response
     */
    this.updateWebHookWithHttpInfo = function(cloudPk, id, webHook) {
      var postBody = webHook;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateWebHook");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWebHook");
      }

      // verify the required parameter 'webHook' is set
      if (webHook === undefined || webHook === null) {
        throw new Error("Missing the required parameter 'webHook' when calling updateWebHook");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WebHook;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/webhook/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update some field of a webhook
     * Update some field of a webhook Required scopes: webhook:manage
     * @param {String} cloudPk 
     * @param {String} id 
     * @param {module:model/WebHook} webHook 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WebHook}
     */
    this.updateWebHook = function(cloudPk, id, webHook) {
      return this.updateWebHookWithHttpInfo(cloudPk, id, webHook)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
