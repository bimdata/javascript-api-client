/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Classification from '../model/Classification';
import Element from '../model/Element';
import ElementClassificationRelation from '../model/ElementClassificationRelation';
import ElementPropertySetRelation from '../model/ElementPropertySetRelation';
import Ifc from '../model/Ifc';
import IfcExport from '../model/IfcExport';
import IfcFiles from '../model/IfcFiles';
import ProcessorHandler from '../model/ProcessorHandler';
import Property from '../model/Property';
import PropertyDefinition from '../model/PropertyDefinition';
import PropertySet from '../model/PropertySet';
import RawElements from '../model/RawElements';
import Space from '../model/Space';
import Unit from '../model/Unit';
import Zone from '../model/Zone';
import ZoneSpace from '../model/ZoneSpace';

/**
* Ifc service.
* @module api/IfcApi
* @version v1
*/
export default class IfcApi {

    /**
    * Constructs a new IfcApi. 
    * @alias module:api/IfcApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bulkDeleteIfcClassifications operation.
     * @callback module:api/IfcApi~bulkDeleteIfcClassificationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove all classifications from model's elements
     *              Delete relation between filtered classifications (eg. /classifications?name=untec) and all ifc's elements.             No classification will be deleted on this endpoint, only the relation between ifc's elements and their classification.          Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~bulkDeleteIfcClassificationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bulkDeleteIfcClassifications(cloudPk, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeleteIfcClassifications");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkDeleteIfcClassifications");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeleteIfcClassifications");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/list_destroy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkDeleteIfcProperties operation.
     * @callback module:api/IfcApi~bulkDeleteIfcPropertiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete many Property of a model
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~bulkDeleteIfcPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bulkDeleteIfcProperties(cloudPk, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeleteIfcProperties");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkDeleteIfcProperties");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeleteIfcProperties");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_destroy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkDeleteIfcPropertyDefinitions operation.
     * @callback module:api/IfcApi~bulkDeleteIfcPropertyDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete many PropertyDefinitions of a model
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~bulkDeleteIfcPropertyDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bulkDeleteIfcPropertyDefinitions(cloudPk, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeleteIfcPropertyDefinitions");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkDeleteIfcPropertyDefinitions");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeleteIfcPropertyDefinitions");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/bulk_destroy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkDeleteIfcUnits operation.
     * @callback module:api/IfcApi~bulkDeleteIfcUnitsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete many Units of a model
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~bulkDeleteIfcUnitsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bulkDeleteIfcUnits(cloudPk, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeleteIfcUnits");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkDeleteIfcUnits");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeleteIfcUnits");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/bulk_destroy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkDeletePropertySet operation.
     * @callback module:api/IfcApi~bulkDeletePropertySetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete many PropertySet of a model
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~bulkDeletePropertySetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bulkDeletePropertySet(cloudPk, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeletePropertySet");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkDeletePropertySet");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeletePropertySet");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/bulk_destroy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkFullUpdateElements operation.
     * @callback module:api/IfcApi~bulkFullUpdateElementsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Element>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update many elements at once (only changing fields may be defined)
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/Element>} data 
     * @param {module:api/IfcApi~bulkFullUpdateElementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Element>}
     */
    bulkFullUpdateElements(cloudPk, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkFullUpdateElements");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkFullUpdateElements");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkFullUpdateElements");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bulkFullUpdateElements");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Element];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/bulk_update', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkFullUpdateIfcProperty operation.
     * @callback module:api/IfcApi~bulkFullUpdateIfcPropertyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Property>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update some fields of many properties of a model
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/Property>} data 
     * @param {module:api/IfcApi~bulkFullUpdateIfcPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Property>}
     */
    bulkFullUpdateIfcProperty(cloudPk, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkFullUpdateIfcProperty");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkFullUpdateIfcProperty");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkFullUpdateIfcProperty");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bulkFullUpdateIfcProperty");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Property];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_update', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkRemoveClassificationsOfElement operation.
     * @callback module:api/IfcApi~bulkRemoveClassificationsOfElementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove many classifications from an element
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~bulkRemoveClassificationsOfElementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bulkRemoveClassificationsOfElement(cloudPk, elementUuid, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkRemoveClassificationsOfElement");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling bulkRemoveClassificationsOfElement");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkRemoveClassificationsOfElement");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkRemoveClassificationsOfElement");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification/bulk_destroy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkRemoveElementsFromClassification operation.
     * @callback module:api/IfcApi~bulkRemoveElementsFromClassificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the classifications from all elements
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcClassificationPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~bulkRemoveElementsFromClassificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bulkRemoveElementsFromClassification(cloudPk, ifcClassificationPk, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkRemoveElementsFromClassification");
      }
      // verify the required parameter 'ifcClassificationPk' is set
      if (ifcClassificationPk === undefined || ifcClassificationPk === null) {
        throw new Error("Missing the required parameter 'ifcClassificationPk' when calling bulkRemoveElementsFromClassification");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkRemoveElementsFromClassification");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkRemoveElementsFromClassification");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_classification_pk': ifcClassificationPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{ifc_classification_pk}/element/bulk_destroy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkUpdateElements operation.
     * @callback module:api/IfcApi~bulkUpdateElementsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Element>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update many elements at once (all field must be defined)
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/Element>} data 
     * @param {module:api/IfcApi~bulkUpdateElementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Element>}
     */
    bulkUpdateElements(cloudPk, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkUpdateElements");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkUpdateElements");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkUpdateElements");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bulkUpdateElements");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Element];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/bulk_update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkUpdateIfcProperty operation.
     * @callback module:api/IfcApi~bulkUpdateIfcPropertyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Property>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields of many properties of a model
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/Property>} data 
     * @param {module:api/IfcApi~bulkUpdateIfcPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Property>}
     */
    bulkUpdateIfcProperty(cloudPk, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkUpdateIfcProperty");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkUpdateIfcProperty");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkUpdateIfcProperty");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bulkUpdateIfcProperty");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Property];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudProjectIfcProcessorhandlerPartialUpdate operation.
     * @callback module:api/IfcApi~cloudProjectIfcProcessorhandlerPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessorHandler} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this processor handler.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/ProcessorHandler} data 
     * @param {module:api/IfcApi~cloudProjectIfcProcessorhandlerPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessorHandler}
     */
    cloudProjectIfcProcessorhandlerPartialUpdate(cloudPk, id, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling cloudProjectIfcProcessorhandlerPartialUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudProjectIfcProcessorhandlerPartialUpdate");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling cloudProjectIfcProcessorhandlerPartialUpdate");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling cloudProjectIfcProcessorhandlerPartialUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling cloudProjectIfcProcessorhandlerPartialUpdate");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProcessorHandler;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createClassificationElementRelations operation.
     * @callback module:api/IfcApi~createClassificationElementRelationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create association between existing classification and existing element
     * Create association between existing classification and existing element Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/ElementClassificationRelation>} data 
     * @param {module:api/IfcApi~createClassificationElementRelationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createClassificationElementRelations(cloudPk, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createClassificationElementRelations");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createClassificationElementRelations");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createClassificationElementRelations");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createClassificationElementRelations");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification-element', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createClassificationsOfElement operation.
     * @callback module:api/IfcApi~createClassificationsOfElementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Classification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create one or many classifications to an element
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Classification} data 
     * @param {module:api/IfcApi~createClassificationsOfElementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Classification}
     */
    createClassificationsOfElement(cloudPk, elementUuid, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createClassificationsOfElement");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createClassificationsOfElement");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createClassificationsOfElement");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createClassificationsOfElement");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createClassificationsOfElement");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Classification;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createElement operation.
     * @callback module:api/IfcApi~createElementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Element} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an element in the model
     * The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Element} data 
     * @param {module:api/IfcApi~createElementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Element}
     */
    createElement(cloudPk, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElement");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createElement");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElement");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createElement");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Element;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createElementPropertySet operation.
     * @callback module:api/IfcApi~createElementPropertySetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertySet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a PropertySets to an element
     * Create a PropertySets that will be automatically linked to the element Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PropertySet} data 
     * @param {module:api/IfcApi~createElementPropertySetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertySet}
     */
    createElementPropertySet(cloudPk, elementUuid, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElementPropertySet");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createElementPropertySet");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createElementPropertySet");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElementPropertySet");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createElementPropertySet");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PropertySet;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createElementPropertySetProperty operation.
     * @callback module:api/IfcApi~createElementPropertySetPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Property} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a property to a PropertySet
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertysetPk 
     * @param {module:model/Property} data 
     * @param {module:api/IfcApi~createElementPropertySetPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Property}
     */
    createElementPropertySetProperty(cloudPk, elementUuid, ifcPk, projectPk, propertysetPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElementPropertySetProperty");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createElementPropertySetProperty");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createElementPropertySetProperty");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElementPropertySetProperty");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling createElementPropertySetProperty");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createElementPropertySetProperty");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Property;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createElementPropertySetPropertyDefinition operation.
     * @callback module:api/IfcApi~createElementPropertySetPropertyDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Definition to a Property
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @param {module:model/PropertyDefinition} data 
     * @param {module:api/IfcApi~createElementPropertySetPropertyDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyDefinition}
     */
    createElementPropertySetPropertyDefinition(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertysetPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling createElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling createElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createElementPropertySetPropertyDefinition");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PropertyDefinition;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createElementPropertySetPropertyDefinitionUnit operation.
     * @callback module:api/IfcApi~createElementPropertySetPropertyDefinitionUnitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Unit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Unit to a Definition
     * Create a Unit to a Definition Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertydefinitionPk 
     * @param {String} propertysetPk 
     * @param {module:model/Unit} data 
     * @param {module:api/IfcApi~createElementPropertySetPropertyDefinitionUnitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Unit}
     */
    createElementPropertySetPropertyDefinitionUnit(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling createElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'propertydefinitionPk' is set
      if (propertydefinitionPk === undefined || propertydefinitionPk === null) {
        throw new Error("Missing the required parameter 'propertydefinitionPk' when calling createElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling createElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createElementPropertySetPropertyDefinitionUnit");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertydefinition_pk': propertydefinitionPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Unit;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createIfcPropertyDefinition operation.
     * @callback module:api/IfcApi~createIfcPropertyDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a PropertyDefinition on the model
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PropertyDefinition} data 
     * @param {module:api/IfcApi~createIfcPropertyDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyDefinition}
     */
    createIfcPropertyDefinition(cloudPk, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createIfcPropertyDefinition");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createIfcPropertyDefinition");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createIfcPropertyDefinition");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createIfcPropertyDefinition");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PropertyDefinition;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createIfcUnit operation.
     * @callback module:api/IfcApi~createIfcUnitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Unit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Unit on a model
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Unit} data 
     * @param {module:api/IfcApi~createIfcUnitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Unit}
     */
    createIfcUnit(cloudPk, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createIfcUnit");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createIfcUnit");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createIfcUnit");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createIfcUnit");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Unit;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPropertySet operation.
     * @callback module:api/IfcApi~createPropertySetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertySet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a PropertySet
     * Create a PropertySet Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PropertySet} data 
     * @param {module:api/IfcApi~createPropertySetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertySet}
     */
    createPropertySet(cloudPk, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createPropertySet");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createPropertySet");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createPropertySet");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createPropertySet");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PropertySet;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPropertySetElementRelations operation.
     * @callback module:api/IfcApi~createPropertySetElementRelationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create association between PropertySet and element
     * Create association between existing PropertySet and existing element Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/ElementPropertySetRelation>} data 
     * @param {module:api/IfcApi~createPropertySetElementRelationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createPropertySetElementRelations(cloudPk, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createPropertySetElementRelations");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createPropertySetElementRelations");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createPropertySetElementRelations");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createPropertySetElementRelations");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset-element', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRawElements operation.
     * @callback module:api/IfcApi~createRawElementsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create elements in an optimized format
     *          You can use the same optimized structure to post multiple elements, property_sets, properties, definitions and units at once.         If the structure is malformed, an error 500 without more explaination may be returned          Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/RawElements} data 
     * @param {module:api/IfcApi~createRawElementsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createRawElements(cloudPk, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createRawElements");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createRawElements");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createRawElements");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createRawElements");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/raw', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSpace operation.
     * @callback module:api/IfcApi~createSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Space} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a space in the model
     * The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Space} data 
     * @param {module:api/IfcApi~createSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Space}
     */
    createSpace(cloudPk, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createSpace");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createSpace");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createSpace");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createSpace");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Space;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createZone operation.
     * @callback module:api/IfcApi~createZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Zone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a zone in the model
     * The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Zone} data 
     * @param {module:api/IfcApi~createZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Zone}
     */
    createZone(cloudPk, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createZone");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createZone");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createZone");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createZone");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Zone;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createZoneSpace operation.
     * @callback module:api/IfcApi~createZoneSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ZoneSpace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a space in a zone
     * The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @param {module:model/ZoneSpace} data 
     * @param {module:api/IfcApi~createZoneSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ZoneSpace}
     */
    createZoneSpace(cloudPk, ifcPk, projectPk, zonePk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createZoneSpace");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createZoneSpace");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createZoneSpace");
      }
      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling createZoneSpace");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createZoneSpace");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'zone_pk': zonePk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ZoneSpace;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteElement operation.
     * @callback module:api/IfcApi~deleteElementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a zone of a model
     * The IFC file will not be updated. The remaining elements are available in API and will be available when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @param {module:api/IfcApi~deleteElementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteElement(cloudPk, ifcPk, projectPk, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteElement");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteElement");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteElement");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteElement");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIfc operation.
     * @callback module:api/IfcApi~deleteIfcCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a model
     * It will delete the related document too Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @param {module:api/IfcApi~deleteIfcCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIfc(cloudPk, id, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteIfc");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteIfc");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteIfc");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIfcProperty operation.
     * @callback module:api/IfcApi~deleteIfcPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Property of a model
     * Delete a Property of a model Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~deleteIfcPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIfcProperty(cloudPk, id, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteIfcProperty");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteIfcProperty");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteIfcProperty");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteIfcProperty");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIfcPropertyDefinition operation.
     * @callback module:api/IfcApi~deleteIfcPropertyDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a PropertyDefinitions of a model
     * Delete a PropertyDefinitions of a model Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~deleteIfcPropertyDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIfcPropertyDefinition(cloudPk, id, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteIfcPropertyDefinition");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteIfcPropertyDefinition");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteIfcPropertyDefinition");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteIfcPropertyDefinition");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIfcUnit operation.
     * @callback module:api/IfcApi~deleteIfcUnitCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Unit of a model
     * Delete a Unit of a model Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~deleteIfcUnitCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIfcUnit(cloudPk, id, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteIfcUnit");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteIfcUnit");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteIfcUnit");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteIfcUnit");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePropertySet operation.
     * @callback module:api/IfcApi~deletePropertySetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a PropertySet of a model
     * Delete a PropertySet of a model Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~deletePropertySetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePropertySet(cloudPk, id, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deletePropertySet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePropertySet");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deletePropertySet");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deletePropertySet");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSpace operation.
     * @callback module:api/IfcApi~deleteSpaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a space
     * It will not delete related zones. The IFC file will not be updated. The remaining spaces are available in API and will be available when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~deleteSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSpace(cloudPk, id, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteSpace");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSpace");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteSpace");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteSpace");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteZone operation.
     * @callback module:api/IfcApi~deleteZoneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a zone of a model
     * The IFC file will not be updated. The remaining zones are available in API and will be available when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this zone.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~deleteZoneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteZone(cloudPk, id, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteZone");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteZone");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteZone");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteZone");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteZoneSpace operation.
     * @callback module:api/IfcApi~deleteZoneSpaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a space of a zone
     * The IFC file will not be updated. The remaining spaces are available in API and will be available when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @param {module:api/IfcApi~deleteZoneSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteZoneSpace(cloudPk, id, ifcPk, projectPk, zonePk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteZoneSpace");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteZoneSpace");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteZoneSpace");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteZoneSpace");
      }
      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling deleteZoneSpace");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'zone_pk': zonePk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportIfc operation.
     * @callback module:api/IfcApi~exportIfcCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IfcExport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export IFC
     * Export IFC as requested in parameters. This call doesn't return the IFC. When the export is finished, a new IFC file with '_export_DD_MM_YYYY' suffix will be created in the same folder than the original IFC. You can query the folder or subscribe to the new document webhook to retrieve the result Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @param {module:model/IfcExport} data 
     * @param {module:api/IfcApi~exportIfcCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IfcExport}
     */
    exportIfc(cloudPk, id, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling exportIfc");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportIfc");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling exportIfc");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling exportIfc");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IfcExport;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateElement operation.
     * @callback module:api/IfcApi~fullUpdateElementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Element} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields of an element
     * Update all fields of a element. The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @param {module:model/Element} data 
     * @param {module:api/IfcApi~fullUpdateElementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Element}
     */
    fullUpdateElement(cloudPk, ifcPk, projectPk, uuid, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateElement");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateElement");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateElement");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling fullUpdateElement");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateElement");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Element;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateIfc operation.
     * @callback module:api/IfcApi~fullUpdateIfcCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ifc} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields of a model
     * Update all fields of a model Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @param {module:model/Ifc} data 
     * @param {module:api/IfcApi~fullUpdateIfcCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ifc}
     */
    fullUpdateIfc(cloudPk, id, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateIfc");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateIfc");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateIfc");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateIfc");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Ifc;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateIfcProperty operation.
     * @callback module:api/IfcApi~fullUpdateIfcPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Property} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update some fields of a Property
     * Update some fields of a Property Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Property} data 
     * @param {module:api/IfcApi~fullUpdateIfcPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Property}
     */
    fullUpdateIfcProperty(cloudPk, id, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateIfcProperty");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateIfcProperty");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateIfcProperty");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateIfcProperty");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateIfcProperty");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Property;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateIfcPropertyDefinition operation.
     * @callback module:api/IfcApi~fullUpdateIfcPropertyDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields of many PropertyDefinitions of a model
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PropertyDefinition} data 
     * @param {module:api/IfcApi~fullUpdateIfcPropertyDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyDefinition}
     */
    fullUpdateIfcPropertyDefinition(cloudPk, id, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateIfcPropertyDefinition");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateIfcPropertyDefinition");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateIfcPropertyDefinition");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateIfcPropertyDefinition");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateIfcPropertyDefinition");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PropertyDefinition;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateIfcUnit operation.
     * @callback module:api/IfcApi~fullUpdateIfcUnitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Unit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields of a Unit of a model
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Unit} data 
     * @param {module:api/IfcApi~fullUpdateIfcUnitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Unit}
     */
    fullUpdateIfcUnit(cloudPk, id, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateIfcUnit");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateIfcUnit");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateIfcUnit");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateIfcUnit");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateIfcUnit");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Unit;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdatePropertySet operation.
     * @callback module:api/IfcApi~fullUpdatePropertySetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertySet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields of a PropertySet
     * Update all fields of a PropertySet Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PropertySet} data 
     * @param {module:api/IfcApi~fullUpdatePropertySetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertySet}
     */
    fullUpdatePropertySet(cloudPk, id, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdatePropertySet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdatePropertySet");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdatePropertySet");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdatePropertySet");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdatePropertySet");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PropertySet;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateSpace operation.
     * @callback module:api/IfcApi~fullUpdateSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Space} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields of a space
     * Update all fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Space} data 
     * @param {module:api/IfcApi~fullUpdateSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Space}
     */
    fullUpdateSpace(cloudPk, id, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateSpace");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateSpace");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateSpace");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateSpace");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateSpace");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Space;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateZone operation.
     * @callback module:api/IfcApi~fullUpdateZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Zone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields of a zone
     * Update all fields of a zone. The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this zone.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Zone} data 
     * @param {module:api/IfcApi~fullUpdateZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Zone}
     */
    fullUpdateZone(cloudPk, id, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateZone");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateZone");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateZone");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateZone");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateZone");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Zone;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullUpdateZoneSpace operation.
     * @callback module:api/IfcApi~fullUpdateZoneSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ZoneSpace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields of a space
     * Update all fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @param {module:model/ZoneSpace} data 
     * @param {module:api/IfcApi~fullUpdateZoneSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ZoneSpace}
     */
    fullUpdateZoneSpace(cloudPk, id, ifcPk, projectPk, zonePk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateZoneSpace");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateZoneSpace");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateZoneSpace");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateZoneSpace");
      }
      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling fullUpdateZoneSpace");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateZoneSpace");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'zone_pk': zonePk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ZoneSpace;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClassificationsOfElement operation.
     * @callback module:api/IfcApi~getClassificationsOfElementCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Classification>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all classifications of an element
     * Retrieve all classifications of an element Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getClassificationsOfElementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Classification>}
     */
    getClassificationsOfElement(cloudPk, elementUuid, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getClassificationsOfElement");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getClassificationsOfElement");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getClassificationsOfElement");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getClassificationsOfElement");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Classification];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getElement operation.
     * @callback module:api/IfcApi~getElementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Element} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an element of a model
     * Retrieve an element of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @param {module:api/IfcApi~getElementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Element}
     */
    getElement(cloudPk, ifcPk, projectPk, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElement");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElement");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElement");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getElement");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Element;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getElementPropertySet operation.
     * @callback module:api/IfcApi~getElementPropertySetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertySet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a PropertySet of an element
     * Retrieve a PropertySet of an element Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getElementPropertySetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertySet}
     */
    getElementPropertySet(cloudPk, elementUuid, id, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySet");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getElementPropertySet");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySet");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySet");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PropertySet;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getElementPropertySetProperties operation.
     * @callback module:api/IfcApi~getElementPropertySetPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Property>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all Properties of a PropertySet
     * Retrieve all Properties of a PropertySet Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertysetPk 
     * @param {module:api/IfcApi~getElementPropertySetPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Property>}
     */
    getElementPropertySetProperties(cloudPk, elementUuid, ifcPk, projectPk, propertysetPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetProperties");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetProperties");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetProperties");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetProperties");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetProperties");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Property];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getElementPropertySetProperty operation.
     * @callback module:api/IfcApi~getElementPropertySetPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Property} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Property of a PropertySet
     * Retrieve a Property of a PropertySet Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertysetPk 
     * @param {module:api/IfcApi~getElementPropertySetPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Property}
     */
    getElementPropertySetProperty(cloudPk, elementUuid, id, ifcPk, projectPk, propertysetPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetProperty");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetProperty");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getElementPropertySetProperty");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetProperty");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetProperty");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetProperty");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Property;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getElementPropertySetPropertyDefinition operation.
     * @callback module:api/IfcApi~getElementPropertySetPropertyDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Definition of a Property
     * Retrieve a Definition of a Property Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @param {module:api/IfcApi~getElementPropertySetPropertyDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyDefinition}
     */
    getElementPropertySetPropertyDefinition(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertysetPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling getElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetPropertyDefinition");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PropertyDefinition;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getElementPropertySetPropertyDefinitionUnit operation.
     * @callback module:api/IfcApi~getElementPropertySetPropertyDefinitionUnitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Unit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Unit of a Definition
     * Retrieve a Unit of a Definition Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertydefinitionPk 
     * @param {String} propertysetPk 
     * @param {module:api/IfcApi~getElementPropertySetPropertyDefinitionUnitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Unit}
     */
    getElementPropertySetPropertyDefinitionUnit(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling getElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'propertydefinitionPk' is set
      if (propertydefinitionPk === undefined || propertydefinitionPk === null) {
        throw new Error("Missing the required parameter 'propertydefinitionPk' when calling getElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetPropertyDefinitionUnit");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertydefinition_pk': propertydefinitionPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Unit;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getElementPropertySetPropertyDefinitionUnits operation.
     * @callback module:api/IfcApi~getElementPropertySetPropertyDefinitionUnitsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Unit>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all Units of a Definition
     * Retrieve all Units of a Definition Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertydefinitionPk 
     * @param {String} propertysetPk 
     * @param {module:api/IfcApi~getElementPropertySetPropertyDefinitionUnitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Unit>}
     */
    getElementPropertySetPropertyDefinitionUnits(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetPropertyDefinitionUnits");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetPropertyDefinitionUnits");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetPropertyDefinitionUnits");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetPropertyDefinitionUnits");
      }
      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling getElementPropertySetPropertyDefinitionUnits");
      }
      // verify the required parameter 'propertydefinitionPk' is set
      if (propertydefinitionPk === undefined || propertydefinitionPk === null) {
        throw new Error("Missing the required parameter 'propertydefinitionPk' when calling getElementPropertySetPropertyDefinitionUnits");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetPropertyDefinitionUnits");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertydefinition_pk': propertydefinitionPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Unit];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getElementPropertySetPropertyDefinitions operation.
     * @callback module:api/IfcApi~getElementPropertySetPropertyDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PropertyDefinition>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all Definitions of a PropertySet
     * Retrieve all Definitions of a PropertySet Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @param {module:api/IfcApi~getElementPropertySetPropertyDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PropertyDefinition>}
     */
    getElementPropertySetPropertyDefinitions(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertysetPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetPropertyDefinitions");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetPropertyDefinitions");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetPropertyDefinitions");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetPropertyDefinitions");
      }
      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling getElementPropertySetPropertyDefinitions");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetPropertyDefinitions");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PropertyDefinition];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getElementPropertySets operation.
     * @callback module:api/IfcApi~getElementPropertySetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PropertySet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all PropertySets of an element
     * Retrieve all PropertySets of an element Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getElementPropertySetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PropertySet>}
     */
    getElementPropertySets(cloudPk, elementUuid, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySets");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySets");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySets");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySets");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PropertySet];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getElements operation.
     * @callback module:api/IfcApi~getElementsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Element>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all elements of a model
     * Retrieve all elements of a model. If not filtered, the json may be very large. To efficently retrieve all elements and their data, see getRawElements Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter the returned list by type
     * @param {String} opts.classification Filter the returned list by classification
     * @param {String} opts.classificationNotation Filter the returned list by classification__notation
     * @param {module:api/IfcApi~getElementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Element>}
     */
    getElements(cloudPk, ifcPk, projectPk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElements");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElements");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElements");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
        'type': opts['type'],
        'classification': opts['classification'],
        'classification__notation': opts['classificationNotation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Element];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getElementsFromClassification operation.
     * @callback module:api/IfcApi~getElementsFromClassificationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Element>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all elements with the classification
     * Retrieve all elements with the classification Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcClassificationPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getElementsFromClassificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Element>}
     */
    getElementsFromClassification(cloudPk, ifcClassificationPk, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementsFromClassification");
      }
      // verify the required parameter 'ifcClassificationPk' is set
      if (ifcClassificationPk === undefined || ifcClassificationPk === null) {
        throw new Error("Missing the required parameter 'ifcClassificationPk' when calling getElementsFromClassification");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementsFromClassification");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementsFromClassification");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_classification_pk': ifcClassificationPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Element];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{ifc_classification_pk}/element', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfc operation.
     * @callback module:api/IfcApi~getIfcCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ifc} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve one model
     *  Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getIfcCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ifc}
     */
    getIfc(cloudPk, id, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfc");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfc");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfc");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Ifc;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcBVH operation.
     * @callback module:api/IfcApi~getIfcBVHCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get svg file
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the map file          Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getIfcBVHCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIfcBVH(cloudPk, id, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcBVH");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcBVH");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcBVH");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/map', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcClassifications operation.
     * @callback module:api/IfcApi~getIfcClassificationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Classification>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all classifications in a model
     * Retrieve all classifications in a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getIfcClassificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Classification>}
     */
    getIfcClassifications(cloudPk, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcClassifications");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcClassifications");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcClassifications");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Classification];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcGLTF operation.
     * @callback module:api/IfcApi~getIfcGLTFCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get gltf file
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the gltf file          Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getIfcGLTFCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIfcGLTF(cloudPk, id, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcGLTF");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcGLTF");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcGLTF");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/gltf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcMap operation.
     * @callback module:api/IfcApi~getIfcMapCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get bvh file
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the bvh file          Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getIfcMapCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIfcMap(cloudPk, id, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcMap");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcMap");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcMap");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/bvh', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcProperties operation.
     * @callback module:api/IfcApi~getIfcPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Property>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all Properties of a model
     * Retrieve all PropertySets of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getIfcPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Property>}
     */
    getIfcProperties(cloudPk, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcProperties");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcProperties");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcProperties");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Property];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcProperty operation.
     * @callback module:api/IfcApi~getIfcPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Property} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Property of a model
     * Retrieve a Property of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getIfcPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Property}
     */
    getIfcProperty(cloudPk, id, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcProperty");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcProperty");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcProperty");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcProperty");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Property;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcPropertyDefinition operation.
     * @callback module:api/IfcApi~getIfcPropertyDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a PropertyDefinition of a model
     * Retrieve a PropertyDefinition of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getIfcPropertyDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyDefinition}
     */
    getIfcPropertyDefinition(cloudPk, id, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcPropertyDefinition");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcPropertyDefinition");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcPropertyDefinition");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcPropertyDefinition");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PropertyDefinition;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcPropertyDefinitions operation.
     * @callback module:api/IfcApi~getIfcPropertyDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PropertyDefinition>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all PropertyDefinitions of a model
     * Retrieve all PropertyDefinitions of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getIfcPropertyDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PropertyDefinition>}
     */
    getIfcPropertyDefinitions(cloudPk, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcPropertyDefinitions");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcPropertyDefinitions");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcPropertyDefinitions");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PropertyDefinition];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcStructure operation.
     * @callback module:api/IfcApi~getIfcStructureCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get structure file
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the structure file          Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getIfcStructureCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIfcStructure(cloudPk, id, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcStructure");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcStructure");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcStructure");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/structure', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcSystems operation.
     * @callback module:api/IfcApi~getIfcSystemsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get systems file
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the system file          Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getIfcSystemsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIfcSystems(cloudPk, id, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcSystems");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcSystems");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcSystems");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/systems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcUnit operation.
     * @callback module:api/IfcApi~getIfcUnitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Unit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Unit of a model
     * Retrieve a Unit of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getIfcUnitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Unit}
     */
    getIfcUnit(cloudPk, id, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcUnit");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcUnit");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcUnit");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcUnit");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Unit;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcUnits operation.
     * @callback module:api/IfcApi~getIfcUnitsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Unit>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all Units of a model
     * Retrieve all Units of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getIfcUnitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Unit>}
     */
    getIfcUnits(cloudPk, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcUnits");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcUnits");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcUnits");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Unit];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIfcs operation.
     * @callback module:api/IfcApi~getIfcsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Ifc>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all models
     * Retrieve all models Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.status Filter the returned list by status
     * @param {module:api/IfcApi~getIfcsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Ifc>}
     */
    getIfcs(cloudPk, projectPk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcs");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcs");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Ifc];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProcessorHandler operation.
     * @callback module:api/IfcApi~getProcessorHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessorHandler} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a processor handler
     *  Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this processor handler.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getProcessorHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessorHandler}
     */
    getProcessorHandler(cloudPk, id, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getProcessorHandler");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProcessorHandler");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getProcessorHandler");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getProcessorHandler");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessorHandler;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProcessorHandlers operation.
     * @callback module:api/IfcApi~getProcessorHandlersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProcessorHandler>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all processor handlers
     *  Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getProcessorHandlersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProcessorHandler>}
     */
    getProcessorHandlers(cloudPk, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getProcessorHandlers");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getProcessorHandlers");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getProcessorHandlers");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProcessorHandler];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPropertySet operation.
     * @callback module:api/IfcApi~getPropertySetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertySet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a PropertySet of a model
     * Retrieve a PropertySet of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getPropertySetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertySet}
     */
    getPropertySet(cloudPk, id, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getPropertySet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPropertySet");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getPropertySet");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getPropertySet");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PropertySet;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPropertySets operation.
     * @callback module:api/IfcApi~getPropertySetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PropertySet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all PropertySets of a model
     * Retrieve all PropertySets of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getPropertySetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PropertySet>}
     */
    getPropertySets(cloudPk, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getPropertySets");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getPropertySets");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getPropertySets");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PropertySet];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRawElements operation.
     * @callback module:api/IfcApi~getRawElementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RawElements} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all elements in a optimized format
     *          Returns elements, property_sets, properties, definitions and units in a JSON optimized structure          Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter the returned list by type
     * @param {String} opts.classification Filter the returned list by classification
     * @param {String} opts.classificationNotation Filter the returned list by classification__notation
     * @param {module:api/IfcApi~getRawElementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RawElements}
     */
    getRawElements(cloudPk, ifcPk, projectPk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRawElements");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getRawElements");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRawElements");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
        'type': opts['type'],
        'classification': opts['classification'],
        'classification__notation': opts['classificationNotation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RawElements;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/raw', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpace operation.
     * @callback module:api/IfcApi~getSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Space} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve one space of the model
     * Retrieve one space of the model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Space}
     */
    getSpace(cloudPk, id, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getSpace");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSpace");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getSpace");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getSpace");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Space;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpaces operation.
     * @callback module:api/IfcApi~getSpacesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Space>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all spaces of the model
     * Retrieve all spaces of the model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getSpacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Space>}
     */
    getSpaces(cloudPk, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getSpaces");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getSpaces");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getSpaces");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Space];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getZone operation.
     * @callback module:api/IfcApi~getZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Zone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve one zone of a model
     * Retrieve one zone of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this zone.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~getZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Zone}
     */
    getZone(cloudPk, id, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getZone");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getZone");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getZone");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getZone");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Zone;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getZoneSpace operation.
     * @callback module:api/IfcApi~getZoneSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ZoneSpace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve one space of a zone
     * Retrieve one space of a zone Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @param {module:api/IfcApi~getZoneSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ZoneSpace}
     */
    getZoneSpace(cloudPk, id, ifcPk, projectPk, zonePk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getZoneSpace");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getZoneSpace");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getZoneSpace");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getZoneSpace");
      }
      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling getZoneSpace");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'zone_pk': zonePk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ZoneSpace;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getZoneSpaces operation.
     * @callback module:api/IfcApi~getZoneSpacesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ZoneSpace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all spaces of a zone
     * Retrieve all spaces of a zone Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @param {module:api/IfcApi~getZoneSpacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ZoneSpace>}
     */
    getZoneSpaces(cloudPk, ifcPk, projectPk, zonePk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getZoneSpaces");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getZoneSpaces");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getZoneSpaces");
      }
      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling getZoneSpaces");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'zone_pk': zonePk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ZoneSpace];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getZones operation.
     * @callback module:api/IfcApi~getZonesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Zone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve zones of a model
     * Retrieve parent zones of a model. Children zones we'll be in the 'zones' field Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.color Filter the returned list by color
     * @param {module:api/IfcApi~getZonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Zone>}
     */
    getZones(cloudPk, ifcPk, projectPk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getZones");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getZones");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getZones");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
        'color': opts['color']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Zone];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClassificationElementRelations operation.
     * @callback module:api/IfcApi~listClassificationElementRelationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ElementClassificationRelation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all associations between classifications and elements
     * List all associations between classifications and elements Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~listClassificationElementRelationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ElementClassificationRelation>}
     */
    listClassificationElementRelations(cloudPk, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling listClassificationElementRelations");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling listClassificationElementRelations");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling listClassificationElementRelations");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ElementClassificationRelation];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification-element', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeClassificationOfElement operation.
     * @callback module:api/IfcApi~removeClassificationOfElementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a classification from an element
     * The classification will not be deleted Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this classification.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~removeClassificationOfElementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeClassificationOfElement(cloudPk, elementUuid, id, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeClassificationOfElement");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeClassificationOfElement");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeClassificationOfElement");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeClassificationOfElement");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeClassificationOfElement");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeElementPropertySet operation.
     * @callback module:api/IfcApi~removeElementPropertySetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a PropertySet from an element
     * Delete the relation between the element and the property set. Does not delete any object Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:api/IfcApi~removeElementPropertySetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeElementPropertySet(cloudPk, elementUuid, id, ifcPk, projectPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementPropertySet");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeElementPropertySet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeElementPropertySet");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeElementPropertySet");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementPropertySet");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeElementPropertySetProperty operation.
     * @callback module:api/IfcApi~removeElementPropertySetPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a property from a PropertySet
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertysetPk 
     * @param {module:api/IfcApi~removeElementPropertySetPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeElementPropertySetProperty(cloudPk, elementUuid, id, ifcPk, projectPk, propertysetPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementPropertySetProperty");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeElementPropertySetProperty");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeElementPropertySetProperty");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeElementPropertySetProperty");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementPropertySetProperty");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling removeElementPropertySetProperty");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeElementPropertySetPropertyDefinition operation.
     * @callback module:api/IfcApi~removeElementPropertySetPropertyDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a Definition from a Property
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @param {module:api/IfcApi~removeElementPropertySetPropertyDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeElementPropertySetPropertyDefinition(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertysetPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling removeElementPropertySetPropertyDefinition");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling removeElementPropertySetPropertyDefinition");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeElementPropertySetPropertyDefinitionUnit operation.
     * @callback module:api/IfcApi~removeElementPropertySetPropertyDefinitionUnitCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a Unit from a Definition
     * Remove a Unit from a Definition Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertydefinitionPk 
     * @param {String} propertysetPk 
     * @param {module:api/IfcApi~removeElementPropertySetPropertyDefinitionUnitCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeElementPropertySetPropertyDefinitionUnit(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling removeElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'propertydefinitionPk' is set
      if (propertydefinitionPk === undefined || propertydefinitionPk === null) {
        throw new Error("Missing the required parameter 'propertydefinitionPk' when calling removeElementPropertySetPropertyDefinitionUnit");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling removeElementPropertySetPropertyDefinitionUnit");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertydefinition_pk': propertydefinitionPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeElementsFromClassification operation.
     * @callback module:api/IfcApi~removeElementsFromClassificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the classification from all elements
     * Remove the classification from all elements. No element nor classification will be deleted Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcClassificationPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @param {module:api/IfcApi~removeElementsFromClassificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeElementsFromClassification(cloudPk, ifcClassificationPk, ifcPk, projectPk, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementsFromClassification");
      }
      // verify the required parameter 'ifcClassificationPk' is set
      if (ifcClassificationPk === undefined || ifcClassificationPk === null) {
        throw new Error("Missing the required parameter 'ifcClassificationPk' when calling removeElementsFromClassification");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeElementsFromClassification");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementsFromClassification");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling removeElementsFromClassification");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_classification_pk': ifcClassificationPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{ifc_classification_pk}/element/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateElement operation.
     * @callback module:api/IfcApi~updateElementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Element} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update some fields of a zone
     * Update some fields of a zone. The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @param {module:model/Element} data 
     * @param {module:api/IfcApi~updateElementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Element}
     */
    updateElement(cloudPk, ifcPk, projectPk, uuid, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateElement");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateElement");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateElement");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling updateElement");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateElement");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Element;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIfc operation.
     * @callback module:api/IfcApi~updateIfcCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ifc} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update some fields of a model
     * Update some fields of a model Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @param {module:model/Ifc} data 
     * @param {module:api/IfcApi~updateIfcCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ifc}
     */
    updateIfc(cloudPk, id, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateIfc");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIfc");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateIfc");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateIfc");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Ifc;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIfcFiles operation.
     * @callback module:api/IfcApi~updateIfcFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IfcFiles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update models file (gltf, svg, structure, etc)
     *          Patch ifc files (gltf, structure, svg, etc)          Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {File} opts.structureFile 
     * @param {File} opts.systemsFile 
     * @param {File} opts.mapFile 
     * @param {File} opts.gltfFile 
     * @param {File} opts.bvhTreeFile 
     * @param {File} opts.viewer360File 
     * @param {module:api/IfcApi~updateIfcFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IfcFiles}
     */
    updateIfcFiles(cloudPk, id, projectPk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateIfcFiles");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIfcFiles");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateIfcFiles");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'structure_file': opts['structureFile'],
        'systems_file': opts['systemsFile'],
        'map_file': opts['mapFile'],
        'gltf_file': opts['gltfFile'],
        'bvh_tree_file': opts['bvhTreeFile'],
        'viewer_360_file': opts['viewer360File']
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = IfcFiles;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/files', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIfcProperty operation.
     * @callback module:api/IfcApi~updateIfcPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Property} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update some fields of a Property
     * Update some fields of a Property Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Property} data 
     * @param {module:api/IfcApi~updateIfcPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Property}
     */
    updateIfcProperty(cloudPk, id, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateIfcProperty");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIfcProperty");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateIfcProperty");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateIfcProperty");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateIfcProperty");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Property;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIfcPropertyDefinition operation.
     * @callback module:api/IfcApi~updateIfcPropertyDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update some fields of many PropertyDefinitions of a model
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PropertyDefinition} data 
     * @param {module:api/IfcApi~updateIfcPropertyDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyDefinition}
     */
    updateIfcPropertyDefinition(cloudPk, id, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateIfcPropertyDefinition");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIfcPropertyDefinition");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateIfcPropertyDefinition");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateIfcPropertyDefinition");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateIfcPropertyDefinition");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PropertyDefinition;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIfcUnit operation.
     * @callback module:api/IfcApi~updateIfcUnitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Unit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update some fields of a Unit of a model
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Unit} data 
     * @param {module:api/IfcApi~updateIfcUnitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Unit}
     */
    updateIfcUnit(cloudPk, id, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateIfcUnit");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIfcUnit");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateIfcUnit");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateIfcUnit");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateIfcUnit");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Unit;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProcessorHandler operation.
     * @callback module:api/IfcApi~updateProcessorHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessorHandler} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the status of a processor handler
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this processor handler.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/ProcessorHandler} data 
     * @param {module:api/IfcApi~updateProcessorHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessorHandler}
     */
    updateProcessorHandler(cloudPk, id, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateProcessorHandler");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProcessorHandler");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateProcessorHandler");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateProcessorHandler");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateProcessorHandler");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProcessorHandler;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePropertySet operation.
     * @callback module:api/IfcApi~updatePropertySetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertySet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update some fields of a PropertySet
     * Update some fields of a PropertySet Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PropertySet} data 
     * @param {module:api/IfcApi~updatePropertySetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertySet}
     */
    updatePropertySet(cloudPk, id, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updatePropertySet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePropertySet");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updatePropertySet");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updatePropertySet");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updatePropertySet");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PropertySet;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSpace operation.
     * @callback module:api/IfcApi~updateSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Space} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update some fields of a space
     * Update some fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Space} data 
     * @param {module:api/IfcApi~updateSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Space}
     */
    updateSpace(cloudPk, id, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateSpace");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSpace");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateSpace");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateSpace");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateSpace");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Space;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateZone operation.
     * @callback module:api/IfcApi~updateZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Zone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update some fields of a zone
     * Update some fields of a zone. The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this zone.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Zone} data 
     * @param {module:api/IfcApi~updateZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Zone}
     */
    updateZone(cloudPk, id, ifcPk, projectPk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateZone");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateZone");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateZone");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateZone");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateZone");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Zone;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateZoneSpace operation.
     * @callback module:api/IfcApi~updateZoneSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ZoneSpace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update some fields of a space
     * Update some fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @param {module:model/ZoneSpace} data 
     * @param {module:api/IfcApi~updateZoneSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ZoneSpace}
     */
    updateZoneSpace(cloudPk, id, ifcPk, projectPk, zonePk, data, callback) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateZoneSpace");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateZoneSpace");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateZoneSpace");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateZoneSpace");
      }
      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling updateZoneSpace");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateZoneSpace");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'zone_pk': zonePk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BIMDataConnect', 'Bearer', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ZoneSpace;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
