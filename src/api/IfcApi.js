/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Building from '../model/Building';
import CheckerResult from '../model/CheckerResult';
import Classification from '../model/Classification';
import CreateBuilding from '../model/CreateBuilding';
import CreateModel from '../model/CreateModel';
import Document from '../model/Document';
import DocumentWithElementList from '../model/DocumentWithElementList';
import Element from '../model/Element';
import ElementClassificationRelation from '../model/ElementClassificationRelation';
import ElementPropertySetRelation from '../model/ElementPropertySetRelation';
import IfcAccessToken from '../model/IfcAccessToken';
import IfcChecker from '../model/IfcChecker';
import IfcExport from '../model/IfcExport';
import IfcMerge from '../model/IfcMerge';
import IfcOptimize from '../model/IfcOptimize';
import InlineObject4 from '../model/InlineObject4';
import InlineObject5 from '../model/InlineObject5';
import InlineObject6 from '../model/InlineObject6';
import InlineObject7 from '../model/InlineObject7';
import InlineResponse2002 from '../model/InlineResponse2002';
import Layer from '../model/Layer';
import Material from '../model/Material';
import Model from '../model/Model';
import ModelErrors from '../model/ModelErrors';
import ModelFiles from '../model/ModelFiles';
import PositioningPlan from '../model/PositioningPlan';
import ProcessorHandler from '../model/ProcessorHandler';
import Property from '../model/Property';
import PropertyDefinition from '../model/PropertyDefinition';
import PropertySet from '../model/PropertySet';
import RawElements from '../model/RawElements';
import SimpleElement from '../model/SimpleElement';
import Space from '../model/Space';
import Storey from '../model/Storey';
import System from '../model/System';
import Unit from '../model/Unit';
import Zone from '../model/Zone';
import ZoneSpace from '../model/ZoneSpace';

/**
* Ifc service.
* @module api/IfcApi
* @version 0.0.0
*/
export default class IfcApi {

    /**
    * Constructs a new IfcApi. 
    * @alias module:api/IfcApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add errors to model
     * Model errors are warnings and errors during model process. They alert about missing elements or malformed files Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {String} projectPk 
     * @param {module:model/ModelErrors} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModelErrors} and HTTP response
     */
    addIfcErrorsDeprecatedWithHttpInfo(cloudPk, id, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling addIfcErrorsDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addIfcErrorsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling addIfcErrorsDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling addIfcErrorsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelErrors;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/errors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add errors to model
     * Model errors are warnings and errors during model process. They alert about missing elements or malformed files Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {String} projectPk 
     * @param {module:model/ModelErrors} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModelErrors}
     */
    addIfcErrorsDeprecated(cloudPk, id, projectPk, data) {
      return this.addIfcErrorsDeprecatedWithHttpInfo(cloudPk, id, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove all classifications from model's elements
     *              Delete relation between filtered classifications (eg. /classifications?name=untec) and all mode's elements.             No classification will be deleted on this endpoint, only the relation between model's elements and their classification.  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    bulkDeleteIfcClassificationsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeleteIfcClassificationsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkDeleteIfcClassificationsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeleteIfcClassificationsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/list_destroy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove all classifications from model's elements
     *              Delete relation between filtered classifications (eg. /classifications?name=untec) and all mode's elements.             No classification will be deleted on this endpoint, only the relation between model's elements and their classification.  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    bulkDeleteIfcClassificationsDeprecated(cloudPk, ifcPk, projectPk) {
      return this.bulkDeleteIfcClassificationsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete many Property of a model
     *          Bulk delete.         You must send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Number>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    bulkDeleteIfcPropertiesDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeleteIfcPropertiesDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkDeleteIfcPropertiesDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeleteIfcPropertiesDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bulkDeleteIfcPropertiesDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_destroy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete many Property of a model
     *          Bulk delete.         You must send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Number>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    bulkDeleteIfcPropertiesDeprecated(cloudPk, ifcPk, projectPk, data) {
      return this.bulkDeleteIfcPropertiesDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete many PropertyDefinitions of a model
     *          Bulk delete.         You must send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Number>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    bulkDeleteIfcPropertyDefinitionsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeleteIfcPropertyDefinitionsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkDeleteIfcPropertyDefinitionsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeleteIfcPropertyDefinitionsDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bulkDeleteIfcPropertyDefinitionsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/bulk_destroy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete many PropertyDefinitions of a model
     *          Bulk delete.         You must send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Number>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    bulkDeleteIfcPropertyDefinitionsDeprecated(cloudPk, ifcPk, projectPk, data) {
      return this.bulkDeleteIfcPropertyDefinitionsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete many Units of a model
     *          Bulk delete.         You must send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Number>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    bulkDeleteIfcUnitsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeleteIfcUnitsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkDeleteIfcUnitsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeleteIfcUnitsDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bulkDeleteIfcUnitsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/bulk_destroy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete many Units of a model
     *          Bulk delete.         You must send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Number>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    bulkDeleteIfcUnitsDeprecated(cloudPk, ifcPk, projectPk, data) {
      return this.bulkDeleteIfcUnitsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete many PropertySet of a model
     *          Bulk delete.         You must send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Number>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    bulkDeletePropertySetDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeletePropertySetDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkDeletePropertySetDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeletePropertySetDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bulkDeletePropertySetDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/bulk_destroy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete many PropertySet of a model
     *          Bulk delete.         You must send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Number>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    bulkDeletePropertySetDeprecated(cloudPk, ifcPk, projectPk, data) {
      return this.bulkDeletePropertySetDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update many elements at once (only changing fields may be defined)
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/Element>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Element>} and HTTP response
     */
    bulkFullUpdateElementsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkFullUpdateElementsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkFullUpdateElementsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkFullUpdateElementsDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bulkFullUpdateElementsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Element];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/bulk_update', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update many elements at once (only changing fields may be defined)
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/Element>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Element>}
     */
    bulkFullUpdateElementsDeprecated(cloudPk, ifcPk, projectPk, data) {
      return this.bulkFullUpdateElementsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of many properties of a model
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/Property>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Property>} and HTTP response
     */
    bulkFullUpdateIfcPropertyDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkFullUpdateIfcPropertyDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkFullUpdateIfcPropertyDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkFullUpdateIfcPropertyDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bulkFullUpdateIfcPropertyDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Property];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_update', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of many properties of a model
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/Property>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Property>}
     */
    bulkFullUpdateIfcPropertyDeprecated(cloudPk, ifcPk, projectPk, data) {
      return this.bulkFullUpdateIfcPropertyDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove many classifications from an element
     *          Bulk delete.         You must send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Number>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    bulkRemoveClassificationsOfElementDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkRemoveClassificationsOfElementDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling bulkRemoveClassificationsOfElementDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkRemoveClassificationsOfElementDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkRemoveClassificationsOfElementDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bulkRemoveClassificationsOfElementDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification/bulk_destroy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove many classifications from an element
     *          Bulk delete.         You must send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Number>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    bulkRemoveClassificationsOfElementDeprecated(cloudPk, elementUuid, ifcPk, projectPk, data) {
      return this.bulkRemoveClassificationsOfElementDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove many documents from an element
     *          Bulk delete.         You must send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Number>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    bulkRemoveDocumentsOfElementDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkRemoveDocumentsOfElementDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling bulkRemoveDocumentsOfElementDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkRemoveDocumentsOfElementDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkRemoveDocumentsOfElementDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bulkRemoveDocumentsOfElementDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/documents/bulk_destroy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove many documents from an element
     *          Bulk delete.         You must send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Number>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    bulkRemoveDocumentsOfElementDeprecated(cloudPk, elementUuid, ifcPk, projectPk, data) {
      return this.bulkRemoveDocumentsOfElementDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove the classifications from all elements
     *          Bulk delete.         You must send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} modelClassificationPk 
     * @param {String} projectPk 
     * @param {Array.<Number>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    bulkRemoveElementsFromClassificationDeprecatedWithHttpInfo(cloudPk, ifcPk, modelClassificationPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkRemoveElementsFromClassificationDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkRemoveElementsFromClassificationDeprecated");
      }
      // verify the required parameter 'modelClassificationPk' is set
      if (modelClassificationPk === undefined || modelClassificationPk === null) {
        throw new Error("Missing the required parameter 'modelClassificationPk' when calling bulkRemoveElementsFromClassificationDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkRemoveElementsFromClassificationDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bulkRemoveElementsFromClassificationDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'model_classification_pk': modelClassificationPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{model_classification_pk}/element/bulk_destroy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove the classifications from all elements
     *          Bulk delete.         You must send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} modelClassificationPk 
     * @param {String} projectPk 
     * @param {Array.<Number>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    bulkRemoveElementsFromClassificationDeprecated(cloudPk, ifcPk, modelClassificationPk, projectPk, data) {
      return this.bulkRemoveElementsFromClassificationDeprecatedWithHttpInfo(cloudPk, ifcPk, modelClassificationPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update many elements at once (all field must be defined)
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/Element>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Element>} and HTTP response
     */
    bulkUpdateElementsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkUpdateElementsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkUpdateElementsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkUpdateElementsDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bulkUpdateElementsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Element];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/bulk_update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update many elements at once (all field must be defined)
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/Element>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Element>}
     */
    bulkUpdateElementsDeprecated(cloudPk, ifcPk, projectPk, data) {
      return this.bulkUpdateElementsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of many properties of a model
     *  Bulk update. Similar to update, but the body should be a list of objects to patch or put The response will be a list (in the same order) of updated objects or of errors if any If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/Property>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Property>} and HTTP response
     */
    bulkUpdateIfcPropertyDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkUpdateIfcPropertyDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkUpdateIfcPropertyDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkUpdateIfcPropertyDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling bulkUpdateIfcPropertyDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Property];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update all fields of many properties of a model
     *  Bulk update. Similar to update, but the body should be a list of objects to patch or put The response will be a list (in the same order) of updated objects or of errors if any If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/Property>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Property>}
     */
    bulkUpdateIfcPropertyDeprecated(cloudPk, ifcPk, projectPk, data) {
      return this.bulkUpdateIfcPropertyDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a token for this model
     * Tokens are read_only by default and are valid 1 day Required scopes: ifc:token_manage, model:token_manage
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/IfcAccessToken} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IfcAccessToken} and HTTP response
     */
    createAccessTokenDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createAccessTokenDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createAccessTokenDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createAccessTokenDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createAccessTokenDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IfcAccessToken;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a token for this model
     * Tokens are read_only by default and are valid 1 day Required scopes: ifc:token_manage, model:token_manage
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/IfcAccessToken} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IfcAccessToken}
     */
    createAccessTokenDeprecated(cloudPk, ifcPk, projectPk, data) {
      return this.createAccessTokenDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a building of a model
     * Create a building of a model. Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Building} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Building} and HTTP response
     */
    createBuildingDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createBuildingDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createBuildingDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createBuildingDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createBuildingDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Building;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a building of a model
     * Create a building of a model. Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Building} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Building}
     */
    createBuildingDeprecated(cloudPk, ifcPk, projectPk, data) {
      return this.createBuildingDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a relation between a 2d model and a building
     * Create a relation between a 2d model and a building. The model type must be one of : ('DWG', 'DXF', 'PDF', 'JPEG', 'PNG') Required scopes: ifc:write, model:write
     * @param {String} buildingUuid 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/InlineObject4} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Building} and HTTP response
     */
    createBuildingPlanDeprecatedWithHttpInfo(buildingUuid, cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'buildingUuid' is set
      if (buildingUuid === undefined || buildingUuid === null) {
        throw new Error("Missing the required parameter 'buildingUuid' when calling createBuildingPlanDeprecated");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createBuildingPlanDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createBuildingPlanDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createBuildingPlanDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createBuildingPlanDeprecated");
      }

      let pathParams = {
        'building_uuid': buildingUuid,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Building;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a relation between a 2d model and a building
     * Create a relation between a 2d model and a building. The model type must be one of : ('DWG', 'DXF', 'PDF', 'JPEG', 'PNG') Required scopes: ifc:write, model:write
     * @param {String} buildingUuid 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/InlineObject4} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Building}
     */
    createBuildingPlanDeprecated(buildingUuid, cloudPk, ifcPk, projectPk, data) {
      return this.createBuildingPlanDeprecatedWithHttpInfo(buildingUuid, cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a checker to a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/IfcChecker} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IfcChecker} and HTTP response
     */
    createCheckerDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createCheckerDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createCheckerDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createCheckerDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createCheckerDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IfcChecker;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a checker to a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/IfcChecker} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IfcChecker}
     */
    createCheckerDeprecated(cloudPk, ifcPk, projectPk, data) {
      return this.createCheckerDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a CheckerResult
     * TCreate a CheckerResult Required scopes: check:write
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/CheckerResult} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckerResult} and HTTP response
     */
    createCheckerResultDeprecatedWithHttpInfo(checkerPk, cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling createCheckerResultDeprecated");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createCheckerResultDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createCheckerResultDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createCheckerResultDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createCheckerResultDeprecated");
      }

      let pathParams = {
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckerResult;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a CheckerResult
     * TCreate a CheckerResult Required scopes: check:write
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/CheckerResult} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckerResult}
     */
    createCheckerResultDeprecated(checkerPk, cloudPk, ifcPk, projectPk, data) {
      return this.createCheckerResultDeprecatedWithHttpInfo(checkerPk, cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create association between existing classification and existing element
     * Create association between existing classification and existing element Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/ElementClassificationRelation>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    createClassificationElementRelationsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createClassificationElementRelationsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createClassificationElementRelationsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createClassificationElementRelationsDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createClassificationElementRelationsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification-element', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create association between existing classification and existing element
     * Create association between existing classification and existing element Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/ElementClassificationRelation>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    createClassificationElementRelationsDeprecated(cloudPk, ifcPk, projectPk, data) {
      return this.createClassificationElementRelationsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create one or many classifications to an element
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors      If classification created already exists, it will just be added to item's classifications and will not be duplicated  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/Classification>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Classification>} and HTTP response
     */
    createClassificationsOfElementDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createClassificationsOfElementDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createClassificationsOfElementDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createClassificationsOfElementDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createClassificationsOfElementDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createClassificationsOfElementDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Classification];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create one or many classifications to an element
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors      If classification created already exists, it will just be added to item's classifications and will not be duplicated  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/Classification>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Classification>}
     */
    createClassificationsOfElementDeprecated(cloudPk, elementUuid, ifcPk, projectPk, data) {
      return this.createClassificationsOfElementDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an element in the model
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/Element>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Element>} and HTTP response
     */
    createElementDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElementDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createElementDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElementDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createElementDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Element];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an element in the model
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/Element>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Element>}
     */
    createElementDeprecated(cloudPk, ifcPk, projectPk, data) {
      return this.createElementDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a PropertySets to an element
     * Create a PropertySets that will be automatically linked to the element Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PropertySet} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertySet} and HTTP response
     */
    createElementPropertySetDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElementPropertySetDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createElementPropertySetDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createElementPropertySetDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElementPropertySetDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createElementPropertySetDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PropertySet;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a PropertySets to an element
     * Create a PropertySets that will be automatically linked to the element Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PropertySet} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertySet}
     */
    createElementPropertySetDeprecated(cloudPk, elementUuid, ifcPk, projectPk, data) {
      return this.createElementPropertySetDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Definition to a Property
     *  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @param {module:model/PropertyDefinition} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertyDefinition} and HTTP response
     */
    createElementPropertySetPropertyDefinitionDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertysetPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElementPropertySetPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createElementPropertySetPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createElementPropertySetPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElementPropertySetPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling createElementPropertySetPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling createElementPropertySetPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createElementPropertySetPropertyDefinitionDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PropertyDefinition;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Definition to a Property
     *  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @param {module:model/PropertyDefinition} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertyDefinition}
     */
    createElementPropertySetPropertyDefinitionDeprecated(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertysetPk, data) {
      return this.createElementPropertySetPropertyDefinitionDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertysetPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Unit to a Definition
     * Create a Unit to a Definition Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertydefinitionPk 
     * @param {String} propertysetPk 
     * @param {module:model/Unit} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Unit} and HTTP response
     */
    createElementPropertySetPropertyDefinitionUnitDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElementPropertySetPropertyDefinitionUnitDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createElementPropertySetPropertyDefinitionUnitDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createElementPropertySetPropertyDefinitionUnitDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElementPropertySetPropertyDefinitionUnitDeprecated");
      }
      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling createElementPropertySetPropertyDefinitionUnitDeprecated");
      }
      // verify the required parameter 'propertydefinitionPk' is set
      if (propertydefinitionPk === undefined || propertydefinitionPk === null) {
        throw new Error("Missing the required parameter 'propertydefinitionPk' when calling createElementPropertySetPropertyDefinitionUnitDeprecated");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling createElementPropertySetPropertyDefinitionUnitDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createElementPropertySetPropertyDefinitionUnitDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertydefinition_pk': propertydefinitionPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Unit;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Unit to a Definition
     * Create a Unit to a Definition Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertydefinitionPk 
     * @param {String} propertysetPk 
     * @param {module:model/Unit} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Unit}
     */
    createElementPropertySetPropertyDefinitionUnitDeprecated(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk, data) {
      return this.createElementPropertySetPropertyDefinitionUnitDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a property to a PropertySet
     *  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertysetPk 
     * @param {module:model/Property} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Property} and HTTP response
     */
    createElementPropertySetPropertyDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, propertysetPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElementPropertySetPropertyDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createElementPropertySetPropertyDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createElementPropertySetPropertyDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElementPropertySetPropertyDeprecated");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling createElementPropertySetPropertyDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createElementPropertySetPropertyDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Property;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a property to a PropertySet
     *  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertysetPk 
     * @param {module:model/Property} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Property}
     */
    createElementPropertySetPropertyDeprecated(cloudPk, elementUuid, ifcPk, projectPk, propertysetPk, data) {
      return this.createElementPropertySetPropertyDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, propertysetPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Make a PDF or Image file a Model
     * Make a PDF or Image file a Model to be used in BIMData services. If a model already exists, this route does nothing and returns a 201 with the model Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {module:model/CreateModel} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Model} and HTTP response
     */
    createIfcDeprecatedWithHttpInfo(cloudPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createIfcDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createIfcDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createIfcDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/create-model', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Make a PDF or Image file a Model
     * Make a PDF or Image file a Model to be used in BIMData services. If a model already exists, this route does nothing and returns a 201 with the model Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {module:model/CreateModel} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Model}
     */
    createIfcDeprecated(cloudPk, projectPk, data) {
      return this.createIfcDeprecatedWithHttpInfo(cloudPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a PropertyDefinition on the model
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/PropertyDefinition>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PropertyDefinition>} and HTTP response
     */
    createIfcPropertyDefinitionDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createIfcPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createIfcPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createIfcPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createIfcPropertyDefinitionDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PropertyDefinition];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a PropertyDefinition on the model
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/PropertyDefinition>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PropertyDefinition>}
     */
    createIfcPropertyDefinitionDeprecated(cloudPk, ifcPk, projectPk, data) {
      return this.createIfcPropertyDefinitionDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Unit on a model
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/Unit>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Unit>} and HTTP response
     */
    createIfcUnitDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createIfcUnitDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createIfcUnitDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createIfcUnitDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createIfcUnitDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Unit];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Unit on a model
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/Unit>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Unit>}
     */
    createIfcUnitDeprecated(cloudPk, ifcPk, projectPk, data) {
      return this.createIfcUnitDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a layer in the model
     * The IFC file will not be updated. The created layer will be accessible over the API and when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Layer} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Layer} and HTTP response
     */
    createLayerDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createLayerDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createLayerDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createLayerDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createLayerDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Layer;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a layer in the model
     * The IFC file will not be updated. The created layer will be accessible over the API and when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Layer} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Layer}
     */
    createLayerDeprecated(cloudPk, ifcPk, projectPk, data) {
      return this.createLayerDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an empty 3D Model
     * Create an empty 3D Model to be used in BIMData services Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {module:model/CreateBuilding} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Model} and HTTP response
     */
    createMetaBuildingDeprecatedWithHttpInfo(cloudPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createMetaBuildingDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createMetaBuildingDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createMetaBuildingDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/create-metabuilding', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an empty 3D Model
     * Create an empty 3D Model to be used in BIMData services Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {module:model/CreateBuilding} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Model}
     */
    createMetaBuildingDeprecated(cloudPk, projectPk, data) {
      return this.createMetaBuildingDeprecatedWithHttpInfo(cloudPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a PropertySet
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/PropertySet>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PropertySet>} and HTTP response
     */
    createPropertySetDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createPropertySetDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createPropertySetDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createPropertySetDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createPropertySetDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PropertySet];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a PropertySet
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/PropertySet>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PropertySet>}
     */
    createPropertySetDeprecated(cloudPk, ifcPk, projectPk, data) {
      return this.createPropertySetDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create association between PropertySet and element
     * Create association between existing PropertySet and existing element Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/ElementPropertySetRelation>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    createPropertySetElementRelationsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createPropertySetElementRelationsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createPropertySetElementRelationsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createPropertySetElementRelationsDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createPropertySetElementRelationsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset-element', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create association between PropertySet and element
     * Create association between existing PropertySet and existing element Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/ElementPropertySetRelation>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    createPropertySetElementRelationsDeprecated(cloudPk, ifcPk, projectPk, data) {
      return this.createPropertySetElementRelationsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create elements in an optimized format
     *          You can use the same optimized structure to post multiple elements, property_sets, properties, definitions and units at once.         For performance reasons, we do not check the validity of the json. If the json is malformed, an error 500 without more explaination may be returned instead of a 400.  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/RawElements} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    createRawElementsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createRawElementsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createRawElementsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createRawElementsDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createRawElementsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/raw', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create elements in an optimized format
     *          You can use the same optimized structure to post multiple elements, property_sets, properties, definitions and units at once.         For performance reasons, we do not check the validity of the json. If the json is malformed, an error 500 without more explaination may be returned instead of a 400.  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/RawElements} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    createRawElementsDeprecated(cloudPk, ifcPk, projectPk, data) {
      return this.createRawElementsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a space in the model
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/Space>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Space>} and HTTP response
     */
    createSpaceDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createSpaceDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createSpaceDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createSpaceDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createSpaceDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Space];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a space in the model
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/Space>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Space>}
     */
    createSpaceDeprecated(cloudPk, ifcPk, projectPk, data) {
      return this.createSpaceDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a storey of a model
     * Create a storey of a model. Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Storey} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Storey} and HTTP response
     */
    createStoreyDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createStoreyDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createStoreyDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createStoreyDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createStoreyDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Storey;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a storey of a model
     * Create a storey of a model. Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Storey} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Storey}
     */
    createStoreyDeprecated(cloudPk, ifcPk, projectPk, data) {
      return this.createStoreyDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a relation between a 2d model and a storey
     * Create a relation between a 2d model and a storey. The model type must be one of : ('DWG', 'DXF', 'PDF', 'JPEG', 'PNG') Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} storeyUuid 
     * @param {module:model/InlineObject6} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Storey} and HTTP response
     */
    createStoreyPlanDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, storeyUuid, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createStoreyPlanDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createStoreyPlanDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createStoreyPlanDeprecated");
      }
      // verify the required parameter 'storeyUuid' is set
      if (storeyUuid === undefined || storeyUuid === null) {
        throw new Error("Missing the required parameter 'storeyUuid' when calling createStoreyPlanDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createStoreyPlanDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'storey_uuid': storeyUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Storey;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a relation between a 2d model and a storey
     * Create a relation between a 2d model and a storey. The model type must be one of : ('DWG', 'DXF', 'PDF', 'JPEG', 'PNG') Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} storeyUuid 
     * @param {module:model/InlineObject6} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Storey}
     */
    createStoreyPlanDeprecated(cloudPk, ifcPk, projectPk, storeyUuid, data) {
      return this.createStoreyPlanDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, storeyUuid, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a system in the model
     * The IFC file will not be updated. The created system will be accessible over the API and when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/System} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/System} and HTTP response
     */
    createSystemDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createSystemDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createSystemDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createSystemDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createSystemDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = System;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a system in the model
     * The IFC file will not be updated. The created system will be accessible over the API and when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/System} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/System}
     */
    createSystemDeprecated(cloudPk, ifcPk, projectPk, data) {
      return this.createSystemDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a zone in the model
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/Zone>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Zone>} and HTTP response
     */
    createZoneDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createZoneDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createZoneDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createZoneDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createZoneDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Zone];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a zone in the model
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<module:model/Zone>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Zone>}
     */
    createZoneDeprecated(cloudPk, ifcPk, projectPk, data) {
      return this.createZoneDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a space in a zone
     * The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @param {module:model/ZoneSpace} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ZoneSpace} and HTTP response
     */
    createZoneSpaceDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, zonePk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createZoneSpaceDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createZoneSpaceDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createZoneSpaceDeprecated");
      }
      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling createZoneSpaceDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createZoneSpaceDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'zone_pk': zonePk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ZoneSpace;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a space in a zone
     * The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @param {module:model/ZoneSpace} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ZoneSpace}
     */
    createZoneSpaceDeprecated(cloudPk, ifcPk, projectPk, zonePk, data) {
      return this.createZoneSpaceDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, zonePk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a token
     * Deleting a token will revoke it. Required scopes: ifc:token_manage, model:token_manage
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAccessTokenDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, token) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteAccessTokenDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteAccessTokenDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteAccessTokenDeprecated");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteAccessTokenDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token/{token}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a token
     * Deleting a token will revoke it. Required scopes: ifc:token_manage, model:token_manage
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAccessTokenDeprecated(cloudPk, ifcPk, projectPk, token) {
      return this.deleteAccessTokenDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, token)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a building of a model
     * Delete a building of a model Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteBuildingDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteBuildingDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteBuildingDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteBuildingDeprecated");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteBuildingDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a building of a model
     * Delete a building of a model Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteBuildingDeprecated(cloudPk, ifcPk, projectPk, uuid) {
      return this.deleteBuildingDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete the relation between a 2d model and a building
     * Delete the relation between a 2d model and a building Required scopes: ifc:write, model:write
     * @param {String} buildingUuid 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this element.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteBuildingPlanDeprecatedWithHttpInfo(buildingUuid, cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'buildingUuid' is set
      if (buildingUuid === undefined || buildingUuid === null) {
        throw new Error("Missing the required parameter 'buildingUuid' when calling deleteBuildingPlanDeprecated");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteBuildingPlanDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBuildingPlanDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteBuildingPlanDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteBuildingPlanDeprecated");
      }

      let pathParams = {
        'building_uuid': buildingUuid,
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete the relation between a 2d model and a building
     * Delete the relation between a 2d model and a building Required scopes: ifc:write, model:write
     * @param {String} buildingUuid 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this element.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteBuildingPlanDeprecated(buildingUuid, cloudPk, id, ifcPk, projectPk) {
      return this.deleteBuildingPlanDeprecatedWithHttpInfo(buildingUuid, cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCheckerDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteCheckerDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCheckerDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteCheckerDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteCheckerDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCheckerDeprecated(cloudPk, id, ifcPk, projectPk) {
      return this.deleteCheckerDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a CheckerResult
     * Delete a CheckerResult Required scopes: check:write
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCheckerResultDeprecatedWithHttpInfo(checkerPk, cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling deleteCheckerResultDeprecated");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteCheckerResultDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCheckerResultDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteCheckerResultDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteCheckerResultDeprecated");
      }

      let pathParams = {
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a CheckerResult
     * Delete a CheckerResult Required scopes: check:write
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCheckerResultDeprecated(checkerPk, cloudPk, id, ifcPk, projectPk) {
      return this.deleteCheckerResultDeprecatedWithHttpInfo(checkerPk, cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an element of a model
     * The IFC file will not be updated. The remaining elements are available in API and will be available when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteElementDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteElementDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteElementDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteElementDeprecated");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteElementDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an element of a model
     * The IFC file will not be updated. The remaining elements are available in API and will be available when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteElementDeprecated(cloudPk, ifcPk, projectPk, uuid) {
      return this.deleteElementDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a model
     * It will also delete the related document Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteIfcDeprecatedWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteIfcDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteIfcDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteIfcDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a model
     * It will also delete the related document Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteIfcDeprecated(cloudPk, id, projectPk) {
      return this.deleteIfcDeprecatedWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a PropertyDefinitions of a model
     * Delete a PropertyDefinitions of a model Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteIfcPropertyDefinitionDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteIfcPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteIfcPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteIfcPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteIfcPropertyDefinitionDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a PropertyDefinitions of a model
     * Delete a PropertyDefinitions of a model Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteIfcPropertyDefinitionDeprecated(cloudPk, id, ifcPk, projectPk) {
      return this.deleteIfcPropertyDefinitionDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Property of a model
     * Delete a Property of a model Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteIfcPropertyDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteIfcPropertyDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteIfcPropertyDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteIfcPropertyDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteIfcPropertyDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Property of a model
     * Delete a Property of a model Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteIfcPropertyDeprecated(cloudPk, id, ifcPk, projectPk) {
      return this.deleteIfcPropertyDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Unit of a model
     * Delete a Unit of a model Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteIfcUnitDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteIfcUnitDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteIfcUnitDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteIfcUnitDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteIfcUnitDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Unit of a model
     * Delete a Unit of a model Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteIfcUnitDeprecated(cloudPk, id, ifcPk, projectPk) {
      return this.deleteIfcUnitDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete the Model without deleting the related document
     * Delete the Model without deleting the related document Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteIfcWithoutDocDeprecatedWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteIfcWithoutDocDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteIfcWithoutDocDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteIfcWithoutDocDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/delete-model', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete the Model without deleting the related document
     * Delete the Model without deleting the related document Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteIfcWithoutDocDeprecated(cloudPk, id, projectPk) {
      return this.deleteIfcWithoutDocDeprecatedWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a layer of a model
     * The IFC file will not be updated. The remaining layers are available in API and will be available when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this layer.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteLayerDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteLayerDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteLayerDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteLayerDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteLayerDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a layer of a model
     * The IFC file will not be updated. The remaining layers are available in API and will be available when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this layer.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteLayerDeprecated(cloudPk, id, ifcPk, projectPk) {
      return this.deleteLayerDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a PropertySet of a model
     * Delete a PropertySet of a model Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deletePropertySetDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deletePropertySetDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePropertySetDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deletePropertySetDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deletePropertySetDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a PropertySet of a model
     * Delete a PropertySet of a model Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deletePropertySetDeprecated(cloudPk, id, ifcPk, projectPk) {
      return this.deletePropertySetDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a space
     * It will not delete related zones. The IFC file will not be updated. The remaining spaces are available in API and will be available when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSpaceDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteSpaceDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSpaceDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteSpaceDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteSpaceDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a space
     * It will not delete related zones. The IFC file will not be updated. The remaining spaces are available in API and will be available when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSpaceDeprecated(cloudPk, id, ifcPk, projectPk) {
      return this.deleteSpaceDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a storey of a model
     * Delete a storey of a model Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteStoreyDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteStoreyDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteStoreyDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteStoreyDeprecated");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteStoreyDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a storey of a model
     * Delete a storey of a model Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteStoreyDeprecated(cloudPk, ifcPk, projectPk, uuid) {
      return this.deleteStoreyDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete the relation between a 2d model and a storey
     * Delete the relation between a 2d model and a storey Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this element.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} storeyUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteStoreyPlanDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, storeyUuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteStoreyPlanDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteStoreyPlanDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteStoreyPlanDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteStoreyPlanDeprecated");
      }
      // verify the required parameter 'storeyUuid' is set
      if (storeyUuid === undefined || storeyUuid === null) {
        throw new Error("Missing the required parameter 'storeyUuid' when calling deleteStoreyPlanDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'storey_uuid': storeyUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete the relation between a 2d model and a storey
     * Delete the relation between a 2d model and a storey Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this element.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} storeyUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteStoreyPlanDeprecated(cloudPk, id, ifcPk, projectPk, storeyUuid) {
      return this.deleteStoreyPlanDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, storeyUuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a system of a model
     * The IFC file will not be updated. The remaining systems are available in API and will be available when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC sytem or system type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSystemDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteSystemDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteSystemDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteSystemDeprecated");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteSystemDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a system of a model
     * The IFC file will not be updated. The remaining systems are available in API and will be available when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC sytem or system type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSystemDeprecated(cloudPk, ifcPk, projectPk, uuid) {
      return this.deleteSystemDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a zone of a model
     * The IFC file will not be updated. The remaining zones are available in API and will be available when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this zone.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteZoneDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteZoneDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteZoneDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteZoneDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteZoneDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a zone of a model
     * The IFC file will not be updated. The remaining zones are available in API and will be available when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this zone.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteZoneDeprecated(cloudPk, id, ifcPk, projectPk) {
      return this.deleteZoneDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a space of a zone
     * The IFC file will not be updated. The remaining spaces are available in API and will be available when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteZoneSpaceDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, zonePk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteZoneSpaceDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteZoneSpaceDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteZoneSpaceDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteZoneSpaceDeprecated");
      }
      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling deleteZoneSpaceDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'zone_pk': zonePk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a space of a zone
     * The IFC file will not be updated. The remaining spaces are available in API and will be available when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteZoneSpaceDeprecated(cloudPk, id, ifcPk, projectPk, zonePk) {
      return this.deleteZoneSpaceDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, zonePk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Export IFC
     * Only works for IFC files. Export IFC as requested in parameters. When the export is finished, a new IFC file with will be created in the same folder than the original IFC. You can query the folder or subscribe to the new document webhook to retrieve the result Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {String} projectPk 
     * @param {module:model/IfcExport} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IfcExport} and HTTP response
     */
    exportIfcDeprecatedWithHttpInfo(cloudPk, id, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling exportIfcDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportIfcDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling exportIfcDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling exportIfcDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IfcExport;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Export IFC
     * Only works for IFC files. Export IFC as requested in parameters. When the export is finished, a new IFC file with will be created in the same folder than the original IFC. You can query the folder or subscribe to the new document webhook to retrieve the result Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {String} projectPk 
     * @param {module:model/IfcExport} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IfcExport}
     */
    exportIfcDeprecated(cloudPk, id, projectPk, data) {
      return this.exportIfcDeprecatedWithHttpInfo(cloudPk, id, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of an element
     * Update all fields of an element. The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @param {module:model/Element} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Element} and HTTP response
     */
    fullUpdateElementDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateElementDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateElementDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateElementDeprecated");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling fullUpdateElementDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling fullUpdateElementDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Element;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update all fields of an element
     * Update all fields of an element. The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @param {module:model/Element} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Element}
     */
    fullUpdateElementDeprecated(cloudPk, ifcPk, projectPk, uuid, data) {
      return this.fullUpdateElementDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one token created for this model
     * Retrieve one token created for this model Required scopes: ifc:token_manage, model:token_manage
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IfcAccessToken} and HTTP response
     */
    getAccessTokenDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, token) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getAccessTokenDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getAccessTokenDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getAccessTokenDeprecated");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getAccessTokenDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IfcAccessToken;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve one token created for this model
     * Retrieve one token created for this model Required scopes: ifc:token_manage, model:token_manage
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IfcAccessToken}
     */
    getAccessTokenDeprecated(cloudPk, ifcPk, projectPk, token) {
      return this.getAccessTokenDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, token)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all tokens created for this model
     * Retrieve all tokens created for this model Required scopes: ifc:token_manage, model:token_manage
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/IfcAccessToken>} and HTTP response
     */
    getAccessTokensDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getAccessTokensDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getAccessTokensDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getAccessTokensDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IfcAccessToken];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all tokens created for this model
     * Retrieve all tokens created for this model Required scopes: ifc:token_manage, model:token_manage
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/IfcAccessToken>}
     */
    getAccessTokensDeprecated(cloudPk, ifcPk, projectPk) {
      return this.getAccessTokensDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a building of a model
     * Retrieve a building of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Building} and HTTP response
     */
    getBuildingDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getBuildingDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getBuildingDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getBuildingDeprecated");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getBuildingDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Building;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a building of a model
     * Retrieve a building of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Building}
     */
    getBuildingDeprecated(cloudPk, ifcPk, projectPk, uuid) {
      return this.getBuildingDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve the postioning of the plan in the building
     * Retrieve the postioning of the plan in the building Required scopes: ifc:read, model:read
     * @param {String} buildingUuid 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this element.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PositioningPlan} and HTTP response
     */
    getBuildingPlanPositioningDeprecatedWithHttpInfo(buildingUuid, cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'buildingUuid' is set
      if (buildingUuid === undefined || buildingUuid === null) {
        throw new Error("Missing the required parameter 'buildingUuid' when calling getBuildingPlanPositioningDeprecated");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getBuildingPlanPositioningDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBuildingPlanPositioningDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getBuildingPlanPositioningDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getBuildingPlanPositioningDeprecated");
      }

      let pathParams = {
        'building_uuid': buildingUuid,
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PositioningPlan;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/{id}/positioning', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve the postioning of the plan in the building
     * Retrieve the postioning of the plan in the building Required scopes: ifc:read, model:read
     * @param {String} buildingUuid 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this element.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PositioningPlan}
     */
    getBuildingPlanPositioningDeprecated(buildingUuid, cloudPk, id, ifcPk, projectPk) {
      return this.getBuildingPlanPositioningDeprecatedWithHttpInfo(buildingUuid, cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all buildings of a model
     * Retrieve all buildings of a model. Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Building>} and HTTP response
     */
    getBuildingsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getBuildingsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getBuildingsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getBuildingsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Building];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all buildings of a model
     * Retrieve all buildings of a model. Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Building>}
     */
    getBuildingsDeprecated(cloudPk, ifcPk, projectPk) {
      return this.getBuildingsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:read, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IfcChecker} and HTTP response
     */
    getCheckerDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCheckerDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCheckerDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getCheckerDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getCheckerDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IfcChecker;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:read, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IfcChecker}
     */
    getCheckerDeprecated(cloudPk, id, ifcPk, projectPk) {
      return this.getCheckerDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one CheckerResult
     * Retrieve one CheckerResult Required scopes: check:read
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckerResult} and HTTP response
     */
    getCheckerResultDeprecatedWithHttpInfo(checkerPk, cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling getCheckerResultDeprecated");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCheckerResultDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCheckerResultDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getCheckerResultDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getCheckerResultDeprecated");
      }

      let pathParams = {
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckerResult;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve one CheckerResult
     * Retrieve one CheckerResult Required scopes: check:read
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckerResult}
     */
    getCheckerResultDeprecated(checkerPk, cloudPk, id, ifcPk, projectPk) {
      return this.getCheckerResultDeprecatedWithHttpInfo(checkerPk, cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all CheckerResults
     * Retrieve all CheckerResults Required scopes: check:read
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CheckerResult>} and HTTP response
     */
    getCheckerResultsDeprecatedWithHttpInfo(checkerPk, cloudPk, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling getCheckerResultsDeprecated");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCheckerResultsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getCheckerResultsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getCheckerResultsDeprecated");
      }

      let pathParams = {
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CheckerResult];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all CheckerResults
     * Retrieve all CheckerResults Required scopes: check:read
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CheckerResult>}
     */
    getCheckerResultsDeprecated(checkerPk, cloudPk, ifcPk, projectPk) {
      return this.getCheckerResultsDeprecatedWithHttpInfo(checkerPk, cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all checkers of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:read, ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/IfcChecker>} and HTTP response
     */
    getCheckersDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCheckersDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getCheckersDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getCheckersDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IfcChecker];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all checkers of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:read, ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/IfcChecker>}
     */
    getCheckersDeprecated(cloudPk, ifcPk, projectPk) {
      return this.getCheckersDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all classifications of an element
     * Retrieve all classifications of an element Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Classification>} and HTTP response
     */
    getClassificationsOfElementDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getClassificationsOfElementDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getClassificationsOfElementDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getClassificationsOfElementDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getClassificationsOfElementDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Classification];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all classifications of an element
     * Retrieve all classifications of an element Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Classification>}
     */
    getClassificationsOfElementDeprecated(cloudPk, elementUuid, ifcPk, projectPk) {
      return this.getClassificationsOfElementDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all documents of an element
     * Retrieve all documents of an element Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Document>} and HTTP response
     */
    getDocumentsOfElementDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getDocumentsOfElementDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getDocumentsOfElementDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getDocumentsOfElementDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getDocumentsOfElementDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Document];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all documents of an element
     * Retrieve all documents of an element Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Document>}
     */
    getDocumentsOfElementDeprecated(cloudPk, elementUuid, ifcPk, projectPk) {
      return this.getDocumentsOfElementDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve an element of a model
     * Retrieve an element of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Element} and HTTP response
     */
    getElementDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementDeprecated");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getElementDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Element;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve an element of a model
     * Retrieve an element of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Element}
     */
    getElementDeprecated(cloudPk, ifcPk, projectPk, uuid) {
      return this.getElementDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all documents linked to any element
     * Retrieve all documents linked to any element with the list of uuids Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter the returned list by type
     * @param {String} opts.classification Filter the returned list by classification
     * @param {String} opts.classificationNotation Filter the returned list by classification__notation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/DocumentWithElementList>} and HTTP response
     */
    getElementLinkedDocumentsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementLinkedDocumentsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementLinkedDocumentsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementLinkedDocumentsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
        'type': opts['type'],
        'classification': opts['classification'],
        'classification__notation': opts['classificationNotation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DocumentWithElementList];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all documents linked to any element
     * Retrieve all documents linked to any element with the list of uuids Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter the returned list by type
     * @param {String} opts.classification Filter the returned list by classification
     * @param {String} opts.classificationNotation Filter the returned list by classification__notation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/DocumentWithElementList>}
     */
    getElementLinkedDocumentsDeprecated(cloudPk, ifcPk, projectPk, opts) {
      return this.getElementLinkedDocumentsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a PropertySet of an element
     * Retrieve a PropertySet of an element Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertySet} and HTTP response
     */
    getElementPropertySetDeprecatedWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getElementPropertySetDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PropertySet;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a PropertySet of an element
     * Retrieve a PropertySet of an element Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertySet}
     */
    getElementPropertySetDeprecated(cloudPk, elementUuid, id, ifcPk, projectPk) {
      return this.getElementPropertySetDeprecatedWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Properties of a PropertySet
     * Retrieve all Properties of a PropertySet Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Property>} and HTTP response
     */
    getElementPropertySetPropertiesDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, propertysetPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetPropertiesDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetPropertiesDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetPropertiesDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetPropertiesDeprecated");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetPropertiesDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Property];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all Properties of a PropertySet
     * Retrieve all Properties of a PropertySet Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Property>}
     */
    getElementPropertySetPropertiesDeprecated(cloudPk, elementUuid, ifcPk, projectPk, propertysetPk) {
      return this.getElementPropertySetPropertiesDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Definition of a Property
     * Retrieve a Definition of a Property Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertyDefinition} and HTTP response
     */
    getElementPropertySetPropertyDefinitionDeprecatedWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertysetPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getElementPropertySetPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling getElementPropertySetPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetPropertyDefinitionDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PropertyDefinition;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Definition of a Property
     * Retrieve a Definition of a Property Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertyDefinition}
     */
    getElementPropertySetPropertyDefinitionDeprecated(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertysetPk) {
      return this.getElementPropertySetPropertyDefinitionDeprecatedWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Unit of a Definition
     * Retrieve a Unit of a Definition Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertydefinitionPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Unit} and HTTP response
     */
    getElementPropertySetPropertyDefinitionUnitDeprecatedWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetPropertyDefinitionUnitDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetPropertyDefinitionUnitDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getElementPropertySetPropertyDefinitionUnitDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetPropertyDefinitionUnitDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetPropertyDefinitionUnitDeprecated");
      }
      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling getElementPropertySetPropertyDefinitionUnitDeprecated");
      }
      // verify the required parameter 'propertydefinitionPk' is set
      if (propertydefinitionPk === undefined || propertydefinitionPk === null) {
        throw new Error("Missing the required parameter 'propertydefinitionPk' when calling getElementPropertySetPropertyDefinitionUnitDeprecated");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetPropertyDefinitionUnitDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertydefinition_pk': propertydefinitionPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Unit;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Unit of a Definition
     * Retrieve a Unit of a Definition Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertydefinitionPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Unit}
     */
    getElementPropertySetPropertyDefinitionUnitDeprecated(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk) {
      return this.getElementPropertySetPropertyDefinitionUnitDeprecatedWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Units of a Definition
     * Retrieve all Units of a Definition Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertydefinitionPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Unit>} and HTTP response
     */
    getElementPropertySetPropertyDefinitionUnitsDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetPropertyDefinitionUnitsDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetPropertyDefinitionUnitsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetPropertyDefinitionUnitsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetPropertyDefinitionUnitsDeprecated");
      }
      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling getElementPropertySetPropertyDefinitionUnitsDeprecated");
      }
      // verify the required parameter 'propertydefinitionPk' is set
      if (propertydefinitionPk === undefined || propertydefinitionPk === null) {
        throw new Error("Missing the required parameter 'propertydefinitionPk' when calling getElementPropertySetPropertyDefinitionUnitsDeprecated");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetPropertyDefinitionUnitsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertydefinition_pk': propertydefinitionPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Unit];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all Units of a Definition
     * Retrieve all Units of a Definition Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertydefinitionPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Unit>}
     */
    getElementPropertySetPropertyDefinitionUnitsDeprecated(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk) {
      return this.getElementPropertySetPropertyDefinitionUnitsDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Definitions of a PropertySet
     * Retrieve all Definitions of a PropertySet Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PropertyDefinition>} and HTTP response
     */
    getElementPropertySetPropertyDefinitionsDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertysetPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetPropertyDefinitionsDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetPropertyDefinitionsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetPropertyDefinitionsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetPropertyDefinitionsDeprecated");
      }
      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling getElementPropertySetPropertyDefinitionsDeprecated");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetPropertyDefinitionsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PropertyDefinition];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all Definitions of a PropertySet
     * Retrieve all Definitions of a PropertySet Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PropertyDefinition>}
     */
    getElementPropertySetPropertyDefinitionsDeprecated(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertysetPk) {
      return this.getElementPropertySetPropertyDefinitionsDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Property of a PropertySet
     * Retrieve a Property of a PropertySet Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Property} and HTTP response
     */
    getElementPropertySetPropertyDeprecatedWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk, propertysetPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetPropertyDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetPropertyDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getElementPropertySetPropertyDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetPropertyDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetPropertyDeprecated");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetPropertyDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Property;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Property of a PropertySet
     * Retrieve a Property of a PropertySet Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Property}
     */
    getElementPropertySetPropertyDeprecated(cloudPk, elementUuid, id, ifcPk, projectPk, propertysetPk) {
      return this.getElementPropertySetPropertyDeprecatedWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all PropertySets of an element
     * Retrieve all PropertySets of an element Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PropertySet>} and HTTP response
     */
    getElementPropertySetsDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetsDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PropertySet];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all PropertySets of an element
     * Retrieve all PropertySets of an element Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PropertySet>}
     */
    getElementPropertySetsDeprecated(cloudPk, elementUuid, ifcPk, projectPk) {
      return this.getElementPropertySetsDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all elements of a model
     * Retrieve all elements of a model. If not filtered, the json may be very large. To efficently retrieve all elements and their data, see getRawElements Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter the returned list by type
     * @param {String} opts.classification Filter the returned list by classification
     * @param {String} opts.classificationNotation Filter the returned list by classification__notation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Element>} and HTTP response
     */
    getElementsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
        'type': opts['type'],
        'classification': opts['classification'],
        'classification__notation': opts['classificationNotation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Element];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all elements of a model
     * Retrieve all elements of a model. If not filtered, the json may be very large. To efficently retrieve all elements and their data, see getRawElements Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter the returned list by type
     * @param {String} opts.classification Filter the returned list by classification
     * @param {String} opts.classificationNotation Filter the returned list by classification__notation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Element>}
     */
    getElementsDeprecated(cloudPk, ifcPk, projectPk, opts) {
      return this.getElementsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all elements with the classification
     * Retrieve all elements with the classification Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} modelClassificationPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Element>} and HTTP response
     */
    getElementsFromClassificationDeprecatedWithHttpInfo(cloudPk, ifcPk, modelClassificationPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementsFromClassificationDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementsFromClassificationDeprecated");
      }
      // verify the required parameter 'modelClassificationPk' is set
      if (modelClassificationPk === undefined || modelClassificationPk === null) {
        throw new Error("Missing the required parameter 'modelClassificationPk' when calling getElementsFromClassificationDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementsFromClassificationDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'model_classification_pk': modelClassificationPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Element];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{model_classification_pk}/element', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all elements with the classification
     * Retrieve all elements with the classification Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} modelClassificationPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Element>}
     */
    getElementsFromClassificationDeprecated(cloudPk, ifcPk, modelClassificationPk, projectPk) {
      return this.getElementsFromClassificationDeprecatedWithHttpInfo(cloudPk, ifcPk, modelClassificationPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all classifications in a model
     * Retrieve all classifications in a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Classification>} and HTTP response
     */
    getIfcClassificationsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcClassificationsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcClassificationsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcClassificationsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Classification];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all classifications in a model
     * Retrieve all classifications in a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Classification>}
     */
    getIfcClassificationsDeprecated(cloudPk, ifcPk, projectPk) {
      return this.getIfcClassificationsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one model
     *  Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Model} and HTTP response
     */
    getIfcDeprecatedWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve one model
     *  Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Model}
     */
    getIfcDeprecated(cloudPk, id, projectPk) {
      return this.getIfcDeprecatedWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a material of a model
     * Retrieve a material of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this material.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Material} and HTTP response
     */
    getIfcMaterialDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcMaterialDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcMaterialDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcMaterialDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcMaterialDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Material;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/material/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a material of a model
     * Retrieve a material of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this material.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Material}
     */
    getIfcMaterialDeprecated(cloudPk, id, ifcPk, projectPk) {
      return this.getIfcMaterialDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all materials of a model
     * Retrieve all materials of a model. Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Material>} and HTTP response
     */
    getIfcMaterialsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcMaterialsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcMaterialsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcMaterialsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Material];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/material', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all materials of a model
     * Retrieve all materials of a model. Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Material>}
     */
    getIfcMaterialsDeprecated(cloudPk, ifcPk, projectPk) {
      return this.getIfcMaterialsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Properties of a model
     * Retrieve all PropertySets of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Property>} and HTTP response
     */
    getIfcPropertiesDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcPropertiesDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcPropertiesDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcPropertiesDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Property];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all Properties of a model
     * Retrieve all PropertySets of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Property>}
     */
    getIfcPropertiesDeprecated(cloudPk, ifcPk, projectPk) {
      return this.getIfcPropertiesDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a PropertyDefinition of a model
     * Retrieve a PropertyDefinition of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertyDefinition} and HTTP response
     */
    getIfcPropertyDefinitionDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcPropertyDefinitionDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PropertyDefinition;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a PropertyDefinition of a model
     * Retrieve a PropertyDefinition of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertyDefinition}
     */
    getIfcPropertyDefinitionDeprecated(cloudPk, id, ifcPk, projectPk) {
      return this.getIfcPropertyDefinitionDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all PropertyDefinitions of a model
     * Retrieve all PropertyDefinitions of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PropertyDefinition>} and HTTP response
     */
    getIfcPropertyDefinitionsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcPropertyDefinitionsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcPropertyDefinitionsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcPropertyDefinitionsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PropertyDefinition];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all PropertyDefinitions of a model
     * Retrieve all PropertyDefinitions of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PropertyDefinition>}
     */
    getIfcPropertyDefinitionsDeprecated(cloudPk, ifcPk, projectPk) {
      return this.getIfcPropertyDefinitionsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Property of a model
     * Retrieve a Property of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Property} and HTTP response
     */
    getIfcPropertyDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcPropertyDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcPropertyDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcPropertyDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcPropertyDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Property;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Property of a model
     * Retrieve a Property of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Property}
     */
    getIfcPropertyDeprecated(cloudPk, id, ifcPk, projectPk) {
      return this.getIfcPropertyDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Unit of a model
     * Retrieve a Unit of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Unit} and HTTP response
     */
    getIfcUnitDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcUnitDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcUnitDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcUnitDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcUnitDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Unit;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Unit of a model
     * Retrieve a Unit of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Unit}
     */
    getIfcUnitDeprecated(cloudPk, id, ifcPk, projectPk) {
      return this.getIfcUnitDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Units of a model
     * Retrieve all Units of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Unit>} and HTTP response
     */
    getIfcUnitsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcUnitsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcUnitsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcUnitsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Unit];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all Units of a model
     * Retrieve all Units of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Unit>}
     */
    getIfcUnitsDeprecated(cloudPk, ifcPk, projectPk) {
      return this.getIfcUnitsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all models
     * Retrieve all models. The field `type` allows you to discriminate which kind of model it is. Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.status Filter the returned list by status
     * @param {String} opts.source Filter the returned list by source
     * @param {String} opts.type Filter the returned list by type
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Model>} and HTTP response
     */
    getIfcsDeprecatedWithHttpInfo(cloudPk, projectPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
        'status': opts['status'],
        'source': opts['source'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Model];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all models
     * Retrieve all models. The field `type` allows you to discriminate which kind of model it is. Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.status Filter the returned list by status
     * @param {String} opts.source Filter the returned list by source
     * @param {String} opts.type Filter the returned list by type
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Model>}
     */
    getIfcsDeprecated(cloudPk, projectPk, opts) {
      return this.getIfcsDeprecatedWithHttpInfo(cloudPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a layer of a model
     * Retrieve a layer of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this layer.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Layer} and HTTP response
     */
    getLayerDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getLayerDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLayerDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getLayerDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getLayerDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Layer;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a layer of a model
     * Retrieve a layer of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this layer.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Layer}
     */
    getLayerDeprecated(cloudPk, id, ifcPk, projectPk) {
      return this.getLayerDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all layers of a model
     * Retrieve all layers of a model. Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Layer>} and HTTP response
     */
    getLayersDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getLayersDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getLayersDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getLayersDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Layer];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all layers of a model
     * Retrieve all layers of a model. Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Layer>}
     */
    getLayersDeprecated(cloudPk, ifcPk, projectPk) {
      return this.getLayersDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a material of a model
     * Retrieve a material of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this material.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Material} and HTTP response
     */
    getMaterialDeprecatedWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getMaterialDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getMaterialDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMaterialDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getMaterialDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getMaterialDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Material;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/material/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a material of a model
     * Retrieve a material of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this material.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Material}
     */
    getMaterialDeprecated(cloudPk, elementUuid, id, ifcPk, projectPk) {
      return this.getMaterialDeprecatedWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all materials of a model
     * Retrieve all materials of a model. Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Material>} and HTTP response
     */
    getMaterialsDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getMaterialsDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getMaterialsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getMaterialsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getMaterialsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Material];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/material', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all materials of a model
     * Retrieve all materials of a model. Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Material>}
     */
    getMaterialsDeprecated(cloudPk, elementUuid, ifcPk, projectPk) {
      return this.getMaterialsDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a processor handler
     *  Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this processor handler.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProcessorHandler} and HTTP response
     */
    getProcessorHandlerDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getProcessorHandlerDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProcessorHandlerDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getProcessorHandlerDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getProcessorHandlerDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProcessorHandler;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a processor handler
     *  Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this processor handler.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProcessorHandler}
     */
    getProcessorHandlerDeprecated(cloudPk, id, ifcPk, projectPk) {
      return this.getProcessorHandlerDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all processor handlers
     *  Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ProcessorHandler>} and HTTP response
     */
    getProcessorHandlersDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getProcessorHandlersDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getProcessorHandlersDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getProcessorHandlersDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProcessorHandler];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all processor handlers
     *  Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ProcessorHandler>}
     */
    getProcessorHandlersDeprecated(cloudPk, ifcPk, projectPk) {
      return this.getProcessorHandlersDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a PropertySet of a model
     * Retrieve a PropertySet of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertySet} and HTTP response
     */
    getPropertySetDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getPropertySetDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPropertySetDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getPropertySetDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getPropertySetDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PropertySet;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a PropertySet of a model
     * Retrieve a PropertySet of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertySet}
     */
    getPropertySetDeprecated(cloudPk, id, ifcPk, projectPk) {
      return this.getPropertySetDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all PropertySets of a model
     * Retrieve all PropertySets of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PropertySet>} and HTTP response
     */
    getPropertySetsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getPropertySetsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getPropertySetsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getPropertySetsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PropertySet];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all PropertySets of a model
     * Retrieve all PropertySets of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PropertySet>}
     */
    getPropertySetsDeprecated(cloudPk, ifcPk, projectPk) {
      return this.getPropertySetsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all elements in a optimized format
     *          Returns elements, property_sets, properties, definitions and units in a JSON optimized structure  Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter the returned list by type
     * @param {String} opts.classification Filter the returned list by classification
     * @param {String} opts.classificationNotation Filter the returned list by classification__notation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RawElements} and HTTP response
     */
    getRawElementsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRawElementsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getRawElementsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRawElementsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
        'type': opts['type'],
        'classification': opts['classification'],
        'classification__notation': opts['classificationNotation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RawElements;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/raw', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all elements in a optimized format
     *          Returns elements, property_sets, properties, definitions and units in a JSON optimized structure  Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter the returned list by type
     * @param {String} opts.classification Filter the returned list by classification
     * @param {String} opts.classificationNotation Filter the returned list by classification__notation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RawElements}
     */
    getRawElementsDeprecated(cloudPk, ifcPk, projectPk, opts) {
      return this.getRawElementsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve an element of a model with a simple value representation
     *          Retrieve an element of a model with a simple value representation         Format response :             {                 :element_uuid: {                     \"attributes\": {                         :property_name: value,                         :property_name: value                     },                     :property_set_name: {                         :property_name: value,                         :property_name: value                     }                 }             }  Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SimpleElement} and HTTP response
     */
    getSimpleElementDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getSimpleElementDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getSimpleElementDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getSimpleElementDeprecated");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getSimpleElementDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SimpleElement;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}/simple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve an element of a model with a simple value representation
     *          Retrieve an element of a model with a simple value representation         Format response :             {                 :element_uuid: {                     \"attributes\": {                         :property_name: value,                         :property_name: value                     },                     :property_set_name: {                         :property_name: value,                         :property_name: value                     }                 }             }  Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SimpleElement}
     */
    getSimpleElementDeprecated(cloudPk, ifcPk, projectPk, uuid) {
      return this.getSimpleElementDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all elements of a model with a simple value representation
     *          Retrieve all elements of a model with a simple value representation         Format response :             {                 :element_uuid: {                     \"attributes\": {                         :property_name: value,                         :property_name: value                     },                     :property_set_name: {                         :property_name: value,                         :property_name: value                     }                 }             }  Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter the returned list by type
     * @param {String} opts.classification Filter the returned list by classification
     * @param {String} opts.classificationNotation Filter the returned list by classification__notation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SimpleElement} and HTTP response
     */
    getSimpleElementsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getSimpleElementsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getSimpleElementsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getSimpleElementsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
        'type': opts['type'],
        'classification': opts['classification'],
        'classification__notation': opts['classificationNotation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SimpleElement;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/simple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all elements of a model with a simple value representation
     *          Retrieve all elements of a model with a simple value representation         Format response :             {                 :element_uuid: {                     \"attributes\": {                         :property_name: value,                         :property_name: value                     },                     :property_set_name: {                         :property_name: value,                         :property_name: value                     }                 }             }  Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter the returned list by type
     * @param {String} opts.classification Filter the returned list by classification
     * @param {String} opts.classificationNotation Filter the returned list by classification__notation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SimpleElement}
     */
    getSimpleElementsDeprecated(cloudPk, ifcPk, projectPk, opts) {
      return this.getSimpleElementsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one space of the model
     * Retrieve one space of the model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Space} and HTTP response
     */
    getSpaceDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getSpaceDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSpaceDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getSpaceDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getSpaceDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Space;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve one space of the model
     * Retrieve one space of the model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Space}
     */
    getSpaceDeprecated(cloudPk, id, ifcPk, projectPk) {
      return this.getSpaceDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all spaces of the model
     * Retrieve all spaces of the model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Space>} and HTTP response
     */
    getSpacesDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getSpacesDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getSpacesDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getSpacesDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Space];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all spaces of the model
     * Retrieve all spaces of the model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Space>}
     */
    getSpacesDeprecated(cloudPk, ifcPk, projectPk) {
      return this.getSpacesDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a storey of a model
     * Retrieve a storey of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Storey} and HTTP response
     */
    getStoreyDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getStoreyDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getStoreyDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getStoreyDeprecated");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getStoreyDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Storey;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a storey of a model
     * Retrieve a storey of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Storey}
     */
    getStoreyDeprecated(cloudPk, ifcPk, projectPk, uuid) {
      return this.getStoreyDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve the postioning of the plan in the storey
     * Retrieve the postioning of the plan in the storey Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this element.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} storeyUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PositioningPlan} and HTTP response
     */
    getStoreyPlanPositioningDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, storeyUuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getStoreyPlanPositioningDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStoreyPlanPositioningDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getStoreyPlanPositioningDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getStoreyPlanPositioningDeprecated");
      }
      // verify the required parameter 'storeyUuid' is set
      if (storeyUuid === undefined || storeyUuid === null) {
        throw new Error("Missing the required parameter 'storeyUuid' when calling getStoreyPlanPositioningDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'storey_uuid': storeyUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PositioningPlan;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/{id}/positioning', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve the postioning of the plan in the storey
     * Retrieve the postioning of the plan in the storey Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this element.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} storeyUuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PositioningPlan}
     */
    getStoreyPlanPositioningDeprecated(cloudPk, id, ifcPk, projectPk, storeyUuid) {
      return this.getStoreyPlanPositioningDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, storeyUuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all storeys of a model
     * Retrieve all storeys of a model. Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Storey>} and HTTP response
     */
    getStoreysDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getStoreysDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getStoreysDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getStoreysDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Storey];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all storeys of a model
     * Retrieve all storeys of a model. Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Storey>}
     */
    getStoreysDeprecated(cloudPk, ifcPk, projectPk) {
      return this.getStoreysDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a system of a model
     * Retrieve a system of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC sytem or system type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/System} and HTTP response
     */
    getSystemDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getSystemDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getSystemDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getSystemDeprecated");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getSystemDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = System;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a system of a model
     * Retrieve a system of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC sytem or system type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/System}
     */
    getSystemDeprecated(cloudPk, ifcPk, projectPk, uuid) {
      return this.getSystemDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all systems of a model
     * Retrieve all systems of a model. Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/System>} and HTTP response
     */
    getSystemsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getSystemsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getSystemsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getSystemsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [System];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all systems of a model
     * Retrieve all systems of a model. Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/System>}
     */
    getSystemsDeprecated(cloudPk, ifcPk, projectPk) {
      return this.getSystemsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one zone of a model
     * Retrieve one zone of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this zone.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Zone} and HTTP response
     */
    getZoneDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getZoneDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getZoneDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getZoneDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getZoneDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Zone;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve one zone of a model
     * Retrieve one zone of a model Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this zone.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Zone}
     */
    getZoneDeprecated(cloudPk, id, ifcPk, projectPk) {
      return this.getZoneDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one space of a zone
     * Retrieve one space of a zone Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ZoneSpace} and HTTP response
     */
    getZoneSpaceDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, zonePk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getZoneSpaceDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getZoneSpaceDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getZoneSpaceDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getZoneSpaceDeprecated");
      }
      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling getZoneSpaceDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'zone_pk': zonePk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ZoneSpace;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve one space of a zone
     * Retrieve one space of a zone Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ZoneSpace}
     */
    getZoneSpaceDeprecated(cloudPk, id, ifcPk, projectPk, zonePk) {
      return this.getZoneSpaceDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, zonePk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all spaces of a zone
     * Retrieve all spaces of a zone Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ZoneSpace>} and HTTP response
     */
    getZoneSpacesDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, zonePk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getZoneSpacesDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getZoneSpacesDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getZoneSpacesDeprecated");
      }
      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling getZoneSpacesDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'zone_pk': zonePk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ZoneSpace];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all spaces of a zone
     * Retrieve all spaces of a zone Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ZoneSpace>}
     */
    getZoneSpacesDeprecated(cloudPk, ifcPk, projectPk, zonePk) {
      return this.getZoneSpacesDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, zonePk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve zones of a model
     * Retrieve parent zones of a model. Children zones we'll be in the 'zones' field Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.color Filter the returned list by color
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Zone>} and HTTP response
     */
    getZonesDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getZonesDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getZonesDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getZonesDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
        'color': opts['color']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Zone];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve zones of a model
     * Retrieve parent zones of a model. Children zones we'll be in the 'zones' field Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.color Filter the returned list by color
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Zone>}
     */
    getZonesDeprecated(cloudPk, ifcPk, projectPk, opts) {
      return this.getZonesDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Launch a new check on the model
     * Starts a new check in the checker Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/IfcChecker} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    launchNewCheckDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling launchNewCheckDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling launchNewCheckDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling launchNewCheckDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling launchNewCheckDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling launchNewCheckDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}/launch-check', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Launch a new check on the model
     * Starts a new check in the checker Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/IfcChecker} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    launchNewCheckDeprecated(cloudPk, id, ifcPk, projectPk, data) {
      return this.launchNewCheckDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Link one or many documents to an element
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Number>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Document>} and HTTP response
     */
    linkDocumentsOfElementDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling linkDocumentsOfElementDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling linkDocumentsOfElementDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling linkDocumentsOfElementDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling linkDocumentsOfElementDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling linkDocumentsOfElementDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Document];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Link one or many documents to an element
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Number>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Document>}
     */
    linkDocumentsOfElementDeprecated(cloudPk, elementUuid, ifcPk, projectPk, data) {
      return this.linkDocumentsOfElementDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all associations between classifications and elements
     * List all associations between classifications and elements Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ElementClassificationRelation>} and HTTP response
     */
    listClassificationElementRelationsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling listClassificationElementRelationsDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling listClassificationElementRelationsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling listClassificationElementRelationsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ElementClassificationRelation];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification-element', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all associations between classifications and elements
     * List all associations between classifications and elements Required scopes: ifc:read, model:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ElementClassificationRelation>}
     */
    listClassificationElementRelationsDeprecated(cloudPk, ifcPk, projectPk) {
      return this.listClassificationElementRelationsDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Merge IFC files
     * Only works for IFC files. Merge IFC files. The merged IFC file will be put in the same folder that the first IFC of the list Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {module:model/IfcMerge} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    mergeIfcsDeprecatedWithHttpInfo(cloudPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling mergeIfcsDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling mergeIfcsDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling mergeIfcsDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/merge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Merge IFC files
     * Only works for IFC files. Merge IFC files. The merged IFC file will be put in the same folder that the first IFC of the list Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {module:model/IfcMerge} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    mergeIfcsDeprecated(cloudPk, projectPk, data) {
      return this.mergeIfcsDeprecatedWithHttpInfo(cloudPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Optimize the IFC
     * Only works for IFC files. Optimize the IFC. A new optimized IFC file will be put in the same folder that the original IFC Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {String} projectPk 
     * @param {module:model/IfcOptimize} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    optimizeIfcDeprecatedWithHttpInfo(cloudPk, id, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling optimizeIfcDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling optimizeIfcDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling optimizeIfcDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling optimizeIfcDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/optimize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Optimize the IFC
     * Only works for IFC files. Optimize the IFC. A new optimized IFC file will be put in the same folder that the original IFC Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {String} projectPk 
     * @param {module:model/IfcOptimize} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    optimizeIfcDeprecated(cloudPk, id, projectPk, data) {
      return this.optimizeIfcDeprecatedWithHttpInfo(cloudPk, id, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove all property sets from element
     * Remove all property sets from element. Property Sets will not be deleted, just detached from element Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeAllElementPropertySetDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeAllElementPropertySetDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeAllElementPropertySetDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeAllElementPropertySetDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeAllElementPropertySetDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/all', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove all property sets from element
     * Remove all property sets from element. Property Sets will not be deleted, just detached from element Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeAllElementPropertySetDeprecated(cloudPk, elementUuid, ifcPk, projectPk) {
      return this.removeAllElementPropertySetDeprecatedWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a classification from an element
     * The classification will not be deleted Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this classification.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeClassificationOfElementDeprecatedWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeClassificationOfElementDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeClassificationOfElementDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeClassificationOfElementDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeClassificationOfElementDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeClassificationOfElementDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a classification from an element
     * The classification will not be deleted Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this classification.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeClassificationOfElementDeprecated(cloudPk, elementUuid, id, ifcPk, projectPk) {
      return this.removeClassificationOfElementDeprecatedWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a documents from an element
     * The document will not be deleted Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this document.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeDocumentOfElementDeprecatedWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeDocumentOfElementDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeDocumentOfElementDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeDocumentOfElementDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeDocumentOfElementDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeDocumentOfElementDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/documents/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a documents from an element
     * The document will not be deleted Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this document.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeDocumentOfElementDeprecated(cloudPk, elementUuid, id, ifcPk, projectPk) {
      return this.removeDocumentOfElementDeprecatedWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a PropertySet from an element
     * Delete the relation between the element and the property set. Does not delete any object Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeElementPropertySetDeprecatedWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementPropertySetDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeElementPropertySetDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeElementPropertySetDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeElementPropertySetDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementPropertySetDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a PropertySet from an element
     * Delete the relation between the element and the property set. Does not delete any object Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeElementPropertySetDeprecated(cloudPk, elementUuid, id, ifcPk, projectPk) {
      return this.removeElementPropertySetDeprecatedWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a Definition from a Property
     *  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeElementPropertySetPropertyDefinitionDeprecatedWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertysetPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementPropertySetPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeElementPropertySetPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeElementPropertySetPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeElementPropertySetPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementPropertySetPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling removeElementPropertySetPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling removeElementPropertySetPropertyDefinitionDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a Definition from a Property
     *  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeElementPropertySetPropertyDefinitionDeprecated(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertysetPk) {
      return this.removeElementPropertySetPropertyDefinitionDeprecatedWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a Unit from a Definition
     * Remove a Unit from a Definition Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertydefinitionPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeElementPropertySetPropertyDefinitionUnitDeprecatedWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementPropertySetPropertyDefinitionUnitDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeElementPropertySetPropertyDefinitionUnitDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeElementPropertySetPropertyDefinitionUnitDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeElementPropertySetPropertyDefinitionUnitDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementPropertySetPropertyDefinitionUnitDeprecated");
      }
      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling removeElementPropertySetPropertyDefinitionUnitDeprecated");
      }
      // verify the required parameter 'propertydefinitionPk' is set
      if (propertydefinitionPk === undefined || propertydefinitionPk === null) {
        throw new Error("Missing the required parameter 'propertydefinitionPk' when calling removeElementPropertySetPropertyDefinitionUnitDeprecated");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling removeElementPropertySetPropertyDefinitionUnitDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertydefinition_pk': propertydefinitionPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a Unit from a Definition
     * Remove a Unit from a Definition Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertydefinitionPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeElementPropertySetPropertyDefinitionUnitDeprecated(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk) {
      return this.removeElementPropertySetPropertyDefinitionUnitDeprecatedWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a property from a PropertySet
     *  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeElementPropertySetPropertyDeprecatedWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk, propertysetPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementPropertySetPropertyDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeElementPropertySetPropertyDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeElementPropertySetPropertyDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeElementPropertySetPropertyDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementPropertySetPropertyDeprecated");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling removeElementPropertySetPropertyDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a property from a PropertySet
     *  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeElementPropertySetPropertyDeprecated(cloudPk, elementUuid, id, ifcPk, projectPk, propertysetPk) {
      return this.removeElementPropertySetPropertyDeprecatedWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove the classification from all elements
     * Remove the classification from all elements. No element nor classification will be deleted Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} modelClassificationPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeElementsFromClassificationDeprecatedWithHttpInfo(cloudPk, ifcPk, modelClassificationPk, projectPk, uuid) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementsFromClassificationDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeElementsFromClassificationDeprecated");
      }
      // verify the required parameter 'modelClassificationPk' is set
      if (modelClassificationPk === undefined || modelClassificationPk === null) {
        throw new Error("Missing the required parameter 'modelClassificationPk' when calling removeElementsFromClassificationDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementsFromClassificationDeprecated");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling removeElementsFromClassificationDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'model_classification_pk': modelClassificationPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{model_classification_pk}/element/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove the classification from all elements
     * Remove the classification from all elements. No element nor classification will be deleted Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} modelClassificationPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeElementsFromClassificationDeprecated(cloudPk, ifcPk, modelClassificationPk, projectPk, uuid) {
      return this.removeElementsFromClassificationDeprecatedWithHttpInfo(cloudPk, ifcPk, modelClassificationPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reprocess Model file
     * Reprocess the model. All data that are not in the original model files will be lost Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    reprocessIfcDeprecatedWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling reprocessIfcDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reprocessIfcDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling reprocessIfcDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/reprocess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reprocess Model file
     * Reprocess the model. All data that are not in the original model files will be lost Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    reprocessIfcDeprecated(cloudPk, id, projectPk) {
      return this.reprocessIfcDeprecatedWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a token
     * You can update the expiration date or the read_only field Required scopes: ifc:token_manage, model:token_manage
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} token 
     * @param {module:model/IfcAccessToken} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IfcAccessToken} and HTTP response
     */
    updateAccessTokenDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, token, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateAccessTokenDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateAccessTokenDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateAccessTokenDeprecated");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateAccessTokenDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateAccessTokenDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IfcAccessToken;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token/{token}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a token
     * You can update the expiration date or the read_only field Required scopes: ifc:token_manage, model:token_manage
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} token 
     * @param {module:model/IfcAccessToken} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IfcAccessToken}
     */
    updateAccessTokenDeprecated(cloudPk, ifcPk, projectPk, token, data) {
      return this.updateAccessTokenDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, token, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a building
     * Update some fields of a building Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @param {module:model/InlineObject5} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response
     */
    updateBuildingDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateBuildingDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateBuildingDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateBuildingDeprecated");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling updateBuildingDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateBuildingDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{uuid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a building
     * Update some fields of a building Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @param {module:model/InlineObject5} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002}
     */
    updateBuildingDeprecated(cloudPk, ifcPk, projectPk, uuid, data) {
      return this.updateBuildingDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the postioning of the plan in the building
     * Update the postioning of the plan in the building Required scopes: ifc:write, model:write
     * @param {String} buildingUuid 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this element.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PositioningPlan} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PositioningPlan} and HTTP response
     */
    updateBuildingPlanPositioningDeprecatedWithHttpInfo(buildingUuid, cloudPk, id, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'buildingUuid' is set
      if (buildingUuid === undefined || buildingUuid === null) {
        throw new Error("Missing the required parameter 'buildingUuid' when calling updateBuildingPlanPositioningDeprecated");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateBuildingPlanPositioningDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBuildingPlanPositioningDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateBuildingPlanPositioningDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateBuildingPlanPositioningDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateBuildingPlanPositioningDeprecated");
      }

      let pathParams = {
        'building_uuid': buildingUuid,
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PositioningPlan;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/{id}/positioning', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update the postioning of the plan in the building
     * Update the postioning of the plan in the building Required scopes: ifc:write, model:write
     * @param {String} buildingUuid 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this element.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PositioningPlan} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PositioningPlan}
     */
    updateBuildingPlanPositioningDeprecated(buildingUuid, cloudPk, id, ifcPk, projectPk, data) {
      return this.updateBuildingPlanPositioningDeprecatedWithHttpInfo(buildingUuid, cloudPk, id, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/IfcChecker} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IfcChecker} and HTTP response
     */
    updateCheckerDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateCheckerDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCheckerDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateCheckerDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateCheckerDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateCheckerDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IfcChecker;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/IfcChecker} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IfcChecker}
     */
    updateCheckerDeprecated(cloudPk, id, ifcPk, projectPk, data) {
      return this.updateCheckerDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a CheckerResult
     * Update some fields of a CheckerResult Required scopes: check:write
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/CheckerResult} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckerResult} and HTTP response
     */
    updateCheckerResultDeprecatedWithHttpInfo(checkerPk, cloudPk, id, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling updateCheckerResultDeprecated");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateCheckerResultDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCheckerResultDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateCheckerResultDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateCheckerResultDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateCheckerResultDeprecated");
      }

      let pathParams = {
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckerResult;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a CheckerResult
     * Update some fields of a CheckerResult Required scopes: check:write
     * @param {String} checkerPk 
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/CheckerResult} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckerResult}
     */
    updateCheckerResultDeprecated(checkerPk, cloudPk, id, ifcPk, projectPk, data) {
      return this.updateCheckerResultDeprecatedWithHttpInfo(checkerPk, cloudPk, id, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of an element
     * Update some fields of an element. The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @param {module:model/Element} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Element} and HTTP response
     */
    updateElementDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateElementDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateElementDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateElementDeprecated");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling updateElementDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateElementDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Element;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of an element
     * Update some fields of an element. The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @param {module:model/Element} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Element}
     */
    updateElementDeprecated(cloudPk, ifcPk, projectPk, uuid, data) {
      return this.updateElementDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a property from an element
     * Update a property value from an element. If the element is the only one to have this property, the property will be update in place. If many elements share this property, a new property will be created to replace the property for this element. Keeping the property for all other elements. If you want to update the property of all elements, see updateIfcProperty Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertysetPk 
     * @param {module:model/Property} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Property} and HTTP response
     */
    updateElementPropertySetPropertyDeprecatedWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk, propertysetPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateElementPropertySetPropertyDeprecated");
      }
      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling updateElementPropertySetPropertyDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateElementPropertySetPropertyDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateElementPropertySetPropertyDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateElementPropertySetPropertyDeprecated");
      }
      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling updateElementPropertySetPropertyDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateElementPropertySetPropertyDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'propertyset_pk': propertysetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Property;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a property from an element
     * Update a property value from an element. If the element is the only one to have this property, the property will be update in place. If many elements share this property, a new property will be created to replace the property for this element. Keeping the property for all other elements. If you want to update the property of all elements, see updateIfcProperty Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertysetPk 
     * @param {module:model/Property} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Property}
     */
    updateElementPropertySetPropertyDeprecated(cloudPk, elementUuid, id, ifcPk, projectPk, propertysetPk, data) {
      return this.updateElementPropertySetPropertyDeprecatedWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk, propertysetPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a model
     * Update some fields of a model Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {String} projectPk 
     * @param {module:model/Model} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Model} and HTTP response
     */
    updateIfcDeprecatedWithHttpInfo(cloudPk, id, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateIfcDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIfcDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateIfcDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateIfcDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a model
     * Update some fields of a model Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {String} projectPk 
     * @param {module:model/Model} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Model}
     */
    updateIfcDeprecated(cloudPk, id, projectPk, data) {
      return this.updateIfcDeprecatedWithHttpInfo(cloudPk, id, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update models file (gltf, svg, structure, etc)
     *          Patch model files (gltf, structure, svg, etc)  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {File} opts.structureFile 
     * @param {File} opts.systemsFile 
     * @param {File} opts.mapFile 
     * @param {File} opts.gltfFile 
     * @param {File} opts.gltfWithOpeningsFile 
     * @param {File} opts.bvhTreeFile 
     * @param {File} opts.viewer360File 
     * @param {File} opts.xktFile 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModelFiles} and HTTP response
     */
    updateIfcFilesDeprecatedWithHttpInfo(cloudPk, id, projectPk, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateIfcFilesDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIfcFilesDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateIfcFilesDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'structure_file': opts['structureFile'],
        'systems_file': opts['systemsFile'],
        'map_file': opts['mapFile'],
        'gltf_file': opts['gltfFile'],
        'gltf_with_openings_file': opts['gltfWithOpeningsFile'],
        'bvh_tree_file': opts['bvhTreeFile'],
        'viewer_360_file': opts['viewer360File'],
        'xkt_file': opts['xktFile']
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ModelFiles;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/files', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update models file (gltf, svg, structure, etc)
     *          Patch model files (gltf, structure, svg, etc)  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this model.
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {File} opts.structureFile 
     * @param {File} opts.systemsFile 
     * @param {File} opts.mapFile 
     * @param {File} opts.gltfFile 
     * @param {File} opts.gltfWithOpeningsFile 
     * @param {File} opts.bvhTreeFile 
     * @param {File} opts.viewer360File 
     * @param {File} opts.xktFile 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModelFiles}
     */
    updateIfcFilesDeprecated(cloudPk, id, projectPk, opts) {
      return this.updateIfcFilesDeprecatedWithHttpInfo(cloudPk, id, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of many PropertyDefinitions of a model
     *  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PropertyDefinition} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertyDefinition} and HTTP response
     */
    updateIfcPropertyDefinitionDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateIfcPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIfcPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateIfcPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateIfcPropertyDefinitionDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateIfcPropertyDefinitionDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PropertyDefinition;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of many PropertyDefinitions of a model
     *  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PropertyDefinition} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertyDefinition}
     */
    updateIfcPropertyDefinitionDeprecated(cloudPk, id, ifcPk, projectPk, data) {
      return this.updateIfcPropertyDefinitionDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a Property
     * Update some fields of a Property Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Property} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Property} and HTTP response
     */
    updateIfcPropertyDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateIfcPropertyDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIfcPropertyDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateIfcPropertyDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateIfcPropertyDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateIfcPropertyDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Property;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a Property
     * Update some fields of a Property Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Property} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Property}
     */
    updateIfcPropertyDeprecated(cloudPk, id, ifcPk, projectPk, data) {
      return this.updateIfcPropertyDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a Unit of a model
     *  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Unit} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Unit} and HTTP response
     */
    updateIfcUnitDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateIfcUnitDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIfcUnitDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateIfcUnitDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateIfcUnitDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateIfcUnitDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Unit;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a Unit of a model
     *  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Unit} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Unit}
     */
    updateIfcUnitDeprecated(cloudPk, id, ifcPk, projectPk, data) {
      return this.updateIfcUnitDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a layer
     * Update some fields of a layer. The IFC file will not be updated. The created layer will be accessible over the API and when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this layer.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Layer} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Layer} and HTTP response
     */
    updateLayerDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateLayerDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateLayerDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateLayerDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateLayerDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateLayerDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Layer;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a layer
     * Update some fields of a layer. The IFC file will not be updated. The created layer will be accessible over the API and when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this layer.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Layer} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Layer}
     */
    updateLayerDeprecated(cloudPk, id, ifcPk, projectPk, data) {
      return this.updateLayerDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update order of all plan of a building
     * Update order of all plan of a building Required scopes: ifc:write, model:write
     * @param {String} buildingUuid 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<String>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Storey} and HTTP response
     */
    updateOrderBuildingPlanDeprecatedWithHttpInfo(buildingUuid, cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'buildingUuid' is set
      if (buildingUuid === undefined || buildingUuid === null) {
        throw new Error("Missing the required parameter 'buildingUuid' when calling updateOrderBuildingPlanDeprecated");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateOrderBuildingPlanDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateOrderBuildingPlanDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateOrderBuildingPlanDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateOrderBuildingPlanDeprecated");
      }

      let pathParams = {
        'building_uuid': buildingUuid,
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Storey;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/order', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update order of all plan of a building
     * Update order of all plan of a building Required scopes: ifc:write, model:write
     * @param {String} buildingUuid 
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<String>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Storey}
     */
    updateOrderBuildingPlanDeprecated(buildingUuid, cloudPk, ifcPk, projectPk, data) {
      return this.updateOrderBuildingPlanDeprecatedWithHttpInfo(buildingUuid, cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update order of all plan of a storey
     * Update order of all plan of a storey Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} storeyUuid 
     * @param {Array.<String>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Storey} and HTTP response
     */
    updateOrderStoreyPlanDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, storeyUuid, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateOrderStoreyPlanDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateOrderStoreyPlanDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateOrderStoreyPlanDeprecated");
      }
      // verify the required parameter 'storeyUuid' is set
      if (storeyUuid === undefined || storeyUuid === null) {
        throw new Error("Missing the required parameter 'storeyUuid' when calling updateOrderStoreyPlanDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateOrderStoreyPlanDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'storey_uuid': storeyUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Storey;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/order', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update order of all plan of a storey
     * Update order of all plan of a storey Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} storeyUuid 
     * @param {Array.<String>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Storey}
     */
    updateOrderStoreyPlanDeprecated(cloudPk, ifcPk, projectPk, storeyUuid, data) {
      return this.updateOrderStoreyPlanDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, storeyUuid, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update order of all storey of a model
     * Update order of all storey of a model Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<String>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Storey>} and HTTP response
     */
    updateOrderStoreysDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateOrderStoreysDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateOrderStoreysDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateOrderStoreysDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateOrderStoreysDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Storey];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/order', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update order of all storey of a model
     * Update order of all storey of a model Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<String>} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Storey>}
     */
    updateOrderStoreysDeprecated(cloudPk, ifcPk, projectPk, data) {
      return this.updateOrderStoreysDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the status of a processor handler
     *  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this processor handler.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/ProcessorHandler} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProcessorHandler} and HTTP response
     */
    updateProcessorHandlerDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateProcessorHandlerDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProcessorHandlerDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateProcessorHandlerDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateProcessorHandlerDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateProcessorHandlerDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProcessorHandler;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update the status of a processor handler
     *  Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this processor handler.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/ProcessorHandler} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProcessorHandler}
     */
    updateProcessorHandlerDeprecated(cloudPk, id, ifcPk, projectPk, data) {
      return this.updateProcessorHandlerDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a PropertySet
     * Update some fields of a PropertySet Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PropertySet} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertySet} and HTTP response
     */
    updatePropertySetDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updatePropertySetDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePropertySetDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updatePropertySetDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updatePropertySetDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updatePropertySetDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PropertySet;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a PropertySet
     * Update some fields of a PropertySet Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PropertySet} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertySet}
     */
    updatePropertySetDeprecated(cloudPk, id, ifcPk, projectPk, data) {
      return this.updatePropertySetDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a space
     * Update some fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Space} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Space} and HTTP response
     */
    updateSpaceDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateSpaceDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSpaceDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateSpaceDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateSpaceDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateSpaceDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Space;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a space
     * Update some fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Space} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Space}
     */
    updateSpaceDeprecated(cloudPk, id, ifcPk, projectPk, data) {
      return this.updateSpaceDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a storey
     * Update some fields of a storey Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @param {module:model/InlineObject7} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response
     */
    updateStoreyDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateStoreyDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateStoreyDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateStoreyDeprecated");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling updateStoreyDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateStoreyDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{uuid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a storey
     * Update some fields of a storey Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @param {module:model/InlineObject7} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002}
     */
    updateStoreyDeprecated(cloudPk, ifcPk, projectPk, uuid, data) {
      return this.updateStoreyDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the postioning of the plan in the storey
     * Update the postioning of the plan in the storey Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this element.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} storeyUuid 
     * @param {module:model/PositioningPlan} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PositioningPlan} and HTTP response
     */
    updateStoreyPlanPositioningDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, storeyUuid, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateStoreyPlanPositioningDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateStoreyPlanPositioningDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateStoreyPlanPositioningDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateStoreyPlanPositioningDeprecated");
      }
      // verify the required parameter 'storeyUuid' is set
      if (storeyUuid === undefined || storeyUuid === null) {
        throw new Error("Missing the required parameter 'storeyUuid' when calling updateStoreyPlanPositioningDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateStoreyPlanPositioningDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'storey_uuid': storeyUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PositioningPlan;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/{id}/positioning', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update the postioning of the plan in the storey
     * Update the postioning of the plan in the storey Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this element.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} storeyUuid 
     * @param {module:model/PositioningPlan} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PositioningPlan}
     */
    updateStoreyPlanPositioningDeprecated(cloudPk, id, ifcPk, projectPk, storeyUuid, data) {
      return this.updateStoreyPlanPositioningDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, storeyUuid, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a system
     * Update some fields of a system. The IFC file will not be updated. The created system will be accessible over the API and when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC sytem or system type UUID
     * @param {module:model/System} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/System} and HTTP response
     */
    updateSystemDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateSystemDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateSystemDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateSystemDeprecated");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling updateSystemDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateSystemDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = System;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system/{uuid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a system
     * Update some fields of a system. The IFC file will not be updated. The created system will be accessible over the API and when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC sytem or system type UUID
     * @param {module:model/System} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/System}
     */
    updateSystemDeprecated(cloudPk, ifcPk, projectPk, uuid, data) {
      return this.updateSystemDeprecatedWithHttpInfo(cloudPk, ifcPk, projectPk, uuid, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a zone
     * Update some fields of a zone. The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this zone.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Zone} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Zone} and HTTP response
     */
    updateZoneDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateZoneDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateZoneDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateZoneDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateZoneDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateZoneDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Zone;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a zone
     * Update some fields of a zone. The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this zone.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Zone} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Zone}
     */
    updateZoneDeprecated(cloudPk, id, ifcPk, projectPk, data) {
      return this.updateZoneDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a space
     * Update some fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @param {module:model/ZoneSpace} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ZoneSpace} and HTTP response
     */
    updateZoneSpaceDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, zonePk, data) {
      let postBody = data;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateZoneSpaceDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateZoneSpaceDeprecated");
      }
      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateZoneSpaceDeprecated");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateZoneSpaceDeprecated");
      }
      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling updateZoneSpaceDeprecated");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateZoneSpaceDeprecated");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'zone_pk': zonePk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer', 'bimdata_connect', 'client_credentials'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ZoneSpace;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a space
     * Update some fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write, model:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @param {module:model/ZoneSpace} data 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ZoneSpace}
     */
    updateZoneSpaceDeprecated(cloudPk, id, ifcPk, projectPk, zonePk, data) {
      return this.updateZoneSpaceDeprecatedWithHttpInfo(cloudPk, id, ifcPk, projectPk, zonePk, data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
