/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * OpenAPI spec version: v1
 * Contact: contact@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Classification', 'model/Element', 'model/ElementClassificationRelation', 'model/ElementPropertySetRelation', 'model/Ifc', 'model/IfcFiles', 'model/Property', 'model/PropertyDefinition', 'model/PropertySet', 'model/RawElements', 'model/Space', 'model/Unit', 'model/Zone', 'model/ZoneSpace'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Classification'), require('../model/Element'), require('../model/ElementClassificationRelation'), require('../model/ElementPropertySetRelation'), require('../model/Ifc'), require('../model/IfcFiles'), require('../model/Property'), require('../model/PropertyDefinition'), require('../model/PropertySet'), require('../model/RawElements'), require('../model/Space'), require('../model/Unit'), require('../model/Zone'), require('../model/ZoneSpace'));
  } else {
    // Browser globals (root is window)
    if (!root.bimdata) {
      root.bimdata = {};
    }
    root.bimdata.IfcApi = factory(root.bimdata.ApiClient, root.bimdata.Classification, root.bimdata.Element, root.bimdata.ElementClassificationRelation, root.bimdata.ElementPropertySetRelation, root.bimdata.Ifc, root.bimdata.IfcFiles, root.bimdata.Property, root.bimdata.PropertyDefinition, root.bimdata.PropertySet, root.bimdata.RawElements, root.bimdata.Space, root.bimdata.Unit, root.bimdata.Zone, root.bimdata.ZoneSpace);
  }
}(this, function(ApiClient, Classification, Element, ElementClassificationRelation, ElementPropertySetRelation, Ifc, IfcFiles, Property, PropertyDefinition, PropertySet, RawElements, Space, Unit, Zone, ZoneSpace) {
  'use strict';

  /**
   * Ifc service.
   * @module api/IfcApi
   * @version 0.0.0
   */

  /**
   * Constructs a new IfcApi. 
   * @alias module:api/IfcApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Remove all classifications from model&#39;s elements
     *              Delete relation between filtered classifications (eg. /classifications?name&#x3D;untec) and all ifc&#39;s elements.             No classification will be deleted on this endpoint, only the relation between ifc&#39;s elements and their classification.          Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.bulkDeleteIfcClassificationsWithHttpInfo = function(cloudPk, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeleteIfcClassifications");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkDeleteIfcClassifications");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeleteIfcClassifications");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/list_destroy', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove all classifications from model&#39;s elements
     *              Delete relation between filtered classifications (eg. /classifications?name&#x3D;untec) and all ifc&#39;s elements.             No classification will be deleted on this endpoint, only the relation between ifc&#39;s elements and their classification.          Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.bulkDeleteIfcClassifications = function(cloudPk, ifcPk, projectPk) {
      return this.bulkDeleteIfcClassificationsWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete many Property of a model
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.bulkDeleteIfcPropertiesWithHttpInfo = function(cloudPk, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeleteIfcProperties");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkDeleteIfcProperties");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeleteIfcProperties");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_destroy', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete many Property of a model
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.bulkDeleteIfcProperties = function(cloudPk, ifcPk, projectPk) {
      return this.bulkDeleteIfcPropertiesWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete many PropertyDefinitions of a model
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.bulkDeleteIfcPropertyDefinitionsWithHttpInfo = function(cloudPk, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeleteIfcPropertyDefinitions");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkDeleteIfcPropertyDefinitions");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeleteIfcPropertyDefinitions");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/bulk_destroy', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete many PropertyDefinitions of a model
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.bulkDeleteIfcPropertyDefinitions = function(cloudPk, ifcPk, projectPk) {
      return this.bulkDeleteIfcPropertyDefinitionsWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete many Units of a model
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.bulkDeleteIfcUnitsWithHttpInfo = function(cloudPk, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeleteIfcUnits");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkDeleteIfcUnits");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeleteIfcUnits");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/bulk_destroy', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete many Units of a model
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.bulkDeleteIfcUnits = function(cloudPk, ifcPk, projectPk) {
      return this.bulkDeleteIfcUnitsWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete many PropertySet of a model
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.bulkDeletePropertySetWithHttpInfo = function(cloudPk, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkDeletePropertySet");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkDeletePropertySet");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkDeletePropertySet");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/bulk_destroy', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete many PropertySet of a model
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.bulkDeletePropertySet = function(cloudPk, ifcPk, projectPk) {
      return this.bulkDeletePropertySetWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update many elements at once (only changing fields may be defined)
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we&#39;ll be 400 with the list of errors      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Element>} element 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Element>} and HTTP response
     */
    this.bulkFullUpdateElementsWithHttpInfo = function(cloudPk, ifcPk, projectPk, element) {
      var postBody = element;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkFullUpdateElements");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkFullUpdateElements");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkFullUpdateElements");
      }

      // verify the required parameter 'element' is set
      if (element === undefined || element === null) {
        throw new Error("Missing the required parameter 'element' when calling bulkFullUpdateElements");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Element];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/bulk_update', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update many elements at once (only changing fields may be defined)
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we&#39;ll be 400 with the list of errors      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Element>} element 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Element>}
     */
    this.bulkFullUpdateElements = function(cloudPk, ifcPk, projectPk, element) {
      return this.bulkFullUpdateElementsWithHttpInfo(cloudPk, ifcPk, projectPk, element)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of many properties of a model
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we&#39;ll be 400 with the list of errors      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Property>} property 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Property>} and HTTP response
     */
    this.bulkFullUpdateIfcPropertyWithHttpInfo = function(cloudPk, ifcPk, projectPk, property) {
      var postBody = property;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkFullUpdateIfcProperty");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkFullUpdateIfcProperty");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkFullUpdateIfcProperty");
      }

      // verify the required parameter 'property' is set
      if (property === undefined || property === null) {
        throw new Error("Missing the required parameter 'property' when calling bulkFullUpdateIfcProperty");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Property];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_update', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update some fields of many properties of a model
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we&#39;ll be 400 with the list of errors      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Property>} property 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Property>}
     */
    this.bulkFullUpdateIfcProperty = function(cloudPk, ifcPk, projectPk, property) {
      return this.bulkFullUpdateIfcPropertyWithHttpInfo(cloudPk, ifcPk, projectPk, property)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove many classifications from an element
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.bulkRemoveClassificationsOfElementWithHttpInfo = function(cloudPk, elementUuid, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkRemoveClassificationsOfElement");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling bulkRemoveClassificationsOfElement");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkRemoveClassificationsOfElement");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkRemoveClassificationsOfElement");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification/bulk_destroy', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove many classifications from an element
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.bulkRemoveClassificationsOfElement = function(cloudPk, elementUuid, ifcPk, projectPk) {
      return this.bulkRemoveClassificationsOfElementWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove the classifications from all elements
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcClassificationPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.bulkRemoveElementsFromClassificationWithHttpInfo = function(cloudPk, ifcClassificationPk, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkRemoveElementsFromClassification");
      }

      // verify the required parameter 'ifcClassificationPk' is set
      if (ifcClassificationPk === undefined || ifcClassificationPk === null) {
        throw new Error("Missing the required parameter 'ifcClassificationPk' when calling bulkRemoveElementsFromClassification");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkRemoveElementsFromClassification");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkRemoveElementsFromClassification");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_classification_pk': ifcClassificationPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{ifc_classification_pk}/element/bulk_destroy', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove the classifications from all elements
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcClassificationPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.bulkRemoveElementsFromClassification = function(cloudPk, ifcClassificationPk, ifcPk, projectPk) {
      return this.bulkRemoveElementsFromClassificationWithHttpInfo(cloudPk, ifcClassificationPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update many elements at once (all field must be defined)
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we&#39;ll be 400 with the list of errors      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Element>} element 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Element>} and HTTP response
     */
    this.bulkUpdateElementsWithHttpInfo = function(cloudPk, ifcPk, projectPk, element) {
      var postBody = element;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkUpdateElements");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkUpdateElements");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkUpdateElements");
      }

      // verify the required parameter 'element' is set
      if (element === undefined || element === null) {
        throw new Error("Missing the required parameter 'element' when calling bulkUpdateElements");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Element];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/bulk_update', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update many elements at once (all field must be defined)
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we&#39;ll be 400 with the list of errors      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Element>} element 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Element>}
     */
    this.bulkUpdateElements = function(cloudPk, ifcPk, projectPk, element) {
      return this.bulkUpdateElementsWithHttpInfo(cloudPk, ifcPk, projectPk, element)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of many properties of a model
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we&#39;ll be 400 with the list of errors      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Property>} property 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Property>} and HTTP response
     */
    this.bulkUpdateIfcPropertyWithHttpInfo = function(cloudPk, ifcPk, projectPk, property) {
      var postBody = property;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling bulkUpdateIfcProperty");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling bulkUpdateIfcProperty");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling bulkUpdateIfcProperty");
      }

      // verify the required parameter 'property' is set
      if (property === undefined || property === null) {
        throw new Error("Missing the required parameter 'property' when calling bulkUpdateIfcProperty");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Property];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_update', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update all fields of many properties of a model
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we&#39;ll be 400 with the list of errors      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Property>} property 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Property>}
     */
    this.bulkUpdateIfcProperty = function(cloudPk, ifcPk, projectPk, property) {
      return this.bulkUpdateIfcPropertyWithHttpInfo(cloudPk, ifcPk, projectPk, property)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create association between existing classification and existing element
     * Create association between existing classification and existing element Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<ElementClassificationRelation>} elementClassificationRelation 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.createClassificationElementRelationsWithHttpInfo = function(cloudPk, ifcPk, projectPk, elementClassificationRelation) {
      var postBody = elementClassificationRelation;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createClassificationElementRelations");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createClassificationElementRelations");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createClassificationElementRelations");
      }

      // verify the required parameter 'elementClassificationRelation' is set
      if (elementClassificationRelation === undefined || elementClassificationRelation === null) {
        throw new Error("Missing the required parameter 'elementClassificationRelation' when calling createClassificationElementRelations");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification-element', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create association between existing classification and existing element
     * Create association between existing classification and existing element Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<ElementClassificationRelation>} elementClassificationRelation 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.createClassificationElementRelations = function(cloudPk, ifcPk, projectPk, elementClassificationRelation) {
      return this.createClassificationElementRelationsWithHttpInfo(cloudPk, ifcPk, projectPk, elementClassificationRelation)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create one or many classifications to an element
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we&#39;ll be 400 with the list of errors          If classification created already exists, it will just be added to item&#39;s classifications and will not be duplicated      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Classification>} classification 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Classification>} and HTTP response
     */
    this.createClassificationsOfElementWithHttpInfo = function(cloudPk, elementUuid, ifcPk, projectPk, classification) {
      var postBody = classification;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createClassificationsOfElement");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createClassificationsOfElement");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createClassificationsOfElement");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createClassificationsOfElement");
      }

      // verify the required parameter 'classification' is set
      if (classification === undefined || classification === null) {
        throw new Error("Missing the required parameter 'classification' when calling createClassificationsOfElement");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Classification];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create one or many classifications to an element
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we&#39;ll be 400 with the list of errors          If classification created already exists, it will just be added to item&#39;s classifications and will not be duplicated      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Classification>} classification 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Classification>}
     */
    this.createClassificationsOfElement = function(cloudPk, elementUuid, ifcPk, projectPk, classification) {
      return this.createClassificationsOfElementWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, classification)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an element in the model
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we&#39;ll be 400 with the list of errors      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Element>} element 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Element>} and HTTP response
     */
    this.createElementWithHttpInfo = function(cloudPk, ifcPk, projectPk, element) {
      var postBody = element;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElement");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createElement");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElement");
      }

      // verify the required parameter 'element' is set
      if (element === undefined || element === null) {
        throw new Error("Missing the required parameter 'element' when calling createElement");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Element];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an element in the model
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we&#39;ll be 400 with the list of errors      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Element>} element 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Element>}
     */
    this.createElement = function(cloudPk, ifcPk, projectPk, element) {
      return this.createElementWithHttpInfo(cloudPk, ifcPk, projectPk, element)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a PropertySets to an element
     * Create a PropertySets that will be automatically linked to the element Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PropertySet} propertySet 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertySet} and HTTP response
     */
    this.createElementPropertySetWithHttpInfo = function(cloudPk, elementUuid, ifcPk, projectPk, propertySet) {
      var postBody = propertySet;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElementPropertySet");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createElementPropertySet");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createElementPropertySet");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElementPropertySet");
      }

      // verify the required parameter 'propertySet' is set
      if (propertySet === undefined || propertySet === null) {
        throw new Error("Missing the required parameter 'propertySet' when calling createElementPropertySet");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PropertySet;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a PropertySets to an element
     * Create a PropertySets that will be automatically linked to the element Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PropertySet} propertySet 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertySet}
     */
    this.createElementPropertySet = function(cloudPk, elementUuid, ifcPk, projectPk, propertySet) {
      return this.createElementPropertySetWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, propertySet)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a property to a PropertySet
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertysetPk 
     * @param {module:model/Property} property 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Property} and HTTP response
     */
    this.createElementPropertySetPropertyWithHttpInfo = function(cloudPk, elementUuid, ifcPk, projectPk, propertysetPk, property) {
      var postBody = property;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElementPropertySetProperty");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createElementPropertySetProperty");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createElementPropertySetProperty");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElementPropertySetProperty");
      }

      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling createElementPropertySetProperty");
      }

      // verify the required parameter 'property' is set
      if (property === undefined || property === null) {
        throw new Error("Missing the required parameter 'property' when calling createElementPropertySetProperty");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'propertyset_pk': propertysetPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Property;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a property to a PropertySet
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertysetPk 
     * @param {module:model/Property} property 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Property}
     */
    this.createElementPropertySetProperty = function(cloudPk, elementUuid, ifcPk, projectPk, propertysetPk, property) {
      return this.createElementPropertySetPropertyWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, propertysetPk, property)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Definition to a Property
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @param {module:model/PropertyDefinition} propertyDefinition 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertyDefinition} and HTTP response
     */
    this.createElementPropertySetPropertyDefinitionWithHttpInfo = function(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertysetPk, propertyDefinition) {
      var postBody = propertyDefinition;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling createElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling createElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'propertyDefinition' is set
      if (propertyDefinition === undefined || propertyDefinition === null) {
        throw new Error("Missing the required parameter 'propertyDefinition' when calling createElementPropertySetPropertyDefinition");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertyset_pk': propertysetPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PropertyDefinition;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a Definition to a Property
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @param {module:model/PropertyDefinition} propertyDefinition 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertyDefinition}
     */
    this.createElementPropertySetPropertyDefinition = function(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertysetPk, propertyDefinition) {
      return this.createElementPropertySetPropertyDefinitionWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertysetPk, propertyDefinition)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Unit to a Definition
     * Create a Unit to a Definition Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertydefinitionPk 
     * @param {String} propertysetPk 
     * @param {module:model/Unit} unit 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Unit} and HTTP response
     */
    this.createElementPropertySetPropertyDefinitionUnitWithHttpInfo = function(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk, unit) {
      var postBody = unit;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling createElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling createElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'propertydefinitionPk' is set
      if (propertydefinitionPk === undefined || propertydefinitionPk === null) {
        throw new Error("Missing the required parameter 'propertydefinitionPk' when calling createElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling createElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'unit' is set
      if (unit === undefined || unit === null) {
        throw new Error("Missing the required parameter 'unit' when calling createElementPropertySetPropertyDefinitionUnit");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertydefinition_pk': propertydefinitionPk,
        'propertyset_pk': propertysetPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Unit;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a Unit to a Definition
     * Create a Unit to a Definition Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertydefinitionPk 
     * @param {String} propertysetPk 
     * @param {module:model/Unit} unit 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Unit}
     */
    this.createElementPropertySetPropertyDefinitionUnit = function(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk, unit) {
      return this.createElementPropertySetPropertyDefinitionUnitWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk, unit)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a PropertyDefinition on the model
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we&#39;ll be 400 with the list of errors      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<PropertyDefinition>} propertyDefinition 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PropertyDefinition>} and HTTP response
     */
    this.createIfcPropertyDefinitionWithHttpInfo = function(cloudPk, ifcPk, projectPk, propertyDefinition) {
      var postBody = propertyDefinition;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createIfcPropertyDefinition");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createIfcPropertyDefinition");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createIfcPropertyDefinition");
      }

      // verify the required parameter 'propertyDefinition' is set
      if (propertyDefinition === undefined || propertyDefinition === null) {
        throw new Error("Missing the required parameter 'propertyDefinition' when calling createIfcPropertyDefinition");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PropertyDefinition];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a PropertyDefinition on the model
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we&#39;ll be 400 with the list of errors      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<PropertyDefinition>} propertyDefinition 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PropertyDefinition>}
     */
    this.createIfcPropertyDefinition = function(cloudPk, ifcPk, projectPk, propertyDefinition) {
      return this.createIfcPropertyDefinitionWithHttpInfo(cloudPk, ifcPk, projectPk, propertyDefinition)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Unit on a model
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we&#39;ll be 400 with the list of errors      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Unit>} unit 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Unit>} and HTTP response
     */
    this.createIfcUnitWithHttpInfo = function(cloudPk, ifcPk, projectPk, unit) {
      var postBody = unit;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createIfcUnit");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createIfcUnit");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createIfcUnit");
      }

      // verify the required parameter 'unit' is set
      if (unit === undefined || unit === null) {
        throw new Error("Missing the required parameter 'unit' when calling createIfcUnit");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Unit];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a Unit on a model
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we&#39;ll be 400 with the list of errors      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Unit>} unit 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Unit>}
     */
    this.createIfcUnit = function(cloudPk, ifcPk, projectPk, unit) {
      return this.createIfcUnitWithHttpInfo(cloudPk, ifcPk, projectPk, unit)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a PropertySet
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we&#39;ll be 400 with the list of errors      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<PropertySet>} propertySet 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PropertySet>} and HTTP response
     */
    this.createPropertySetWithHttpInfo = function(cloudPk, ifcPk, projectPk, propertySet) {
      var postBody = propertySet;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createPropertySet");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createPropertySet");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createPropertySet");
      }

      // verify the required parameter 'propertySet' is set
      if (propertySet === undefined || propertySet === null) {
        throw new Error("Missing the required parameter 'propertySet' when calling createPropertySet");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PropertySet];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a PropertySet
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we&#39;ll be 400 with the list of errors      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<PropertySet>} propertySet 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PropertySet>}
     */
    this.createPropertySet = function(cloudPk, ifcPk, projectPk, propertySet) {
      return this.createPropertySetWithHttpInfo(cloudPk, ifcPk, projectPk, propertySet)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create association between PropertySet and element
     * Create association between existing PropertySet and existing element Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<ElementPropertySetRelation>} elementPropertySetRelation 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.createPropertySetElementRelationsWithHttpInfo = function(cloudPk, ifcPk, projectPk, elementPropertySetRelation) {
      var postBody = elementPropertySetRelation;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createPropertySetElementRelations");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createPropertySetElementRelations");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createPropertySetElementRelations");
      }

      // verify the required parameter 'elementPropertySetRelation' is set
      if (elementPropertySetRelation === undefined || elementPropertySetRelation === null) {
        throw new Error("Missing the required parameter 'elementPropertySetRelation' when calling createPropertySetElementRelations");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset-element', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create association between PropertySet and element
     * Create association between existing PropertySet and existing element Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<ElementPropertySetRelation>} elementPropertySetRelation 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.createPropertySetElementRelations = function(cloudPk, ifcPk, projectPk, elementPropertySetRelation) {
      return this.createPropertySetElementRelationsWithHttpInfo(cloudPk, ifcPk, projectPk, elementPropertySetRelation)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create elements in an optimized format
     *          You can use the same optimized structure to post multiple elements, property_sets, properties, definitions and units at once.         If the structure is malformed, an error 500 without more explaination may be returned          Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/RawElements} rawElements 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.createRawElementsWithHttpInfo = function(cloudPk, ifcPk, projectPk, rawElements) {
      var postBody = rawElements;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createRawElements");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createRawElements");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createRawElements");
      }

      // verify the required parameter 'rawElements' is set
      if (rawElements === undefined || rawElements === null) {
        throw new Error("Missing the required parameter 'rawElements' when calling createRawElements");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/raw', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create elements in an optimized format
     *          You can use the same optimized structure to post multiple elements, property_sets, properties, definitions and units at once.         If the structure is malformed, an error 500 without more explaination may be returned          Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/RawElements} rawElements 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.createRawElements = function(cloudPk, ifcPk, projectPk, rawElements) {
      return this.createRawElementsWithHttpInfo(cloudPk, ifcPk, projectPk, rawElements)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a space in the model
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we&#39;ll be 400 with the list of errors      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Space>} space 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Space>} and HTTP response
     */
    this.createSpaceWithHttpInfo = function(cloudPk, ifcPk, projectPk, space) {
      var postBody = space;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createSpace");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createSpace");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createSpace");
      }

      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling createSpace");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Space];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a space in the model
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we&#39;ll be 400 with the list of errors      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Space>} space 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Space>}
     */
    this.createSpace = function(cloudPk, ifcPk, projectPk, space) {
      return this.createSpaceWithHttpInfo(cloudPk, ifcPk, projectPk, space)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a zone in the model
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we&#39;ll be 400 with the list of errors      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Zone>} zone 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Zone>} and HTTP response
     */
    this.createZoneWithHttpInfo = function(cloudPk, ifcPk, projectPk, zone) {
      var postBody = zone;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createZone");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createZone");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createZone");
      }

      // verify the required parameter 'zone' is set
      if (zone === undefined || zone === null) {
        throw new Error("Missing the required parameter 'zone' when calling createZone");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Zone];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a zone in the model
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we&#39;ll be 400 with the list of errors      Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Array.<Zone>} zone 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Zone>}
     */
    this.createZone = function(cloudPk, ifcPk, projectPk, zone) {
      return this.createZoneWithHttpInfo(cloudPk, ifcPk, projectPk, zone)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a space in a zone
     * The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @param {module:model/ZoneSpace} zoneSpace 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ZoneSpace} and HTTP response
     */
    this.createZoneSpaceWithHttpInfo = function(cloudPk, ifcPk, projectPk, zonePk, zoneSpace) {
      var postBody = zoneSpace;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createZoneSpace");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling createZoneSpace");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createZoneSpace");
      }

      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling createZoneSpace");
      }

      // verify the required parameter 'zoneSpace' is set
      if (zoneSpace === undefined || zoneSpace === null) {
        throw new Error("Missing the required parameter 'zoneSpace' when calling createZoneSpace");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'zone_pk': zonePk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ZoneSpace;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a space in a zone
     * The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @param {module:model/ZoneSpace} zoneSpace 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ZoneSpace}
     */
    this.createZoneSpace = function(cloudPk, ifcPk, projectPk, zonePk, zoneSpace) {
      return this.createZoneSpaceWithHttpInfo(cloudPk, ifcPk, projectPk, zonePk, zoneSpace)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a zone of a model
     * The IFC file will not be updated. The remaining elements are available in API and will be available when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteElementWithHttpInfo = function(cloudPk, ifcPk, projectPk, uuid) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteElement");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteElement");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteElement");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteElement");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a zone of a model
     * The IFC file will not be updated. The remaining elements are available in API and will be available when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteElement = function(cloudPk, ifcPk, projectPk, uuid) {
      return this.deleteElementWithHttpInfo(cloudPk, ifcPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a model
     * It will delete the related document too Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteIfcWithHttpInfo = function(cloudPk, id, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteIfc");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteIfc");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteIfc");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a model
     * It will delete the related document too Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteIfc = function(cloudPk, id, projectPk) {
      return this.deleteIfcWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Property of a model
     * Delete a Property of a model Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteIfcPropertyWithHttpInfo = function(cloudPk, id, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteIfcProperty");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteIfcProperty");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteIfcProperty");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteIfcProperty");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a Property of a model
     * Delete a Property of a model Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteIfcProperty = function(cloudPk, id, ifcPk, projectPk) {
      return this.deleteIfcPropertyWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a PropertyDefinitions of a model
     * Delete a PropertyDefinitions of a model Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteIfcPropertyDefinitionWithHttpInfo = function(cloudPk, id, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteIfcPropertyDefinition");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteIfcPropertyDefinition");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteIfcPropertyDefinition");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteIfcPropertyDefinition");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a PropertyDefinitions of a model
     * Delete a PropertyDefinitions of a model Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteIfcPropertyDefinition = function(cloudPk, id, ifcPk, projectPk) {
      return this.deleteIfcPropertyDefinitionWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Unit of a model
     * Delete a Unit of a model Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteIfcUnitWithHttpInfo = function(cloudPk, id, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteIfcUnit");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteIfcUnit");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteIfcUnit");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteIfcUnit");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a Unit of a model
     * Delete a Unit of a model Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteIfcUnit = function(cloudPk, id, ifcPk, projectPk) {
      return this.deleteIfcUnitWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a PropertySet of a model
     * Delete a PropertySet of a model Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deletePropertySetWithHttpInfo = function(cloudPk, id, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deletePropertySet");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePropertySet");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deletePropertySet");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deletePropertySet");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a PropertySet of a model
     * Delete a PropertySet of a model Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deletePropertySet = function(cloudPk, id, ifcPk, projectPk) {
      return this.deletePropertySetWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a space
     * It will not delete related zones. The IFC file will not be updated. The remaining spaces are available in API and will be available when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSpaceWithHttpInfo = function(cloudPk, id, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteSpace");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSpace");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteSpace");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteSpace");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a space
     * It will not delete related zones. The IFC file will not be updated. The remaining spaces are available in API and will be available when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSpace = function(cloudPk, id, ifcPk, projectPk) {
      return this.deleteSpaceWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a zone of a model
     * The IFC file will not be updated. The remaining zones are available in API and will be available when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this zone.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteZoneWithHttpInfo = function(cloudPk, id, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteZone");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteZone");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteZone");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteZone");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a zone of a model
     * The IFC file will not be updated. The remaining zones are available in API and will be available when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this zone.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteZone = function(cloudPk, id, ifcPk, projectPk) {
      return this.deleteZoneWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a space of a zone
     * The IFC file will not be updated. The remaining spaces are available in API and will be available when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteZoneSpaceWithHttpInfo = function(cloudPk, id, ifcPk, projectPk, zonePk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteZoneSpace");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteZoneSpace");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling deleteZoneSpace");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteZoneSpace");
      }

      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling deleteZoneSpace");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'zone_pk': zonePk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a space of a zone
     * The IFC file will not be updated. The remaining spaces are available in API and will be available when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteZoneSpace = function(cloudPk, id, ifcPk, projectPk, zonePk) {
      return this.deleteZoneSpaceWithHttpInfo(cloudPk, id, ifcPk, projectPk, zonePk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of an element
     * Update all fields of a element. The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @param {module:model/Element} element 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Element} and HTTP response
     */
    this.fullUpdateElementWithHttpInfo = function(cloudPk, ifcPk, projectPk, uuid, element) {
      var postBody = element;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateElement");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateElement");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateElement");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling fullUpdateElement");
      }

      // verify the required parameter 'element' is set
      if (element === undefined || element === null) {
        throw new Error("Missing the required parameter 'element' when calling fullUpdateElement");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Element;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update all fields of an element
     * Update all fields of a element. The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @param {module:model/Element} element 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Element}
     */
    this.fullUpdateElement = function(cloudPk, ifcPk, projectPk, uuid, element) {
      return this.fullUpdateElementWithHttpInfo(cloudPk, ifcPk, projectPk, uuid, element)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of a model
     * Update all fields of a model Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @param {module:model/Ifc} ifc 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ifc} and HTTP response
     */
    this.fullUpdateIfcWithHttpInfo = function(cloudPk, id, projectPk, ifc) {
      var postBody = ifc;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateIfc");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateIfc");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateIfc");
      }

      // verify the required parameter 'ifc' is set
      if (ifc === undefined || ifc === null) {
        throw new Error("Missing the required parameter 'ifc' when calling fullUpdateIfc");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Ifc;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update all fields of a model
     * Update all fields of a model Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @param {module:model/Ifc} ifc 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ifc}
     */
    this.fullUpdateIfc = function(cloudPk, id, projectPk, ifc) {
      return this.fullUpdateIfcWithHttpInfo(cloudPk, id, projectPk, ifc)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a Property
     * Update some fields of a Property Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Property} property 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Property} and HTTP response
     */
    this.fullUpdateIfcPropertyWithHttpInfo = function(cloudPk, id, ifcPk, projectPk, property) {
      var postBody = property;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateIfcProperty");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateIfcProperty");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateIfcProperty");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateIfcProperty");
      }

      // verify the required parameter 'property' is set
      if (property === undefined || property === null) {
        throw new Error("Missing the required parameter 'property' when calling fullUpdateIfcProperty");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Property;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update some fields of a Property
     * Update some fields of a Property Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Property} property 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Property}
     */
    this.fullUpdateIfcProperty = function(cloudPk, id, ifcPk, projectPk, property) {
      return this.fullUpdateIfcPropertyWithHttpInfo(cloudPk, id, ifcPk, projectPk, property)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of many PropertyDefinitions of a model
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PropertyDefinition} propertyDefinition 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertyDefinition} and HTTP response
     */
    this.fullUpdateIfcPropertyDefinitionWithHttpInfo = function(cloudPk, id, ifcPk, projectPk, propertyDefinition) {
      var postBody = propertyDefinition;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateIfcPropertyDefinition");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateIfcPropertyDefinition");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateIfcPropertyDefinition");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateIfcPropertyDefinition");
      }

      // verify the required parameter 'propertyDefinition' is set
      if (propertyDefinition === undefined || propertyDefinition === null) {
        throw new Error("Missing the required parameter 'propertyDefinition' when calling fullUpdateIfcPropertyDefinition");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PropertyDefinition;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update all fields of many PropertyDefinitions of a model
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PropertyDefinition} propertyDefinition 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertyDefinition}
     */
    this.fullUpdateIfcPropertyDefinition = function(cloudPk, id, ifcPk, projectPk, propertyDefinition) {
      return this.fullUpdateIfcPropertyDefinitionWithHttpInfo(cloudPk, id, ifcPk, projectPk, propertyDefinition)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of a Unit of a model
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Unit} unit 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Unit} and HTTP response
     */
    this.fullUpdateIfcUnitWithHttpInfo = function(cloudPk, id, ifcPk, projectPk, unit) {
      var postBody = unit;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateIfcUnit");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateIfcUnit");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateIfcUnit");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateIfcUnit");
      }

      // verify the required parameter 'unit' is set
      if (unit === undefined || unit === null) {
        throw new Error("Missing the required parameter 'unit' when calling fullUpdateIfcUnit");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Unit;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update all fields of a Unit of a model
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Unit} unit 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Unit}
     */
    this.fullUpdateIfcUnit = function(cloudPk, id, ifcPk, projectPk, unit) {
      return this.fullUpdateIfcUnitWithHttpInfo(cloudPk, id, ifcPk, projectPk, unit)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of a PropertySet
     * Update all fields of a PropertySet Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PropertySet} propertySet 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertySet} and HTTP response
     */
    this.fullUpdatePropertySetWithHttpInfo = function(cloudPk, id, ifcPk, projectPk, propertySet) {
      var postBody = propertySet;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdatePropertySet");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdatePropertySet");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdatePropertySet");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdatePropertySet");
      }

      // verify the required parameter 'propertySet' is set
      if (propertySet === undefined || propertySet === null) {
        throw new Error("Missing the required parameter 'propertySet' when calling fullUpdatePropertySet");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PropertySet;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update all fields of a PropertySet
     * Update all fields of a PropertySet Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PropertySet} propertySet 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertySet}
     */
    this.fullUpdatePropertySet = function(cloudPk, id, ifcPk, projectPk, propertySet) {
      return this.fullUpdatePropertySetWithHttpInfo(cloudPk, id, ifcPk, projectPk, propertySet)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of a space
     * Update all fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Space} space 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Space} and HTTP response
     */
    this.fullUpdateSpaceWithHttpInfo = function(cloudPk, id, ifcPk, projectPk, space) {
      var postBody = space;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateSpace");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateSpace");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateSpace");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateSpace");
      }

      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling fullUpdateSpace");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Space;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update all fields of a space
     * Update all fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Space} space 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Space}
     */
    this.fullUpdateSpace = function(cloudPk, id, ifcPk, projectPk, space) {
      return this.fullUpdateSpaceWithHttpInfo(cloudPk, id, ifcPk, projectPk, space)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of a zone
     * Update all fields of a zone. The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this zone.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Zone} zone 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Zone} and HTTP response
     */
    this.fullUpdateZoneWithHttpInfo = function(cloudPk, id, ifcPk, projectPk, zone) {
      var postBody = zone;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateZone");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateZone");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateZone");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateZone");
      }

      // verify the required parameter 'zone' is set
      if (zone === undefined || zone === null) {
        throw new Error("Missing the required parameter 'zone' when calling fullUpdateZone");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Zone;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update all fields of a zone
     * Update all fields of a zone. The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this zone.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Zone} zone 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Zone}
     */
    this.fullUpdateZone = function(cloudPk, id, ifcPk, projectPk, zone) {
      return this.fullUpdateZoneWithHttpInfo(cloudPk, id, ifcPk, projectPk, zone)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all fields of a space
     * Update all fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @param {module:model/ZoneSpace} zoneSpace 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ZoneSpace} and HTTP response
     */
    this.fullUpdateZoneSpaceWithHttpInfo = function(cloudPk, id, ifcPk, projectPk, zonePk, zoneSpace) {
      var postBody = zoneSpace;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling fullUpdateZoneSpace");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fullUpdateZoneSpace");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling fullUpdateZoneSpace");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling fullUpdateZoneSpace");
      }

      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling fullUpdateZoneSpace");
      }

      // verify the required parameter 'zoneSpace' is set
      if (zoneSpace === undefined || zoneSpace === null) {
        throw new Error("Missing the required parameter 'zoneSpace' when calling fullUpdateZoneSpace");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'zone_pk': zonePk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ZoneSpace;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update all fields of a space
     * Update all fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @param {module:model/ZoneSpace} zoneSpace 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ZoneSpace}
     */
    this.fullUpdateZoneSpace = function(cloudPk, id, ifcPk, projectPk, zonePk, zoneSpace) {
      return this.fullUpdateZoneSpaceWithHttpInfo(cloudPk, id, ifcPk, projectPk, zonePk, zoneSpace)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all classifications of an element
     * Retrieve all classifications of an element Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Classification>} and HTTP response
     */
    this.getClassificationsOfElementWithHttpInfo = function(cloudPk, elementUuid, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getClassificationsOfElement");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getClassificationsOfElement");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getClassificationsOfElement");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getClassificationsOfElement");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Classification];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all classifications of an element
     * Retrieve all classifications of an element Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Classification>}
     */
    this.getClassificationsOfElement = function(cloudPk, elementUuid, ifcPk, projectPk) {
      return this.getClassificationsOfElementWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve an element of a model
     * Retrieve an element of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Element} and HTTP response
     */
    this.getElementWithHttpInfo = function(cloudPk, ifcPk, projectPk, uuid) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElement");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElement");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElement");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getElement");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Element;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve an element of a model
     * Retrieve an element of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Element}
     */
    this.getElement = function(cloudPk, ifcPk, projectPk, uuid) {
      return this.getElementWithHttpInfo(cloudPk, ifcPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a PropertySet of an element
     * Retrieve a PropertySet of an element Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertySet} and HTTP response
     */
    this.getElementPropertySetWithHttpInfo = function(cloudPk, elementUuid, id, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySet");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySet");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getElementPropertySet");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySet");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySet");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PropertySet;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a PropertySet of an element
     * Retrieve a PropertySet of an element Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertySet}
     */
    this.getElementPropertySet = function(cloudPk, elementUuid, id, ifcPk, projectPk) {
      return this.getElementPropertySetWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Properties of a PropertySet
     * Retrieve all Properties of a PropertySet Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Property>} and HTTP response
     */
    this.getElementPropertySetPropertiesWithHttpInfo = function(cloudPk, elementUuid, ifcPk, projectPk, propertysetPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetProperties");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetProperties");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetProperties");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetProperties");
      }

      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetProperties");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'propertyset_pk': propertysetPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Property];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all Properties of a PropertySet
     * Retrieve all Properties of a PropertySet Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Property>}
     */
    this.getElementPropertySetProperties = function(cloudPk, elementUuid, ifcPk, projectPk, propertysetPk) {
      return this.getElementPropertySetPropertiesWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Property of a PropertySet
     * Retrieve a Property of a PropertySet Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Property} and HTTP response
     */
    this.getElementPropertySetPropertyWithHttpInfo = function(cloudPk, elementUuid, id, ifcPk, projectPk, propertysetPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetProperty");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetProperty");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getElementPropertySetProperty");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetProperty");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetProperty");
      }

      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetProperty");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'propertyset_pk': propertysetPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Property;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a Property of a PropertySet
     * Retrieve a Property of a PropertySet Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Property}
     */
    this.getElementPropertySetProperty = function(cloudPk, elementUuid, id, ifcPk, projectPk, propertysetPk) {
      return this.getElementPropertySetPropertyWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Definition of a Property
     * Retrieve a Definition of a Property Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertyDefinition} and HTTP response
     */
    this.getElementPropertySetPropertyDefinitionWithHttpInfo = function(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertysetPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling getElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetPropertyDefinition");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertyset_pk': propertysetPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PropertyDefinition;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a Definition of a Property
     * Retrieve a Definition of a Property Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertyDefinition}
     */
    this.getElementPropertySetPropertyDefinition = function(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertysetPk) {
      return this.getElementPropertySetPropertyDefinitionWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Unit of a Definition
     * Retrieve a Unit of a Definition Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertydefinitionPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Unit} and HTTP response
     */
    this.getElementPropertySetPropertyDefinitionUnitWithHttpInfo = function(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling getElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'propertydefinitionPk' is set
      if (propertydefinitionPk === undefined || propertydefinitionPk === null) {
        throw new Error("Missing the required parameter 'propertydefinitionPk' when calling getElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetPropertyDefinitionUnit");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertydefinition_pk': propertydefinitionPk,
        'propertyset_pk': propertysetPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Unit;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a Unit of a Definition
     * Retrieve a Unit of a Definition Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertydefinitionPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Unit}
     */
    this.getElementPropertySetPropertyDefinitionUnit = function(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk) {
      return this.getElementPropertySetPropertyDefinitionUnitWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Units of a Definition
     * Retrieve all Units of a Definition Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertydefinitionPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Unit>} and HTTP response
     */
    this.getElementPropertySetPropertyDefinitionUnitsWithHttpInfo = function(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetPropertyDefinitionUnits");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetPropertyDefinitionUnits");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetPropertyDefinitionUnits");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetPropertyDefinitionUnits");
      }

      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling getElementPropertySetPropertyDefinitionUnits");
      }

      // verify the required parameter 'propertydefinitionPk' is set
      if (propertydefinitionPk === undefined || propertydefinitionPk === null) {
        throw new Error("Missing the required parameter 'propertydefinitionPk' when calling getElementPropertySetPropertyDefinitionUnits");
      }

      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetPropertyDefinitionUnits");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertydefinition_pk': propertydefinitionPk,
        'propertyset_pk': propertysetPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Unit];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all Units of a Definition
     * Retrieve all Units of a Definition Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertydefinitionPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Unit>}
     */
    this.getElementPropertySetPropertyDefinitionUnits = function(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk) {
      return this.getElementPropertySetPropertyDefinitionUnitsWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Definitions of a PropertySet
     * Retrieve all Definitions of a PropertySet Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PropertyDefinition>} and HTTP response
     */
    this.getElementPropertySetPropertyDefinitionsWithHttpInfo = function(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertysetPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySetPropertyDefinitions");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySetPropertyDefinitions");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySetPropertyDefinitions");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySetPropertyDefinitions");
      }

      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling getElementPropertySetPropertyDefinitions");
      }

      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling getElementPropertySetPropertyDefinitions");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertyset_pk': propertysetPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [PropertyDefinition];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all Definitions of a PropertySet
     * Retrieve all Definitions of a PropertySet Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PropertyDefinition>}
     */
    this.getElementPropertySetPropertyDefinitions = function(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertysetPk) {
      return this.getElementPropertySetPropertyDefinitionsWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk, propertyPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all PropertySets of an element
     * Retrieve all PropertySets of an element Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PropertySet>} and HTTP response
     */
    this.getElementPropertySetsWithHttpInfo = function(cloudPk, elementUuid, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementPropertySets");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling getElementPropertySets");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementPropertySets");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementPropertySets");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [PropertySet];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all PropertySets of an element
     * Retrieve all PropertySets of an element Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PropertySet>}
     */
    this.getElementPropertySets = function(cloudPk, elementUuid, ifcPk, projectPk) {
      return this.getElementPropertySetsWithHttpInfo(cloudPk, elementUuid, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all elements of a model
     * Retrieve all elements of a model. If not filtered, the json may be very large. To efficently retrieve all elements and their data, see getRawElements Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter the returned list by type
     * @param {String} opts.classification Filter the returned list by classification
     * @param {String} opts.classificationNotation Filter the returned list by classification__notation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Element>} and HTTP response
     */
    this.getElementsWithHttpInfo = function(cloudPk, ifcPk, projectPk, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElements");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElements");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElements");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
        'type': opts['type'],
        'classification': opts['classification'],
        'classification__notation': opts['classificationNotation'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Element];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all elements of a model
     * Retrieve all elements of a model. If not filtered, the json may be very large. To efficently retrieve all elements and their data, see getRawElements Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter the returned list by type
     * @param {String} opts.classification Filter the returned list by classification
     * @param {String} opts.classificationNotation Filter the returned list by classification__notation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Element>}
     */
    this.getElements = function(cloudPk, ifcPk, projectPk, opts) {
      return this.getElementsWithHttpInfo(cloudPk, ifcPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all elements with the classification
     * Retrieve all elements with the classification Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcClassificationPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Element>} and HTTP response
     */
    this.getElementsFromClassificationWithHttpInfo = function(cloudPk, ifcClassificationPk, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getElementsFromClassification");
      }

      // verify the required parameter 'ifcClassificationPk' is set
      if (ifcClassificationPk === undefined || ifcClassificationPk === null) {
        throw new Error("Missing the required parameter 'ifcClassificationPk' when calling getElementsFromClassification");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getElementsFromClassification");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getElementsFromClassification");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_classification_pk': ifcClassificationPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Element];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{ifc_classification_pk}/element', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all elements with the classification
     * Retrieve all elements with the classification Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcClassificationPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Element>}
     */
    this.getElementsFromClassification = function(cloudPk, ifcClassificationPk, ifcPk, projectPk) {
      return this.getElementsFromClassificationWithHttpInfo(cloudPk, ifcClassificationPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one model
     *  Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ifc} and HTTP response
     */
    this.getIfcWithHttpInfo = function(cloudPk, id, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfc");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfc");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfc");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Ifc;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve one model
     *  Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ifc}
     */
    this.getIfc = function(cloudPk, id, projectPk) {
      return this.getIfcWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get svg file
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the map file          Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.getIfcBVHWithHttpInfo = function(cloudPk, id, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcBVH");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcBVH");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcBVH");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/map', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get svg file
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the map file          Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.getIfcBVH = function(cloudPk, id, projectPk) {
      return this.getIfcBVHWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all classifications in a model
     * Retrieve all classifications in a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Classification>} and HTTP response
     */
    this.getIfcClassificationsWithHttpInfo = function(cloudPk, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcClassifications");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcClassifications");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcClassifications");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Classification];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all classifications in a model
     * Retrieve all classifications in a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Classification>}
     */
    this.getIfcClassifications = function(cloudPk, ifcPk, projectPk) {
      return this.getIfcClassificationsWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get gltf file
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the gltf file          Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.getIfcGLTFWithHttpInfo = function(cloudPk, id, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcGLTF");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcGLTF");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcGLTF");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/gltf', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get gltf file
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the gltf file          Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.getIfcGLTF = function(cloudPk, id, projectPk) {
      return this.getIfcGLTFWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get bvh file
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the bvh file          Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.getIfcMapWithHttpInfo = function(cloudPk, id, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcMap");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcMap");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcMap");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/bvh', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get bvh file
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the bvh file          Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.getIfcMap = function(cloudPk, id, projectPk) {
      return this.getIfcMapWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Properties of a model
     * Retrieve all PropertySets of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Property>} and HTTP response
     */
    this.getIfcPropertiesWithHttpInfo = function(cloudPk, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcProperties");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcProperties");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcProperties");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Property];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all Properties of a model
     * Retrieve all PropertySets of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Property>}
     */
    this.getIfcProperties = function(cloudPk, ifcPk, projectPk) {
      return this.getIfcPropertiesWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Property of a model
     * Retrieve a Property of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Property} and HTTP response
     */
    this.getIfcPropertyWithHttpInfo = function(cloudPk, id, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcProperty");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcProperty");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcProperty");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcProperty");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Property;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a Property of a model
     * Retrieve a Property of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Property}
     */
    this.getIfcProperty = function(cloudPk, id, ifcPk, projectPk) {
      return this.getIfcPropertyWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a PropertyDefinition of a model
     * Retrieve a PropertyDefinition of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertyDefinition} and HTTP response
     */
    this.getIfcPropertyDefinitionWithHttpInfo = function(cloudPk, id, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcPropertyDefinition");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcPropertyDefinition");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcPropertyDefinition");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcPropertyDefinition");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PropertyDefinition;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a PropertyDefinition of a model
     * Retrieve a PropertyDefinition of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertyDefinition}
     */
    this.getIfcPropertyDefinition = function(cloudPk, id, ifcPk, projectPk) {
      return this.getIfcPropertyDefinitionWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all PropertyDefinitions of a model
     * Retrieve all PropertyDefinitions of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PropertyDefinition>} and HTTP response
     */
    this.getIfcPropertyDefinitionsWithHttpInfo = function(cloudPk, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcPropertyDefinitions");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcPropertyDefinitions");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcPropertyDefinitions");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [PropertyDefinition];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all PropertyDefinitions of a model
     * Retrieve all PropertyDefinitions of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PropertyDefinition>}
     */
    this.getIfcPropertyDefinitions = function(cloudPk, ifcPk, projectPk) {
      return this.getIfcPropertyDefinitionsWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get structure file
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the structure file          Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.getIfcStructureWithHttpInfo = function(cloudPk, id, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcStructure");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcStructure");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcStructure");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/structure', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get structure file
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the structure file          Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.getIfcStructure = function(cloudPk, id, projectPk) {
      return this.getIfcStructureWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get systems file
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the system file          Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.getIfcSystemsWithHttpInfo = function(cloudPk, id, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcSystems");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcSystems");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcSystems");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/systems', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get systems file
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the system file          Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.getIfcSystems = function(cloudPk, id, projectPk) {
      return this.getIfcSystemsWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Unit of a model
     * Retrieve a Unit of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Unit} and HTTP response
     */
    this.getIfcUnitWithHttpInfo = function(cloudPk, id, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcUnit");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIfcUnit");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcUnit");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcUnit");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Unit;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a Unit of a model
     * Retrieve a Unit of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Unit}
     */
    this.getIfcUnit = function(cloudPk, id, ifcPk, projectPk) {
      return this.getIfcUnitWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Units of a model
     * Retrieve all Units of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Unit>} and HTTP response
     */
    this.getIfcUnitsWithHttpInfo = function(cloudPk, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcUnits");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getIfcUnits");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcUnits");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Unit];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all Units of a model
     * Retrieve all Units of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Unit>}
     */
    this.getIfcUnits = function(cloudPk, ifcPk, projectPk) {
      return this.getIfcUnitsWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all models
     * Retrieve all models Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.status Filter the returned list by status
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Ifc>} and HTTP response
     */
    this.getIfcsWithHttpInfo = function(cloudPk, projectPk, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getIfcs");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getIfcs");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      var queryParams = {
        'status': opts['status'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Ifc];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all models
     * Retrieve all models Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.status Filter the returned list by status
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Ifc>}
     */
    this.getIfcs = function(cloudPk, projectPk, opts) {
      return this.getIfcsWithHttpInfo(cloudPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a PropertySet of a model
     * Retrieve a PropertySet of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertySet} and HTTP response
     */
    this.getPropertySetWithHttpInfo = function(cloudPk, id, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getPropertySet");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPropertySet");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getPropertySet");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getPropertySet");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PropertySet;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a PropertySet of a model
     * Retrieve a PropertySet of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertySet}
     */
    this.getPropertySet = function(cloudPk, id, ifcPk, projectPk) {
      return this.getPropertySetWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all PropertySets of a model
     * Retrieve all PropertySets of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PropertySet>} and HTTP response
     */
    this.getPropertySetsWithHttpInfo = function(cloudPk, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getPropertySets");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getPropertySets");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getPropertySets");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [PropertySet];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all PropertySets of a model
     * Retrieve all PropertySets of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PropertySet>}
     */
    this.getPropertySets = function(cloudPk, ifcPk, projectPk) {
      return this.getPropertySetsWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all elements in a optimized format
     *          Returns elements, property_sets, properties, definitions and units in a JSON optimized structure          Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter the returned list by type
     * @param {String} opts.classification Filter the returned list by classification
     * @param {String} opts.classificationNotation Filter the returned list by classification__notation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RawElements} and HTTP response
     */
    this.getRawElementsWithHttpInfo = function(cloudPk, ifcPk, projectPk, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRawElements");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getRawElements");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRawElements");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
        'type': opts['type'],
        'classification': opts['classification'],
        'classification__notation': opts['classificationNotation'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RawElements;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/raw', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all elements in a optimized format
     *          Returns elements, property_sets, properties, definitions and units in a JSON optimized structure          Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter the returned list by type
     * @param {String} opts.classification Filter the returned list by classification
     * @param {String} opts.classificationNotation Filter the returned list by classification__notation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RawElements}
     */
    this.getRawElements = function(cloudPk, ifcPk, projectPk, opts) {
      return this.getRawElementsWithHttpInfo(cloudPk, ifcPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one space of the model
     * Retrieve one space of the model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Space} and HTTP response
     */
    this.getSpaceWithHttpInfo = function(cloudPk, id, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getSpace");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSpace");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getSpace");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getSpace");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Space;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve one space of the model
     * Retrieve one space of the model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Space}
     */
    this.getSpace = function(cloudPk, id, ifcPk, projectPk) {
      return this.getSpaceWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all spaces of the model
     * Retrieve all spaces of the model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Space>} and HTTP response
     */
    this.getSpacesWithHttpInfo = function(cloudPk, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getSpaces");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getSpaces");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getSpaces");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Space];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all spaces of the model
     * Retrieve all spaces of the model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Space>}
     */
    this.getSpaces = function(cloudPk, ifcPk, projectPk) {
      return this.getSpacesWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one zone of a model
     * Retrieve one zone of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this zone.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Zone} and HTTP response
     */
    this.getZoneWithHttpInfo = function(cloudPk, id, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getZone");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getZone");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getZone");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getZone");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Zone;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve one zone of a model
     * Retrieve one zone of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this zone.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Zone}
     */
    this.getZone = function(cloudPk, id, ifcPk, projectPk) {
      return this.getZoneWithHttpInfo(cloudPk, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one space of a zone
     * Retrieve one space of a zone Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ZoneSpace} and HTTP response
     */
    this.getZoneSpaceWithHttpInfo = function(cloudPk, id, ifcPk, projectPk, zonePk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getZoneSpace");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getZoneSpace");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getZoneSpace");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getZoneSpace");
      }

      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling getZoneSpace");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'zone_pk': zonePk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ZoneSpace;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve one space of a zone
     * Retrieve one space of a zone Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ZoneSpace}
     */
    this.getZoneSpace = function(cloudPk, id, ifcPk, projectPk, zonePk) {
      return this.getZoneSpaceWithHttpInfo(cloudPk, id, ifcPk, projectPk, zonePk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all spaces of a zone
     * Retrieve all spaces of a zone Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ZoneSpace>} and HTTP response
     */
    this.getZoneSpacesWithHttpInfo = function(cloudPk, ifcPk, projectPk, zonePk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getZoneSpaces");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getZoneSpaces");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getZoneSpaces");
      }

      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling getZoneSpaces");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'zone_pk': zonePk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ZoneSpace];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all spaces of a zone
     * Retrieve all spaces of a zone Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ZoneSpace>}
     */
    this.getZoneSpaces = function(cloudPk, ifcPk, projectPk, zonePk) {
      return this.getZoneSpacesWithHttpInfo(cloudPk, ifcPk, projectPk, zonePk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all zones of a model
     * Retrieve all zones of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.color Filter the returned list by color
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Zone>} and HTTP response
     */
    this.getZonesWithHttpInfo = function(cloudPk, ifcPk, projectPk, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getZones");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling getZones");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getZones");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
        'color': opts['color'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Zone];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all zones of a model
     * Retrieve all zones of a model Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {String} opts.color Filter the returned list by color
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Zone>}
     */
    this.getZones = function(cloudPk, ifcPk, projectPk, opts) {
      return this.getZonesWithHttpInfo(cloudPk, ifcPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all associations between classifications and elements
     * List all associations between classifications and elements Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ElementClassificationRelation>} and HTTP response
     */
    this.listClassificationElementRelationsWithHttpInfo = function(cloudPk, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling listClassificationElementRelations");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling listClassificationElementRelations");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling listClassificationElementRelations");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ElementClassificationRelation];

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification-element', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List all associations between classifications and elements
     * List all associations between classifications and elements Required scopes: ifc:read
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ElementClassificationRelation>}
     */
    this.listClassificationElementRelations = function(cloudPk, ifcPk, projectPk) {
      return this.listClassificationElementRelationsWithHttpInfo(cloudPk, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a classification from an element
     * The classification will not be deleted Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this classification.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeClassificationOfElementWithHttpInfo = function(cloudPk, elementUuid, id, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeClassificationOfElement");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeClassificationOfElement");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeClassificationOfElement");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeClassificationOfElement");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeClassificationOfElement");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove a classification from an element
     * The classification will not be deleted Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this classification.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeClassificationOfElement = function(cloudPk, elementUuid, id, ifcPk, projectPk) {
      return this.removeClassificationOfElementWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a PropertySet from an element
     * Delete the relation between the element and the property set. Does not delete any object Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeElementPropertySetWithHttpInfo = function(cloudPk, elementUuid, id, ifcPk, projectPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementPropertySet");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeElementPropertySet");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeElementPropertySet");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeElementPropertySet");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementPropertySet");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove a PropertySet from an element
     * Delete the relation between the element and the property set. Does not delete any object Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeElementPropertySet = function(cloudPk, elementUuid, id, ifcPk, projectPk) {
      return this.removeElementPropertySetWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a property from a PropertySet
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeElementPropertySetPropertyWithHttpInfo = function(cloudPk, elementUuid, id, ifcPk, projectPk, propertysetPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementPropertySetProperty");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeElementPropertySetProperty");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeElementPropertySetProperty");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeElementPropertySetProperty");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementPropertySetProperty");
      }

      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling removeElementPropertySetProperty");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'propertyset_pk': propertysetPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove a property from a PropertySet
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeElementPropertySetProperty = function(cloudPk, elementUuid, id, ifcPk, projectPk, propertysetPk) {
      return this.removeElementPropertySetPropertyWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a Definition from a Property
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeElementPropertySetPropertyDefinitionWithHttpInfo = function(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertysetPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling removeElementPropertySetPropertyDefinition");
      }

      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling removeElementPropertySetPropertyDefinition");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertyset_pk': propertysetPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove a Definition from a Property
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeElementPropertySetPropertyDefinition = function(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertysetPk) {
      return this.removeElementPropertySetPropertyDefinitionWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a Unit from a Definition
     * Remove a Unit from a Definition Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertydefinitionPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeElementPropertySetPropertyDefinitionUnitWithHttpInfo = function(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'elementUuid' is set
      if (elementUuid === undefined || elementUuid === null) {
        throw new Error("Missing the required parameter 'elementUuid' when calling removeElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'propertyPk' is set
      if (propertyPk === undefined || propertyPk === null) {
        throw new Error("Missing the required parameter 'propertyPk' when calling removeElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'propertydefinitionPk' is set
      if (propertydefinitionPk === undefined || propertydefinitionPk === null) {
        throw new Error("Missing the required parameter 'propertydefinitionPk' when calling removeElementPropertySetPropertyDefinitionUnit");
      }

      // verify the required parameter 'propertysetPk' is set
      if (propertysetPk === undefined || propertysetPk === null) {
        throw new Error("Missing the required parameter 'propertysetPk' when calling removeElementPropertySetPropertyDefinitionUnit");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'element_uuid': elementUuid,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'property_pk': propertyPk,
        'propertydefinition_pk': propertydefinitionPk,
        'propertyset_pk': propertysetPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove a Unit from a Definition
     * Remove a Unit from a Definition Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} elementUuid 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} propertyPk 
     * @param {String} propertydefinitionPk 
     * @param {String} propertysetPk 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeElementPropertySetPropertyDefinitionUnit = function(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk) {
      return this.removeElementPropertySetPropertyDefinitionUnitWithHttpInfo(cloudPk, elementUuid, id, ifcPk, projectPk, propertyPk, propertydefinitionPk, propertysetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove the classification from all elements
     * Remove the classification from all elements. No element nor classification will be deleted Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcClassificationPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeElementsFromClassificationWithHttpInfo = function(cloudPk, ifcClassificationPk, ifcPk, projectPk, uuid) {
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling removeElementsFromClassification");
      }

      // verify the required parameter 'ifcClassificationPk' is set
      if (ifcClassificationPk === undefined || ifcClassificationPk === null) {
        throw new Error("Missing the required parameter 'ifcClassificationPk' when calling removeElementsFromClassification");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling removeElementsFromClassification");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling removeElementsFromClassification");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling removeElementsFromClassification");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_classification_pk': ifcClassificationPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{ifc_classification_pk}/element/{uuid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove the classification from all elements
     * Remove the classification from all elements. No element nor classification will be deleted Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcClassificationPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeElementsFromClassification = function(cloudPk, ifcClassificationPk, ifcPk, projectPk, uuid) {
      return this.removeElementsFromClassificationWithHttpInfo(cloudPk, ifcClassificationPk, ifcPk, projectPk, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a zone
     * Update some fields of a zone. The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @param {module:model/Element} element 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Element} and HTTP response
     */
    this.updateElementWithHttpInfo = function(cloudPk, ifcPk, projectPk, uuid, element) {
      var postBody = element;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateElement");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateElement");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateElement");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling updateElement");
      }

      // verify the required parameter 'element' is set
      if (element === undefined || element === null) {
        throw new Error("Missing the required parameter 'element' when calling updateElement");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Element;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update some fields of a zone
     * Update some fields of a zone. The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} uuid IFC element or element type UUID
     * @param {module:model/Element} element 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Element}
     */
    this.updateElement = function(cloudPk, ifcPk, projectPk, uuid, element) {
      return this.updateElementWithHttpInfo(cloudPk, ifcPk, projectPk, uuid, element)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a model
     * Update some fields of a model Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @param {module:model/Ifc} ifc 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ifc} and HTTP response
     */
    this.updateIfcWithHttpInfo = function(cloudPk, id, projectPk, ifc) {
      var postBody = ifc;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateIfc");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIfc");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateIfc");
      }

      // verify the required parameter 'ifc' is set
      if (ifc === undefined || ifc === null) {
        throw new Error("Missing the required parameter 'ifc' when calling updateIfc");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Ifc;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update some fields of a model
     * Update some fields of a model Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @param {module:model/Ifc} ifc 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ifc}
     */
    this.updateIfc = function(cloudPk, id, projectPk, ifc) {
      return this.updateIfcWithHttpInfo(cloudPk, id, projectPk, ifc)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update models file (gltf, svg, structure, etc)
     *          Patch ifc files (gltf, structure, svg, etc)          Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {File} opts.structureFile 
     * @param {File} opts.systemsFile 
     * @param {File} opts.mapFile 
     * @param {File} opts.gltfFile 
     * @param {File} opts.bvhTreeFile 
     * @param {File} opts.viewer360File 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IfcFiles} and HTTP response
     */
    this.updateIfcFilesWithHttpInfo = function(cloudPk, id, projectPk, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateIfcFiles");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIfcFiles");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateIfcFiles");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'structure_file': opts['structureFile'],
        'systems_file': opts['systemsFile'],
        'map_file': opts['mapFile'],
        'gltf_file': opts['gltfFile'],
        'bvh_tree_file': opts['bvhTreeFile'],
        'viewer_360_file': opts['viewer360File']
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = IfcFiles;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/files', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update models file (gltf, svg, structure, etc)
     *          Patch ifc files (gltf, structure, svg, etc)          Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this ifc.
     * @param {String} projectPk 
     * @param {Object} opts Optional parameters
     * @param {File} opts.structureFile 
     * @param {File} opts.systemsFile 
     * @param {File} opts.mapFile 
     * @param {File} opts.gltfFile 
     * @param {File} opts.bvhTreeFile 
     * @param {File} opts.viewer360File 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IfcFiles}
     */
    this.updateIfcFiles = function(cloudPk, id, projectPk, opts) {
      return this.updateIfcFilesWithHttpInfo(cloudPk, id, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a Property
     * Update some fields of a Property Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Property} property 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Property} and HTTP response
     */
    this.updateIfcPropertyWithHttpInfo = function(cloudPk, id, ifcPk, projectPk, property) {
      var postBody = property;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateIfcProperty");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIfcProperty");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateIfcProperty");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateIfcProperty");
      }

      // verify the required parameter 'property' is set
      if (property === undefined || property === null) {
        throw new Error("Missing the required parameter 'property' when calling updateIfcProperty");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Property;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update some fields of a Property
     * Update some fields of a Property Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Property} property 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Property}
     */
    this.updateIfcProperty = function(cloudPk, id, ifcPk, projectPk, property) {
      return this.updateIfcPropertyWithHttpInfo(cloudPk, id, ifcPk, projectPk, property)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of many PropertyDefinitions of a model
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PropertyDefinition} propertyDefinition 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertyDefinition} and HTTP response
     */
    this.updateIfcPropertyDefinitionWithHttpInfo = function(cloudPk, id, ifcPk, projectPk, propertyDefinition) {
      var postBody = propertyDefinition;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateIfcPropertyDefinition");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIfcPropertyDefinition");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateIfcPropertyDefinition");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateIfcPropertyDefinition");
      }

      // verify the required parameter 'propertyDefinition' is set
      if (propertyDefinition === undefined || propertyDefinition === null) {
        throw new Error("Missing the required parameter 'propertyDefinition' when calling updateIfcPropertyDefinition");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PropertyDefinition;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update some fields of many PropertyDefinitions of a model
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property definition.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PropertyDefinition} propertyDefinition 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertyDefinition}
     */
    this.updateIfcPropertyDefinition = function(cloudPk, id, ifcPk, projectPk, propertyDefinition) {
      return this.updateIfcPropertyDefinitionWithHttpInfo(cloudPk, id, ifcPk, projectPk, propertyDefinition)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a Unit of a model
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Unit} unit 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Unit} and HTTP response
     */
    this.updateIfcUnitWithHttpInfo = function(cloudPk, id, ifcPk, projectPk, unit) {
      var postBody = unit;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateIfcUnit");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateIfcUnit");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateIfcUnit");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateIfcUnit");
      }

      // verify the required parameter 'unit' is set
      if (unit === undefined || unit === null) {
        throw new Error("Missing the required parameter 'unit' when calling updateIfcUnit");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Unit;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update some fields of a Unit of a model
     *  Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this unit.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Unit} unit 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Unit}
     */
    this.updateIfcUnit = function(cloudPk, id, ifcPk, projectPk, unit) {
      return this.updateIfcUnitWithHttpInfo(cloudPk, id, ifcPk, projectPk, unit)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a PropertySet
     * Update some fields of a PropertySet Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PropertySet} propertySet 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PropertySet} and HTTP response
     */
    this.updatePropertySetWithHttpInfo = function(cloudPk, id, ifcPk, projectPk, propertySet) {
      var postBody = propertySet;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updatePropertySet");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePropertySet");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updatePropertySet");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updatePropertySet");
      }

      // verify the required parameter 'propertySet' is set
      if (propertySet === undefined || propertySet === null) {
        throw new Error("Missing the required parameter 'propertySet' when calling updatePropertySet");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PropertySet;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update some fields of a PropertySet
     * Update some fields of a PropertySet Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this property set.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/PropertySet} propertySet 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PropertySet}
     */
    this.updatePropertySet = function(cloudPk, id, ifcPk, projectPk, propertySet) {
      return this.updatePropertySetWithHttpInfo(cloudPk, id, ifcPk, projectPk, propertySet)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a space
     * Update some fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Space} space 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Space} and HTTP response
     */
    this.updateSpaceWithHttpInfo = function(cloudPk, id, ifcPk, projectPk, space) {
      var postBody = space;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateSpace");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSpace");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateSpace");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateSpace");
      }

      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling updateSpace");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Space;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update some fields of a space
     * Update some fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Space} space 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Space}
     */
    this.updateSpace = function(cloudPk, id, ifcPk, projectPk, space) {
      return this.updateSpaceWithHttpInfo(cloudPk, id, ifcPk, projectPk, space)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a zone
     * Update some fields of a zone. The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this zone.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Zone} zone 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Zone} and HTTP response
     */
    this.updateZoneWithHttpInfo = function(cloudPk, id, ifcPk, projectPk, zone) {
      var postBody = zone;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateZone");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateZone");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateZone");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateZone");
      }

      // verify the required parameter 'zone' is set
      if (zone === undefined || zone === null) {
        throw new Error("Missing the required parameter 'zone' when calling updateZone");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Zone;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update some fields of a zone
     * Update some fields of a zone. The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this zone.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {module:model/Zone} zone 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Zone}
     */
    this.updateZone = function(cloudPk, id, ifcPk, projectPk, zone) {
      return this.updateZoneWithHttpInfo(cloudPk, id, ifcPk, projectPk, zone)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a space
     * Update some fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @param {module:model/ZoneSpace} zoneSpace 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ZoneSpace} and HTTP response
     */
    this.updateZoneSpaceWithHttpInfo = function(cloudPk, id, ifcPk, projectPk, zonePk, zoneSpace) {
      var postBody = zoneSpace;

      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateZoneSpace");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateZoneSpace");
      }

      // verify the required parameter 'ifcPk' is set
      if (ifcPk === undefined || ifcPk === null) {
        throw new Error("Missing the required parameter 'ifcPk' when calling updateZoneSpace");
      }

      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateZoneSpace");
      }

      // verify the required parameter 'zonePk' is set
      if (zonePk === undefined || zonePk === null) {
        throw new Error("Missing the required parameter 'zonePk' when calling updateZoneSpace");
      }

      // verify the required parameter 'zoneSpace' is set
      if (zoneSpace === undefined || zoneSpace === null) {
        throw new Error("Missing the required parameter 'zoneSpace' when calling updateZoneSpace");
      }


      var pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'ifc_pk': ifcPk,
        'project_pk': projectPk,
        'zone_pk': zonePk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ZoneSpace;

      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update some fields of a space
     * Update some fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * @param {String} cloudPk 
     * @param {Number} id A unique integer value identifying this space.
     * @param {String} ifcPk 
     * @param {String} projectPk 
     * @param {String} zonePk 
     * @param {module:model/ZoneSpace} zoneSpace 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ZoneSpace}
     */
    this.updateZoneSpace = function(cloudPk, id, ifcPk, projectPk, zonePk, zoneSpace) {
      return this.updateZoneSpaceWithHttpInfo(cloudPk, id, ifcPk, projectPk, zonePk, zoneSpace)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
