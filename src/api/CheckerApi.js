/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1 (v1)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CheckPlan from '../model/CheckPlan';
import CheckPlanRequest from '../model/CheckPlanRequest';
import CheckerResult from '../model/CheckerResult';
import CheckerResultRequest from '../model/CheckerResultRequest';
import IfcChecker from '../model/IfcChecker';
import IfcCheckerRequest from '../model/IfcCheckerRequest';
import PatchedCheckPlanRequest from '../model/PatchedCheckPlanRequest';
import PatchedCheckerResultRequest from '../model/PatchedCheckerResultRequest';
import PatchedIfcCheckerRequest from '../model/PatchedIfcCheckerRequest';
import PatchedRuleComponentRequest from '../model/PatchedRuleComponentRequest';
import PatchedRuleRequest from '../model/PatchedRuleRequest';
import PatchedRulesetRequest from '../model/PatchedRulesetRequest';
import Rule from '../model/Rule';
import RuleComponent from '../model/RuleComponent';
import RuleComponentRequest from '../model/RuleComponentRequest';
import RuleRequest from '../model/RuleRequest';
import Ruleset from '../model/Ruleset';
import RulesetRequest from '../model/RulesetRequest';

/**
* Checker service.
* @module api/CheckerApi
* @version 0.0.0
*/
export default class CheckerApi {

    /**
    * Constructs a new CheckerApi. 
    * @alias module:api/CheckerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a checker to a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/IfcCheckerRequest} opts.ifcCheckerRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IfcChecker} and HTTP response
     */
    createCheckerWithHttpInfo(cloudPk, modelPk, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['ifcCheckerRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createChecker");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling createChecker");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createChecker");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = IfcChecker;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a checker to a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/IfcCheckerRequest} opts.ifcCheckerRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IfcChecker}
     */
    createChecker(cloudPk, modelPk, projectPk, opts) {
      return this.createCheckerWithHttpInfo(cloudPk, modelPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a CheckerResult
     * TCreate a CheckerResult  Required scopes: check:write
     * @param {Number} checkerPk A unique integer value identifying this ifc checker.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/CheckerResultRequest} opts.checkerResultRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckerResult} and HTTP response
     */
    createCheckerResultWithHttpInfo(checkerPk, cloudPk, modelPk, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['checkerResultRequest'];
      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling createCheckerResult");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createCheckerResult");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling createCheckerResult");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createCheckerResult");
      }

      let pathParams = {
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CheckerResult;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a CheckerResult
     * TCreate a CheckerResult  Required scopes: check:write
     * @param {Number} checkerPk A unique integer value identifying this ifc checker.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/CheckerResultRequest} opts.checkerResultRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckerResult}
     */
    createCheckerResult(checkerPk, cloudPk, modelPk, projectPk, opts) {
      return this.createCheckerResultWithHttpInfo(checkerPk, cloudPk, modelPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Checkplan
     * TCreate a Checkplan  Required scopes: check:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {module:model/CheckPlanRequest} checkPlanRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckPlan} and HTTP response
     */
    createCheckplanWithHttpInfo(cloudPk, projectPk, checkPlanRequest) {
      let postBody = checkPlanRequest;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createCheckplan");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createCheckplan");
      }
      // verify the required parameter 'checkPlanRequest' is set
      if (checkPlanRequest === undefined || checkPlanRequest === null) {
        throw new Error("Missing the required parameter 'checkPlanRequest' when calling createCheckplan");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CheckPlan;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Checkplan
     * TCreate a Checkplan  Required scopes: check:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {module:model/CheckPlanRequest} checkPlanRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckPlan}
     */
    createCheckplan(cloudPk, projectPk, checkPlanRequest) {
      return this.createCheckplanWithHttpInfo(cloudPk, projectPk, checkPlanRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Rule
     * TCreate a Rule  Required scopes: check:write
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} rulesetPk A unique integer value identifying this ruleset.
     * @param {module:model/RuleRequest} ruleRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Rule} and HTTP response
     */
    createRuleWithHttpInfo(checkPlanPk, cloudPk, projectPk, rulesetPk, ruleRequest) {
      let postBody = ruleRequest;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling createRule");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createRule");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createRule");
      }
      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling createRule");
      }
      // verify the required parameter 'ruleRequest' is set
      if (ruleRequest === undefined || ruleRequest === null) {
        throw new Error("Missing the required parameter 'ruleRequest' when calling createRule");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ruleset_pk': rulesetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Rule;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Rule
     * TCreate a Rule  Required scopes: check:write
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} rulesetPk A unique integer value identifying this ruleset.
     * @param {module:model/RuleRequest} ruleRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Rule}
     */
    createRule(checkPlanPk, cloudPk, projectPk, rulesetPk, ruleRequest) {
      return this.createRuleWithHttpInfo(checkPlanPk, cloudPk, projectPk, rulesetPk, ruleRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a RuleComponent
     * TCreate a RuleComponent  Required scopes: check:write
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} rulePk A unique integer value identifying this rule.
     * @param {Number} rulesetPk A unique integer value identifying this ruleset.
     * @param {Object} opts Optional parameters
     * @param {module:model/RuleComponentRequest} opts.ruleComponentRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RuleComponent} and HTTP response
     */
    createRuleComponentWithHttpInfo(checkPlanPk, cloudPk, projectPk, rulePk, rulesetPk, opts) {
      opts = opts || {};
      let postBody = opts['ruleComponentRequest'];
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling createRuleComponent");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createRuleComponent");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createRuleComponent");
      }
      // verify the required parameter 'rulePk' is set
      if (rulePk === undefined || rulePk === null) {
        throw new Error("Missing the required parameter 'rulePk' when calling createRuleComponent");
      }
      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling createRuleComponent");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'rule_pk': rulePk,
        'ruleset_pk': rulesetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = RuleComponent;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a RuleComponent
     * TCreate a RuleComponent  Required scopes: check:write
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} rulePk A unique integer value identifying this rule.
     * @param {Number} rulesetPk A unique integer value identifying this ruleset.
     * @param {Object} opts Optional parameters
     * @param {module:model/RuleComponentRequest} opts.ruleComponentRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RuleComponent}
     */
    createRuleComponent(checkPlanPk, cloudPk, projectPk, rulePk, rulesetPk, opts) {
      return this.createRuleComponentWithHttpInfo(checkPlanPk, cloudPk, projectPk, rulePk, rulesetPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Ruleset
     * TCreate a Ruleset  Required scopes: check:write
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {module:model/RulesetRequest} rulesetRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ruleset} and HTTP response
     */
    createRulesetWithHttpInfo(checkPlanPk, cloudPk, projectPk, rulesetRequest) {
      let postBody = rulesetRequest;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling createRuleset");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling createRuleset");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling createRuleset");
      }
      // verify the required parameter 'rulesetRequest' is set
      if (rulesetRequest === undefined || rulesetRequest === null) {
        throw new Error("Missing the required parameter 'rulesetRequest' when calling createRuleset");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Ruleset;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Ruleset
     * TCreate a Ruleset  Required scopes: check:write
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {module:model/RulesetRequest} rulesetRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ruleset}
     */
    createRuleset(checkPlanPk, cloudPk, projectPk, rulesetRequest) {
      return this.createRulesetWithHttpInfo(checkPlanPk, cloudPk, projectPk, rulesetRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCheckerWithHttpInfo(cloudPk, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteChecker");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteChecker");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling deleteChecker");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteChecker");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteChecker(cloudPk, id, modelPk, projectPk) {
      return this.deleteCheckerWithHttpInfo(cloudPk, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a CheckerResult
     * Delete a CheckerResult  Required scopes: check:write
     * @param {Number} checkerPk A unique integer value identifying this ifc checker.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCheckerResultWithHttpInfo(checkerPk, cloudPk, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling deleteCheckerResult");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteCheckerResult");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCheckerResult");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling deleteCheckerResult");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteCheckerResult");
      }

      let pathParams = {
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a CheckerResult
     * Delete a CheckerResult  Required scopes: check:write
     * @param {Number} checkerPk A unique integer value identifying this ifc checker.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCheckerResult(checkerPk, cloudPk, id, modelPk, projectPk) {
      return this.deleteCheckerResultWithHttpInfo(checkerPk, cloudPk, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Checkplan
     * Delete a Checkplan  Required scopes: check:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this check plan.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCheckplanWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteCheckplan");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCheckplan");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteCheckplan");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Checkplan
     * Delete a Checkplan  Required scopes: check:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this check plan.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCheckplan(cloudPk, id, projectPk) {
      return this.deleteCheckplanWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Rule
     * Delete a Rule  Required scopes: check:write
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this rule.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} rulesetPk A unique integer value identifying this ruleset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteRuleWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulesetPk) {
      let postBody = null;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling deleteRule");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteRule");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRule");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteRule");
      }
      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling deleteRule");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk,
        'ruleset_pk': rulesetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Rule
     * Delete a Rule  Required scopes: check:write
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this rule.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} rulesetPk A unique integer value identifying this ruleset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteRule(checkPlanPk, cloudPk, id, projectPk, rulesetPk) {
      return this.deleteRuleWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulesetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a RuleComponent
     * Delete a RuleComponent  Required scopes: check:write
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this rule component.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} rulePk A unique integer value identifying this rule.
     * @param {Number} rulesetPk A unique integer value identifying this ruleset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteRuleComponentWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk) {
      let postBody = null;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling deleteRuleComponent");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteRuleComponent");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRuleComponent");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteRuleComponent");
      }
      // verify the required parameter 'rulePk' is set
      if (rulePk === undefined || rulePk === null) {
        throw new Error("Missing the required parameter 'rulePk' when calling deleteRuleComponent");
      }
      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling deleteRuleComponent");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk,
        'rule_pk': rulePk,
        'ruleset_pk': rulesetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a RuleComponent
     * Delete a RuleComponent  Required scopes: check:write
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this rule component.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} rulePk A unique integer value identifying this rule.
     * @param {Number} rulesetPk A unique integer value identifying this ruleset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteRuleComponent(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk) {
      return this.deleteRuleComponentWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Ruleset
     * Delete a Ruleset  Required scopes: check:write
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this ruleset.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteRulesetWithHttpInfo(checkPlanPk, cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling deleteRuleset");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling deleteRuleset");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRuleset");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling deleteRuleset");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Ruleset
     * Delete a Ruleset  Required scopes: check:write
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this ruleset.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteRuleset(checkPlanPk, cloudPk, id, projectPk) {
      return this.deleteRulesetWithHttpInfo(checkPlanPk, cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:read, ifc:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IfcChecker} and HTTP response
     */
    getCheckerWithHttpInfo(cloudPk, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getChecker");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChecker");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getChecker");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getChecker");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IfcChecker;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:read, ifc:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IfcChecker}
     */
    getChecker(cloudPk, id, modelPk, projectPk) {
      return this.getCheckerWithHttpInfo(cloudPk, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one CheckerResult
     * Retrieve one CheckerResult  Required scopes: check:read
     * @param {Number} checkerPk A unique integer value identifying this ifc checker.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckerResult} and HTTP response
     */
    getCheckerResultWithHttpInfo(checkerPk, cloudPk, id, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling getCheckerResult");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCheckerResult");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCheckerResult");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getCheckerResult");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getCheckerResult");
      }

      let pathParams = {
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckerResult;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve one CheckerResult
     * Retrieve one CheckerResult  Required scopes: check:read
     * @param {Number} checkerPk A unique integer value identifying this ifc checker.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckerResult}
     */
    getCheckerResult(checkerPk, cloudPk, id, modelPk, projectPk) {
      return this.getCheckerResultWithHttpInfo(checkerPk, cloudPk, id, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all CheckerResults
     * Retrieve all CheckerResults  Required scopes: check:read
     * @param {Number} checkerPk A unique integer value identifying this ifc checker.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CheckerResult>} and HTTP response
     */
    getCheckerResultsWithHttpInfo(checkerPk, cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling getCheckerResults");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCheckerResults");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getCheckerResults");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getCheckerResults");
      }

      let pathParams = {
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CheckerResult];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all CheckerResults
     * Retrieve all CheckerResults  Required scopes: check:read
     * @param {Number} checkerPk A unique integer value identifying this ifc checker.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CheckerResult>}
     */
    getCheckerResults(checkerPk, cloudPk, modelPk, projectPk) {
      return this.getCheckerResultsWithHttpInfo(checkerPk, cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all checkers of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:read, ifc:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/IfcChecker>} and HTTP response
     */
    getCheckersWithHttpInfo(cloudPk, modelPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCheckers");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling getCheckers");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getCheckers");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IfcChecker];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all checkers of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:read, ifc:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/IfcChecker>}
     */
    getCheckers(cloudPk, modelPk, projectPk) {
      return this.getCheckersWithHttpInfo(cloudPk, modelPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one Checkplan
     * Retrieve one Checkplan  Required scopes: check:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this check plan.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckPlan} and HTTP response
     */
    getCheckplanWithHttpInfo(cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCheckplan");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCheckplan");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getCheckplan");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckPlan;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve one Checkplan
     * Retrieve one Checkplan  Required scopes: check:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this check plan.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckPlan}
     */
    getCheckplan(cloudPk, id, projectPk) {
      return this.getCheckplanWithHttpInfo(cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Checkplans
     * Retrieve all Checkplans  Required scopes: check:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CheckPlan>} and HTTP response
     */
    getCheckplansWithHttpInfo(cloudPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getCheckplans");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getCheckplans");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CheckPlan];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all Checkplans
     * Retrieve all Checkplans  Required scopes: check:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CheckPlan>}
     */
    getCheckplans(cloudPk, projectPk) {
      return this.getCheckplansWithHttpInfo(cloudPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one Rule
     * Retrieve one Rule  Required scopes: check:read
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this rule.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} rulesetPk A unique integer value identifying this ruleset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Rule} and HTTP response
     */
    getRuleWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulesetPk) {
      let postBody = null;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling getRule");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRule");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRule");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRule");
      }
      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling getRule");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk,
        'ruleset_pk': rulesetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Rule;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve one Rule
     * Retrieve one Rule  Required scopes: check:read
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this rule.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} rulesetPk A unique integer value identifying this ruleset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Rule}
     */
    getRule(checkPlanPk, cloudPk, id, projectPk, rulesetPk) {
      return this.getRuleWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulesetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one RuleComponent
     * Retrieve one RuleComponent  Required scopes: check:read
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this rule component.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} rulePk A unique integer value identifying this rule.
     * @param {Number} rulesetPk A unique integer value identifying this ruleset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RuleComponent} and HTTP response
     */
    getRuleComponentWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk) {
      let postBody = null;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling getRuleComponent");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRuleComponent");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRuleComponent");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRuleComponent");
      }
      // verify the required parameter 'rulePk' is set
      if (rulePk === undefined || rulePk === null) {
        throw new Error("Missing the required parameter 'rulePk' when calling getRuleComponent");
      }
      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling getRuleComponent");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk,
        'rule_pk': rulePk,
        'ruleset_pk': rulesetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RuleComponent;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve one RuleComponent
     * Retrieve one RuleComponent  Required scopes: check:read
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this rule component.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} rulePk A unique integer value identifying this rule.
     * @param {Number} rulesetPk A unique integer value identifying this ruleset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RuleComponent}
     */
    getRuleComponent(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk) {
      return this.getRuleComponentWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all RuleComponents
     * Retrieve all RuleComponents  Required scopes: check:read
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} rulePk A unique integer value identifying this rule.
     * @param {Number} rulesetPk A unique integer value identifying this ruleset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/RuleComponent>} and HTTP response
     */
    getRuleComponentsWithHttpInfo(checkPlanPk, cloudPk, projectPk, rulePk, rulesetPk) {
      let postBody = null;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling getRuleComponents");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRuleComponents");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRuleComponents");
      }
      // verify the required parameter 'rulePk' is set
      if (rulePk === undefined || rulePk === null) {
        throw new Error("Missing the required parameter 'rulePk' when calling getRuleComponents");
      }
      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling getRuleComponents");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'rule_pk': rulePk,
        'ruleset_pk': rulesetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RuleComponent];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all RuleComponents
     * Retrieve all RuleComponents  Required scopes: check:read
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} rulePk A unique integer value identifying this rule.
     * @param {Number} rulesetPk A unique integer value identifying this ruleset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/RuleComponent>}
     */
    getRuleComponents(checkPlanPk, cloudPk, projectPk, rulePk, rulesetPk) {
      return this.getRuleComponentsWithHttpInfo(checkPlanPk, cloudPk, projectPk, rulePk, rulesetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Rules
     * Retrieve all Rules  Required scopes: check:read
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} rulesetPk A unique integer value identifying this ruleset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Rule>} and HTTP response
     */
    getRulesWithHttpInfo(checkPlanPk, cloudPk, projectPk, rulesetPk) {
      let postBody = null;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling getRules");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRules");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRules");
      }
      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling getRules");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk,
        'ruleset_pk': rulesetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Rule];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all Rules
     * Retrieve all Rules  Required scopes: check:read
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} rulesetPk A unique integer value identifying this ruleset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Rule>}
     */
    getRules(checkPlanPk, cloudPk, projectPk, rulesetPk) {
      return this.getRulesWithHttpInfo(checkPlanPk, cloudPk, projectPk, rulesetPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve one Ruleset
     * Retrieve one Ruleset  Required scopes: check:read
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this ruleset.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ruleset} and HTTP response
     */
    getRulesetWithHttpInfo(checkPlanPk, cloudPk, id, projectPk) {
      let postBody = null;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling getRuleset");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRuleset");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRuleset");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRuleset");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Ruleset;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve one Ruleset
     * Retrieve one Ruleset  Required scopes: check:read
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this ruleset.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ruleset}
     */
    getRuleset(checkPlanPk, cloudPk, id, projectPk) {
      return this.getRulesetWithHttpInfo(checkPlanPk, cloudPk, id, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all Rulesets
     * Retrieve all Rulesets  Required scopes: check:read
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Ruleset>} and HTTP response
     */
    getRulesetsWithHttpInfo(checkPlanPk, cloudPk, projectPk) {
      let postBody = null;
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling getRulesets");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling getRulesets");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling getRulesets");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Ruleset];
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all Rulesets
     * Retrieve all Rulesets  Required scopes: check:read
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Ruleset>}
     */
    getRulesets(checkPlanPk, cloudPk, projectPk) {
      return this.getRulesetsWithHttpInfo(checkPlanPk, cloudPk, projectPk)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Launch a new check on the model
     * A nex check will be played with the current state of elements, properties, etc.  Required scopes: check:write, ifc:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/IfcCheckerRequest} opts.ifcCheckerRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    launchNewCheckWithHttpInfo(cloudPk, id, modelPk, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['ifcCheckerRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling launchNewCheck");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling launchNewCheck");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling launchNewCheck");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling launchNewCheck");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{id}/launch-check', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Launch a new check on the model
     * A nex check will be played with the current state of elements, properties, etc.  Required scopes: check:write, ifc:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/IfcCheckerRequest} opts.ifcCheckerRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    launchNewCheck(cloudPk, id, modelPk, projectPk, opts) {
      return this.launchNewCheckWithHttpInfo(cloudPk, id, modelPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedIfcCheckerRequest} opts.patchedIfcCheckerRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IfcChecker} and HTTP response
     */
    updateCheckerWithHttpInfo(cloudPk, id, modelPk, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedIfcCheckerRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateChecker");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateChecker");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling updateChecker");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateChecker");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = IfcChecker;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a checker of a model
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this ifc checker.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedIfcCheckerRequest} opts.patchedIfcCheckerRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IfcChecker}
     */
    updateChecker(cloudPk, id, modelPk, projectPk, opts) {
      return this.updateCheckerWithHttpInfo(cloudPk, id, modelPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a CheckerResult
     * Update some fields of a CheckerResult  Required scopes: check:write
     * @param {Number} checkerPk A unique integer value identifying this ifc checker.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedCheckerResultRequest} opts.patchedCheckerResultRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckerResult} and HTTP response
     */
    updateCheckerResultWithHttpInfo(checkerPk, cloudPk, id, modelPk, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedCheckerResultRequest'];
      // verify the required parameter 'checkerPk' is set
      if (checkerPk === undefined || checkerPk === null) {
        throw new Error("Missing the required parameter 'checkerPk' when calling updateCheckerResult");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateCheckerResult");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCheckerResult");
      }
      // verify the required parameter 'modelPk' is set
      if (modelPk === undefined || modelPk === null) {
        throw new Error("Missing the required parameter 'modelPk' when calling updateCheckerResult");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateCheckerResult");
      }

      let pathParams = {
        'checker_pk': checkerPk,
        'cloud_pk': cloudPk,
        'id': id,
        'model_pk': modelPk,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CheckerResult;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a CheckerResult
     * Update some fields of a CheckerResult  Required scopes: check:write
     * @param {Number} checkerPk A unique integer value identifying this ifc checker.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this checker result.
     * @param {Number} modelPk A unique integer value identifying this model.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedCheckerResultRequest} opts.patchedCheckerResultRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckerResult}
     */
    updateCheckerResult(checkerPk, cloudPk, id, modelPk, projectPk, opts) {
      return this.updateCheckerResultWithHttpInfo(checkerPk, cloudPk, id, modelPk, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a Checkplan
     * Update some fields of a Checkplan  Required scopes: check:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this check plan.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedCheckPlanRequest} opts.patchedCheckPlanRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckPlan} and HTTP response
     */
    updateCheckplanWithHttpInfo(cloudPk, id, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedCheckPlanRequest'];
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateCheckplan");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCheckplan");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateCheckplan");
      }

      let pathParams = {
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CheckPlan;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a Checkplan
     * Update some fields of a Checkplan  Required scopes: check:write
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this check plan.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedCheckPlanRequest} opts.patchedCheckPlanRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckPlan}
     */
    updateCheckplan(cloudPk, id, projectPk, opts) {
      return this.updateCheckplanWithHttpInfo(cloudPk, id, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a Rule
     * Update some fields of a Rule  Required scopes: check:write
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this rule.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} rulesetPk A unique integer value identifying this ruleset.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedRuleRequest} opts.patchedRuleRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Rule} and HTTP response
     */
    updateRuleWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulesetPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedRuleRequest'];
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling updateRule");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateRule");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRule");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateRule");
      }
      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling updateRule");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk,
        'ruleset_pk': rulesetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Rule;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a Rule
     * Update some fields of a Rule  Required scopes: check:write
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this rule.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} rulesetPk A unique integer value identifying this ruleset.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedRuleRequest} opts.patchedRuleRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Rule}
     */
    updateRule(checkPlanPk, cloudPk, id, projectPk, rulesetPk, opts) {
      return this.updateRuleWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulesetPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a RuleComponent
     * Update some fields of a RuleComponent  Required scopes: check:write
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this rule component.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} rulePk A unique integer value identifying this rule.
     * @param {Number} rulesetPk A unique integer value identifying this ruleset.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedRuleComponentRequest} opts.patchedRuleComponentRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RuleComponent} and HTTP response
     */
    updateRuleComponentWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedRuleComponentRequest'];
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling updateRuleComponent");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateRuleComponent");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRuleComponent");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateRuleComponent");
      }
      // verify the required parameter 'rulePk' is set
      if (rulePk === undefined || rulePk === null) {
        throw new Error("Missing the required parameter 'rulePk' when calling updateRuleComponent");
      }
      // verify the required parameter 'rulesetPk' is set
      if (rulesetPk === undefined || rulesetPk === null) {
        throw new Error("Missing the required parameter 'rulesetPk' when calling updateRuleComponent");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk,
        'rule_pk': rulePk,
        'ruleset_pk': rulesetPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = RuleComponent;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a RuleComponent
     * Update some fields of a RuleComponent  Required scopes: check:write
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this rule component.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Number} rulePk A unique integer value identifying this rule.
     * @param {Number} rulesetPk A unique integer value identifying this ruleset.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedRuleComponentRequest} opts.patchedRuleComponentRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RuleComponent}
     */
    updateRuleComponent(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk, opts) {
      return this.updateRuleComponentWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, rulePk, rulesetPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update some fields of a Ruleset
     * Update some fields of a Ruleset  Required scopes: check:write
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this ruleset.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedRulesetRequest} opts.patchedRulesetRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ruleset} and HTTP response
     */
    updateRulesetWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, opts) {
      opts = opts || {};
      let postBody = opts['patchedRulesetRequest'];
      // verify the required parameter 'checkPlanPk' is set
      if (checkPlanPk === undefined || checkPlanPk === null) {
        throw new Error("Missing the required parameter 'checkPlanPk' when calling updateRuleset");
      }
      // verify the required parameter 'cloudPk' is set
      if (cloudPk === undefined || cloudPk === null) {
        throw new Error("Missing the required parameter 'cloudPk' when calling updateRuleset");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRuleset");
      }
      // verify the required parameter 'projectPk' is set
      if (projectPk === undefined || projectPk === null) {
        throw new Error("Missing the required parameter 'projectPk' when calling updateRuleset");
      }

      let pathParams = {
        'check_plan_pk': checkPlanPk,
        'cloud_pk': cloudPk,
        'id': id,
        'project_pk': projectPk
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'BIMData_Connect', 'Bearer'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Ruleset;
      return this.apiClient.callApi(
        '/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update some fields of a Ruleset
     * Update some fields of a Ruleset  Required scopes: check:write
     * @param {Number} checkPlanPk A unique integer value identifying this check plan.
     * @param {Number} cloudPk A unique integer value identifying this cloud.
     * @param {Number} id A unique integer value identifying this ruleset.
     * @param {Number} projectPk A unique integer value identifying this project.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedRulesetRequest} opts.patchedRulesetRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ruleset}
     */
    updateRuleset(checkPlanPk, cloudPk, id, projectPk, opts) {
      return this.updateRulesetWithHttpInfo(checkPlanPk, cloudPk, id, projectPk, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
