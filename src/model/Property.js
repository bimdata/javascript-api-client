/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1 (v1)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnyType from './AnyType';
import PropertyDefinition from './PropertyDefinition';

/**
 * The Property model module.
 * @module model/Property
 * @version 0.0.0
 */
class Property {
    /**
     * Constructs a new <code>Property</code>.
     * Adds nested create feature
     * @alias module:model/Property
     * @param id {Number} 
     * @param definition {module:model/PropertyDefinition} 
     * @param propertySetId {Number} This field is useful when you update a property and the  API is rebuilding a new property set to avoid an update on many elements. It gives you the new pset id
     * @param createdAt {Date} 
     * @param updatedAt {Date} 
     */
    constructor(id, definition, propertySetId, createdAt, updatedAt) { 
        
        Property.initialize(this, id, definition, propertySetId, createdAt, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, definition, propertySetId, createdAt, updatedAt) { 
        obj['id'] = id;
        obj['definition'] = definition;
        obj['property_set_id'] = propertySetId;
        obj['created_at'] = createdAt;
        obj['updated_at'] = updatedAt;
    }

    /**
     * Constructs a <code>Property</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Property} obj Optional instance to populate.
     * @return {module:model/Property} The populated <code>Property</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Property();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('definition')) {
                obj['definition'] = PropertyDefinition.constructFromObject(data['definition']);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], {'String': AnyType});
            }
            if (data.hasOwnProperty('property_set_id')) {
                obj['property_set_id'] = ApiClient.convertToType(data['property_set_id'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} id
 */
Property.prototype['id'] = undefined;

/**
 * @member {module:model/PropertyDefinition} definition
 */
Property.prototype['definition'] = undefined;

/**
 * @member {Object.<String, module:model/AnyType>} value
 */
Property.prototype['value'] = undefined;

/**
 * This field is useful when you update a property and the  API is rebuilding a new property set to avoid an update on many elements. It gives you the new pset id
 * @member {Number} property_set_id
 */
Property.prototype['property_set_id'] = undefined;

/**
 * @member {Date} created_at
 */
Property.prototype['created_at'] = undefined;

/**
 * @member {Date} updated_at
 */
Property.prototype['updated_at'] = undefined;






export default Property;

