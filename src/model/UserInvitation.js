/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import User from './User';

/**
 * The UserInvitation model module.
 * @module model/UserInvitation
 * @version 0.0.0
 */
class UserInvitation {
    /**
     * Constructs a new <code>UserInvitation</code>.
     * @alias module:model/UserInvitation
     * @param id {Number} 
     * @param redirectUri {String} User will be redirected to this uri when they accept the invitation
     * @param cloudId {Number} 
     * @param cloudName {String} 
     * @param projectId {Number} 
     * @param clientName {String} 
     * @param sender {module:model/User} 
     * @param createdAt {Date} 
     */
    constructor(id, redirectUri, cloudId, cloudName, projectId, clientName, sender, createdAt) { 
        
        UserInvitation.initialize(this, id, redirectUri, cloudId, cloudName, projectId, clientName, sender, createdAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, redirectUri, cloudId, cloudName, projectId, clientName, sender, createdAt) { 
        obj['id'] = id;
        obj['redirect_uri'] = redirectUri;
        obj['cloud_id'] = cloudId;
        obj['cloud_name'] = cloudName;
        obj['project_id'] = projectId;
        obj['client_name'] = clientName;
        obj['sender'] = sender;
        obj['created_at'] = createdAt;
    }

    /**
     * Constructs a <code>UserInvitation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserInvitation} obj Optional instance to populate.
     * @return {module:model/UserInvitation} The populated <code>UserInvitation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserInvitation();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('redirect_uri')) {
                obj['redirect_uri'] = ApiClient.convertToType(data['redirect_uri'], 'String');
            }
            if (data.hasOwnProperty('cloud_id')) {
                obj['cloud_id'] = ApiClient.convertToType(data['cloud_id'], 'Number');
            }
            if (data.hasOwnProperty('cloud_name')) {
                obj['cloud_name'] = ApiClient.convertToType(data['cloud_name'], 'String');
            }
            if (data.hasOwnProperty('project_id')) {
                obj['project_id'] = ApiClient.convertToType(data['project_id'], 'Number');
            }
            if (data.hasOwnProperty('project_name')) {
                obj['project_name'] = ApiClient.convertToType(data['project_name'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('client_name')) {
                obj['client_name'] = ApiClient.convertToType(data['client_name'], 'String');
            }
            if (data.hasOwnProperty('sender')) {
                obj['sender'] = User.constructFromObject(data['sender']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('responded_at')) {
                obj['responded_at'] = ApiClient.convertToType(data['responded_at'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} id
 */
UserInvitation.prototype['id'] = undefined;

/**
 * User will be redirected to this uri when they accept the invitation
 * @member {String} redirect_uri
 */
UserInvitation.prototype['redirect_uri'] = undefined;

/**
 * @member {Number} cloud_id
 */
UserInvitation.prototype['cloud_id'] = undefined;

/**
 * @member {String} cloud_name
 */
UserInvitation.prototype['cloud_name'] = undefined;

/**
 * @member {Number} project_id
 */
UserInvitation.prototype['project_id'] = undefined;

/**
 * @member {String} project_name
 */
UserInvitation.prototype['project_name'] = undefined;

/**
 *          A: Accepted         D: Denied         P: Pending         
 * @member {module:model/UserInvitation.StatusEnum} status
 */
UserInvitation.prototype['status'] = undefined;

/**
 * @member {String} client_name
 */
UserInvitation.prototype['client_name'] = undefined;

/**
 * @member {module:model/User} sender
 */
UserInvitation.prototype['sender'] = undefined;

/**
 * @member {Date} created_at
 */
UserInvitation.prototype['created_at'] = undefined;

/**
 * @member {Date} responded_at
 */
UserInvitation.prototype['responded_at'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
UserInvitation['StatusEnum'] = {

    /**
     * value: "A"
     * @const
     */
    "A": "A",

    /**
     * value: "D"
     * @const
     */
    "D": "D",

    /**
     * value: "P"
     * @const
     */
    "P": "P"
};



export default UserInvitation;

