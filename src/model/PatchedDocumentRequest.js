/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PatchedDocumentRequest model module.
 * @module model/PatchedDocumentRequest
 * @version 0.0.0
 */
class PatchedDocumentRequest {
    /**
     * Constructs a new <code>PatchedDocumentRequest</code>.
     * @alias module:model/PatchedDocumentRequest
     */
    constructor() { 
        
        PatchedDocumentRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PatchedDocumentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatchedDocumentRequest} obj Optional instance to populate.
     * @return {module:model/PatchedDocumentRequest} The populated <code>PatchedDocumentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatchedDocumentRequest();

            if (data.hasOwnProperty('parent_id')) {
                obj['parent_id'] = ApiClient.convertToType(data['parent_id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('file_name')) {
                obj['file_name'] = ApiClient.convertToType(data['file_name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('file')) {
                obj['file'] = ApiClient.convertToType(data['file'], File);
            }
            if (data.hasOwnProperty('model_source')) {
                obj['model_source'] = ApiClient.convertToType(data['model_source'], 'String');
            }
            if (data.hasOwnProperty('ifc_source')) {
                obj['ifc_source'] = ApiClient.convertToType(data['ifc_source'], 'String');
            }
            if (data.hasOwnProperty('successor_of')) {
                obj['successor_of'] = ApiClient.convertToType(data['successor_of'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} parent_id
 */
PatchedDocumentRequest.prototype['parent_id'] = undefined;

/**
 * Shown name of the file
 * @member {String} name
 */
PatchedDocumentRequest.prototype['name'] = undefined;

/**
 * Full name of the file
 * @member {String} file_name
 */
PatchedDocumentRequest.prototype['file_name'] = undefined;

/**
 * Description of the file
 * @member {String} description
 */
PatchedDocumentRequest.prototype['description'] = undefined;

/**
 * @member {File} file
 */
PatchedDocumentRequest.prototype['file'] = undefined;

/**
 * Define the model.source field if the upload is a Model (IFC, PDF, DWG...)  * `UPLOAD` - UPLOAD * `SPLIT` - SPLIT * `MERGE` - MERGE * `EXPORT` - EXPORT * `OPTIMIZED` - OPTIMIZED
 * @member {module:model/PatchedDocumentRequest.ModelSourceEnum} model_source
 */
PatchedDocumentRequest.prototype['model_source'] = undefined;

/**
 * DEPRECATED: Use 'model_source' instead. Define the model.source field if the upload is a Model (IFC, PDF, DWG...)  * `UPLOAD` - UPLOAD * `SPLIT` - SPLIT * `MERGE` - MERGE * `EXPORT` - EXPORT * `OPTIMIZED` - OPTIMIZED
 * @member {module:model/PatchedDocumentRequest.IfcSourceEnum} ifc_source
 */
PatchedDocumentRequest.prototype['ifc_source'] = undefined;

/**
 * Old document version to replace. Only for create
 * @member {Number} successor_of
 */
PatchedDocumentRequest.prototype['successor_of'] = undefined;





/**
 * Allowed values for the <code>model_source</code> property.
 * @enum {String}
 * @readonly
 */
PatchedDocumentRequest['ModelSourceEnum'] = {

    /**
     * value: "UPLOAD"
     * @const
     */
    "UPLOAD": "UPLOAD",

    /**
     * value: "SPLIT"
     * @const
     */
    "SPLIT": "SPLIT",

    /**
     * value: "MERGE"
     * @const
     */
    "MERGE": "MERGE",

    /**
     * value: "EXPORT"
     * @const
     */
    "EXPORT": "EXPORT",

    /**
     * value: "OPTIMIZED"
     * @const
     */
    "OPTIMIZED": "OPTIMIZED"
};


/**
 * Allowed values for the <code>ifc_source</code> property.
 * @enum {String}
 * @readonly
 */
PatchedDocumentRequest['IfcSourceEnum'] = {

    /**
     * value: "UPLOAD"
     * @const
     */
    "UPLOAD": "UPLOAD",

    /**
     * value: "SPLIT"
     * @const
     */
    "SPLIT": "SPLIT",

    /**
     * value: "MERGE"
     * @const
     */
    "MERGE": "MERGE",

    /**
     * value: "EXPORT"
     * @const
     */
    "EXPORT": "EXPORT",

    /**
     * value: "OPTIMIZED"
     * @const
     */
    "OPTIMIZED": "OPTIMIZED"
};



export default PatchedDocumentRequest;

