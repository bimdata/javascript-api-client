/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TopicEventAction from './TopicEventAction';

/**
 * The TopicEvent model module.
 * @module model/TopicEvent
 * @version 0.0.0
 */
class TopicEvent {
    /**
     * Constructs a new <code>TopicEvent</code>.
     * @alias module:model/TopicEvent
     * @param topicGuid {String} 
     * @param author {String} 
     * @param date {Date} 
     * @param events {Array.<module:model/TopicEventAction>} 
     */
    constructor(topicGuid, author, date, events) { 
        
        TopicEvent.initialize(this, topicGuid, author, date, events);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, topicGuid, author, date, events) { 
        obj['topic_guid'] = topicGuid;
        obj['author'] = author;
        obj['date'] = date;
        obj['events'] = events;
    }

    /**
     * Constructs a <code>TopicEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TopicEvent} obj Optional instance to populate.
     * @return {module:model/TopicEvent} The populated <code>TopicEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TopicEvent();

            if (data.hasOwnProperty('topic_guid')) {
                obj['topic_guid'] = ApiClient.convertToType(data['topic_guid'], 'String');
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = ApiClient.convertToType(data['author'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], [TopicEventAction]);
            }
        }
        return obj;
    }


}

/**
 * @member {String} topic_guid
 */
TopicEvent.prototype['topic_guid'] = undefined;

/**
 * @member {String} author
 */
TopicEvent.prototype['author'] = undefined;

/**
 * @member {Date} date
 */
TopicEvent.prototype['date'] = undefined;

/**
 * @member {Array.<module:model/TopicEventAction>} events
 */
TopicEvent.prototype['events'] = undefined;






export default TopicEvent;

