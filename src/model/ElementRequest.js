/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClassificationRequest from './ClassificationRequest';
import LayerElementRequest from './LayerElementRequest';
import PropertySetRequest from './PropertySetRequest';

/**
 * The ElementRequest model module.
 * @module model/ElementRequest
 * @version 0.0.0
 */
class ElementRequest {
    /**
     * Constructs a new <code>ElementRequest</code>.
     * Adds nested create feature
     * @alias module:model/ElementRequest
     * @param type {String} IFC type for the element
     */
    constructor(type) { 
        
        ElementRequest.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ElementRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ElementRequest} obj Optional instance to populate.
     * @return {module:model/ElementRequest} The populated <code>ElementRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ElementRequest();

            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = PropertySetRequest.constructFromObject(data['attributes']);
            }
            if (data.hasOwnProperty('property_sets')) {
                obj['property_sets'] = ApiClient.convertToType(data['property_sets'], [PropertySetRequest]);
            }
            if (data.hasOwnProperty('classifications')) {
                obj['classifications'] = ApiClient.convertToType(data['classifications'], [ClassificationRequest]);
            }
            if (data.hasOwnProperty('layers')) {
                obj['layers'] = ApiClient.convertToType(data['layers'], [LayerElementRequest]);
            }
        }
        return obj;
    }


}

/**
 * @member {String} uuid
 */
ElementRequest.prototype['uuid'] = undefined;

/**
 * IFC type for the element
 * @member {String} type
 */
ElementRequest.prototype['type'] = undefined;

/**
 * @member {module:model/PropertySetRequest} attributes
 */
ElementRequest.prototype['attributes'] = undefined;

/**
 * @member {Array.<module:model/PropertySetRequest>} property_sets
 */
ElementRequest.prototype['property_sets'] = undefined;

/**
 * @member {Array.<module:model/ClassificationRequest>} classifications
 */
ElementRequest.prototype['classifications'] = undefined;

/**
 * @member {Array.<module:model/LayerElementRequest>} layers
 */
ElementRequest.prototype['layers'] = undefined;






export default ElementRequest;

