/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserProject from './UserProject';

/**
 * The VisaValidation model module.
 * @module model/VisaValidation
 * @version 0.0.0
 */
class VisaValidation {
    /**
     * Constructs a new <code>VisaValidation</code>.
     * @alias module:model/VisaValidation
     * @param id {Number} 
     * @param visaId {Number} 
     * @param validator {module:model/UserProject} 
     * @param status {module:model/VisaValidation.StatusEnum} * `P` - pending * `A` - accepted * `D` - denied
     * @param hasCommented {Boolean} Return True if validator has commented the visa
     * @param createdAt {Date} 
     * @param updatedAt {Date} 
     */
    constructor(id, visaId, validator, status, hasCommented, createdAt, updatedAt) { 
        
        VisaValidation.initialize(this, id, visaId, validator, status, hasCommented, createdAt, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, visaId, validator, status, hasCommented, createdAt, updatedAt) { 
        obj['id'] = id;
        obj['visa_id'] = visaId;
        obj['validator'] = validator;
        obj['status'] = status;
        obj['has_commented'] = hasCommented;
        obj['created_at'] = createdAt;
        obj['updated_at'] = updatedAt;
    }

    /**
     * Constructs a <code>VisaValidation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VisaValidation} obj Optional instance to populate.
     * @return {module:model/VisaValidation} The populated <code>VisaValidation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VisaValidation();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('visa_id')) {
                obj['visa_id'] = ApiClient.convertToType(data['visa_id'], 'Number');
            }
            if (data.hasOwnProperty('validator')) {
                obj['validator'] = ApiClient.convertToType(data['validator'], UserProject);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('has_commented')) {
                obj['has_commented'] = ApiClient.convertToType(data['has_commented'], 'Boolean');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('attachment')) {
                obj['attachment'] = ApiClient.convertToType(data['attachment'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} id
 */
VisaValidation.prototype['id'] = undefined;

/**
 * @member {Number} visa_id
 */
VisaValidation.prototype['visa_id'] = undefined;

/**
 * @member {module:model/UserProject} validator
 */
VisaValidation.prototype['validator'] = undefined;

/**
 * * `P` - pending * `A` - accepted * `D` - denied
 * @member {module:model/VisaValidation.StatusEnum} status
 */
VisaValidation.prototype['status'] = undefined;

/**
 * Return True if validator has commented the visa
 * @member {Boolean} has_commented
 */
VisaValidation.prototype['has_commented'] = undefined;

/**
 * @member {Date} created_at
 */
VisaValidation.prototype['created_at'] = undefined;

/**
 * @member {Date} updated_at
 */
VisaValidation.prototype['updated_at'] = undefined;

/**
 * @member {String} attachment
 */
VisaValidation.prototype['attachment'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
VisaValidation['StatusEnum'] = {

    /**
     * value: "P"
     * @const
     */
    "P": "P",

    /**
     * value: "A"
     * @const
     */
    "A": "A",

    /**
     * value: "D"
     * @const
     */
    "D": "D"
};



export default VisaValidation;

