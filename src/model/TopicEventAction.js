/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TopicEventAction model module.
 * @module model/TopicEventAction
 * @version 0.0.0
 */
class TopicEventAction {
    /**
     * Constructs a new <code>TopicEventAction</code>.
     * @alias module:model/TopicEventAction
     * @param type {module:model/TopicEventAction.TypeEnum} * `topic_created` - topic_created * `title_updated` - title_updated * `description_updated` - description_updated * `description_removed` - description_removed * `due_date_updated` - due_date_updated * `due_date_removed` - due_date_removed * `assigned_to_updated` - assigned_to_updated * `assigned_to_removed` - assigned_to_removed * `status_updated` - status_updated * `status_removed` - status_removed * `type_updated` - type_updated * `type_removed` - type_removed * `priority_updated` - priority_updated * `priority_removed` - priority_removed * `stage_updated` - stage_updated * `stage_removed` - stage_removed * `label_added` - label_added * `label_removed` - label_removed
     * @param value {String} 
     */
    constructor(type, value) { 
        
        TopicEventAction.initialize(this, type, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, value) { 
        obj['type'] = type;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>TopicEventAction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TopicEventAction} obj Optional instance to populate.
     * @return {module:model/TopicEventAction} The populated <code>TopicEventAction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TopicEventAction();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }


}

/**
 * * `topic_created` - topic_created * `title_updated` - title_updated * `description_updated` - description_updated * `description_removed` - description_removed * `due_date_updated` - due_date_updated * `due_date_removed` - due_date_removed * `assigned_to_updated` - assigned_to_updated * `assigned_to_removed` - assigned_to_removed * `status_updated` - status_updated * `status_removed` - status_removed * `type_updated` - type_updated * `type_removed` - type_removed * `priority_updated` - priority_updated * `priority_removed` - priority_removed * `stage_updated` - stage_updated * `stage_removed` - stage_removed * `label_added` - label_added * `label_removed` - label_removed
 * @member {module:model/TopicEventAction.TypeEnum} type
 */
TopicEventAction.prototype['type'] = undefined;

/**
 * @member {String} value
 */
TopicEventAction.prototype['value'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
TopicEventAction['TypeEnum'] = {

    /**
     * value: "topic_created"
     * @const
     */
    "topic_created": "topic_created",

    /**
     * value: "title_updated"
     * @const
     */
    "title_updated": "title_updated",

    /**
     * value: "description_updated"
     * @const
     */
    "description_updated": "description_updated",

    /**
     * value: "description_removed"
     * @const
     */
    "description_removed": "description_removed",

    /**
     * value: "due_date_updated"
     * @const
     */
    "due_date_updated": "due_date_updated",

    /**
     * value: "due_date_removed"
     * @const
     */
    "due_date_removed": "due_date_removed",

    /**
     * value: "assigned_to_updated"
     * @const
     */
    "assigned_to_updated": "assigned_to_updated",

    /**
     * value: "assigned_to_removed"
     * @const
     */
    "assigned_to_removed": "assigned_to_removed",

    /**
     * value: "status_updated"
     * @const
     */
    "status_updated": "status_updated",

    /**
     * value: "status_removed"
     * @const
     */
    "status_removed": "status_removed",

    /**
     * value: "type_updated"
     * @const
     */
    "type_updated": "type_updated",

    /**
     * value: "type_removed"
     * @const
     */
    "type_removed": "type_removed",

    /**
     * value: "priority_updated"
     * @const
     */
    "priority_updated": "priority_updated",

    /**
     * value: "priority_removed"
     * @const
     */
    "priority_removed": "priority_removed",

    /**
     * value: "stage_updated"
     * @const
     */
    "stage_updated": "stage_updated",

    /**
     * value: "stage_removed"
     * @const
     */
    "stage_removed": "stage_removed",

    /**
     * value: "label_added"
     * @const
     */
    "label_added": "label_added",

    /**
     * value: "label_removed"
     * @const
     */
    "label_removed": "label_removed"
};



export default TopicEventAction;

