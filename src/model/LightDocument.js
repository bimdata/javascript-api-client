/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LightDocument model module.
 * @module model/LightDocument
 * @version 0.0.0
 */
class LightDocument {
    /**
     * Constructs a new <code>LightDocument</code>.
     * @alias module:model/LightDocument
     * @param id {Number} 
     * @param parentId {Number} 
     * @param name {String} Shown name of the file
     * @param description {String} Description of the file
     * @param headId {Number} Document id of head version
     * @param isHeadVersion {Boolean} Document is a head of version or is owned by another document
     */
    constructor(id, parentId, name, description, headId, isHeadVersion) { 
        
        LightDocument.initialize(this, id, parentId, name, description, headId, isHeadVersion);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, parentId, name, description, headId, isHeadVersion) { 
        obj['id'] = id;
        obj['parent_id'] = parentId;
        obj['name'] = name;
        obj['description'] = description;
        obj['head_id'] = headId;
        obj['is_head_version'] = isHeadVersion;
    }

    /**
     * Constructs a <code>LightDocument</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LightDocument} obj Optional instance to populate.
     * @return {module:model/LightDocument} The populated <code>LightDocument</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LightDocument();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('parent_id')) {
                obj['parent_id'] = ApiClient.convertToType(data['parent_id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('head_id')) {
                obj['head_id'] = ApiClient.convertToType(data['head_id'], 'Number');
            }
            if (data.hasOwnProperty('is_head_version')) {
                obj['is_head_version'] = ApiClient.convertToType(data['is_head_version'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} id
 */
LightDocument.prototype['id'] = undefined;

/**
 * @member {Number} parent_id
 */
LightDocument.prototype['parent_id'] = undefined;

/**
 * Shown name of the file
 * @member {String} name
 */
LightDocument.prototype['name'] = undefined;

/**
 * Description of the file
 * @member {String} description
 */
LightDocument.prototype['description'] = undefined;

/**
 * Document id of head version
 * @member {Number} head_id
 */
LightDocument.prototype['head_id'] = undefined;

/**
 * Document is a head of version or is owned by another document
 * @member {Boolean} is_head_version
 */
LightDocument.prototype['is_head_version'] = undefined;






export default LightDocument;

