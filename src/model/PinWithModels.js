/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GeometryPoint from './GeometryPoint';

/**
 * The PinWithModels model module.
 * @module model/PinWithModels
 * @version 0.0.0
 */
class PinWithModels {
    /**
     * Constructs a new <code>PinWithModels</code>.
     * @alias module:model/PinWithModels
     * @param guid {String} 
     * @param name {String} 
     * @param color {String}              Color of the pin in hexadecimal string without the '#' prefix.             Example: 'fff', 'fff0', '0f0f0f', '0f0f0f00'.         
     * @param point {module:model/GeometryPoint} 
     * @param index {Number} 
     * @param modelIds {Array.<Number>} 
     */
    constructor(guid, name, color, point, index, modelIds) { 
        
        PinWithModels.initialize(this, guid, name, color, point, index, modelIds);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, guid, name, color, point, index, modelIds) { 
        obj['guid'] = guid;
        obj['name'] = name;
        obj['color'] = color;
        obj['point'] = point;
        obj['index'] = index;
        obj['model_ids'] = modelIds;
    }

    /**
     * Constructs a <code>PinWithModels</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PinWithModels} obj Optional instance to populate.
     * @return {module:model/PinWithModels} The populated <code>PinWithModels</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PinWithModels();

            if (data.hasOwnProperty('guid')) {
                obj['guid'] = ApiClient.convertToType(data['guid'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('point')) {
                obj['point'] = GeometryPoint.constructFromObject(data['point']);
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('model_ids')) {
                obj['model_ids'] = ApiClient.convertToType(data['model_ids'], ['Number']);
            }
        }
        return obj;
    }


}

/**
 * @member {String} guid
 */
PinWithModels.prototype['guid'] = undefined;

/**
 * @member {String} name
 */
PinWithModels.prototype['name'] = undefined;

/**
 *              Color of the pin in hexadecimal string without the '#' prefix.             Example: 'fff', 'fff0', '0f0f0f', '0f0f0f00'.         
 * @member {String} color
 */
PinWithModels.prototype['color'] = undefined;

/**
 * @member {module:model/GeometryPoint} point
 */
PinWithModels.prototype['point'] = undefined;

/**
 * @member {Number} index
 */
PinWithModels.prototype['index'] = undefined;

/**
 * @member {Array.<Number>} model_ids
 */
PinWithModels.prototype['model_ids'] = undefined;






export default PinWithModels;

