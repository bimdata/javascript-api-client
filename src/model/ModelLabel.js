/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Geometry2dPoint from './Geometry2dPoint';
import User from './User';

/**
 * The ModelLabel model module.
 * @module model/ModelLabel
 * @version 0.0.0
 */
class ModelLabel {
    /**
     * Constructs a new <code>ModelLabel</code>.
     * @alias module:model/ModelLabel
     * @param id {Number} 
     * @param model {Number} The model to which the label is attached
     * @param name {String} Name of the label
     * @param geometry {Array.<module:model/Geometry2dPoint>} 
     * @param creator {module:model/User} 
     * @param createdAt {Date} Creation date
     * @param updatedAt {Date} Date of the last update
     */
    constructor(id, model, name, geometry, creator, createdAt, updatedAt) { 
        
        ModelLabel.initialize(this, id, model, name, geometry, creator, createdAt, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, model, name, geometry, creator, createdAt, updatedAt) { 
        obj['id'] = id;
        obj['model'] = model;
        obj['name'] = name;
        obj['geometry'] = geometry;
        obj['creator'] = creator;
        obj['created_at'] = createdAt;
        obj['updated_at'] = updatedAt;
    }

    /**
     * Constructs a <code>ModelLabel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModelLabel} obj Optional instance to populate.
     * @return {module:model/ModelLabel} The populated <code>ModelLabel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModelLabel();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('geometry')) {
                obj['geometry'] = ApiClient.convertToType(data['geometry'], [Geometry2dPoint]);
            }
            if (data.hasOwnProperty('human_validated')) {
                obj['human_validated'] = ApiClient.convertToType(data['human_validated'], 'Boolean');
            }
            if (data.hasOwnProperty('creator')) {
                obj['creator'] = ApiClient.convertToType(data['creator'], User);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} id
 */
ModelLabel.prototype['id'] = undefined;

/**
 * The model to which the label is attached
 * @member {Number} model
 */
ModelLabel.prototype['model'] = undefined;

/**
 * Name of the label
 * @member {String} name
 */
ModelLabel.prototype['name'] = undefined;

/**
 *              Color of the label in hexadecimal string without the '#' prefix.             Example: 'fff', 'fff0', '0f0f0f', '0f0f0f00'.         
 * @member {String} color
 */
ModelLabel.prototype['color'] = undefined;

/**
 * @member {Array.<module:model/Geometry2dPoint>} geometry
 */
ModelLabel.prototype['geometry'] = undefined;

/**
 * Whether the label has been created or validated by a human or not
 * @member {Boolean} human_validated
 */
ModelLabel.prototype['human_validated'] = undefined;

/**
 * @member {module:model/User} creator
 */
ModelLabel.prototype['creator'] = undefined;

/**
 * Creation date
 * @member {Date} created_at
 */
ModelLabel.prototype['created_at'] = undefined;

/**
 * Date of the last update
 * @member {Date} updated_at
 */
ModelLabel.prototype['updated_at'] = undefined;






export default ModelLabel;

