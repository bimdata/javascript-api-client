/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Size model module.
 * @module model/Size
 * @version 0.0.0
 */
class Size {
    /**
     * Constructs a new <code>Size</code>.
     * @alias module:model/Size
     * @param managedBy {module:model/Size.ManagedByEnum} 
     * @param role {module:model/Size.RoleEnum} 
     * @param totalSize {Number} 
     * @param smartDataSize {Number} 
     * @param totalSizeAvailable {Number} 
     * @param smartDataSizeAvailable {Number} 
     * @param remainingTotalSize {Number} 
     * @param remainingSmartDataSize {Number} 
     * @param remainingTotalSizePercent {Number} 
     * @param remainingSmartDataSizePercent {Number} 
     */
    constructor(managedBy, role, totalSize, smartDataSize, totalSizeAvailable, smartDataSizeAvailable, remainingTotalSize, remainingSmartDataSize, remainingTotalSizePercent, remainingSmartDataSizePercent) { 
        
        Size.initialize(this, managedBy, role, totalSize, smartDataSize, totalSizeAvailable, smartDataSizeAvailable, remainingTotalSize, remainingSmartDataSize, remainingTotalSizePercent, remainingSmartDataSizePercent);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, managedBy, role, totalSize, smartDataSize, totalSizeAvailable, smartDataSizeAvailable, remainingTotalSize, remainingSmartDataSize, remainingTotalSizePercent, remainingSmartDataSizePercent) { 
        obj['managed_by'] = managedBy;
        obj['role'] = role;
        obj['total_size'] = totalSize;
        obj['smart_data_size'] = smartDataSize;
        obj['total_size_available'] = totalSizeAvailable;
        obj['smart_data_size_available'] = smartDataSizeAvailable;
        obj['remaining_total_size'] = remainingTotalSize;
        obj['remaining_smart_data_size'] = remainingSmartDataSize;
        obj['remaining_total_size_percent'] = remainingTotalSizePercent;
        obj['remaining_smart_data_size_percent'] = remainingSmartDataSizePercent;
    }

    /**
     * Constructs a <code>Size</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Size} obj Optional instance to populate.
     * @return {module:model/Size} The populated <code>Size</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Size();

            if (data.hasOwnProperty('managed_by')) {
                obj['managed_by'] = ApiClient.convertToType(data['managed_by'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'Number');
            }
            if (data.hasOwnProperty('total_size')) {
                obj['total_size'] = ApiClient.convertToType(data['total_size'], 'Number');
            }
            if (data.hasOwnProperty('smart_data_size')) {
                obj['smart_data_size'] = ApiClient.convertToType(data['smart_data_size'], 'Number');
            }
            if (data.hasOwnProperty('total_size_available')) {
                obj['total_size_available'] = ApiClient.convertToType(data['total_size_available'], 'Number');
            }
            if (data.hasOwnProperty('smart_data_size_available')) {
                obj['smart_data_size_available'] = ApiClient.convertToType(data['smart_data_size_available'], 'Number');
            }
            if (data.hasOwnProperty('remaining_total_size')) {
                obj['remaining_total_size'] = ApiClient.convertToType(data['remaining_total_size'], 'Number');
            }
            if (data.hasOwnProperty('remaining_smart_data_size')) {
                obj['remaining_smart_data_size'] = ApiClient.convertToType(data['remaining_smart_data_size'], 'Number');
            }
            if (data.hasOwnProperty('remaining_total_size_percent')) {
                obj['remaining_total_size_percent'] = ApiClient.convertToType(data['remaining_total_size_percent'], 'Number');
            }
            if (data.hasOwnProperty('remaining_smart_data_size_percent')) {
                obj['remaining_smart_data_size_percent'] = ApiClient.convertToType(data['remaining_smart_data_size_percent'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/Size.ManagedByEnum} managed_by
 */
Size.prototype['managed_by'] = undefined;

/**
 * @member {module:model/Size.RoleEnum} role
 */
Size.prototype['role'] = undefined;

/**
 * @member {Number} total_size
 */
Size.prototype['total_size'] = undefined;

/**
 * @member {Number} smart_data_size
 */
Size.prototype['smart_data_size'] = undefined;

/**
 * @member {Number} total_size_available
 */
Size.prototype['total_size_available'] = undefined;

/**
 * @member {Number} smart_data_size_available
 */
Size.prototype['smart_data_size_available'] = undefined;

/**
 * @member {Number} remaining_total_size
 */
Size.prototype['remaining_total_size'] = undefined;

/**
 * @member {Number} remaining_smart_data_size
 */
Size.prototype['remaining_smart_data_size'] = undefined;

/**
 * @member {Number} remaining_total_size_percent
 */
Size.prototype['remaining_total_size_percent'] = undefined;

/**
 * @member {Number} remaining_smart_data_size_percent
 */
Size.prototype['remaining_smart_data_size_percent'] = undefined;





/**
 * Allowed values for the <code>managed_by</code> property.
 * @enum {String}
 * @readonly
 */
Size['ManagedByEnum'] = {

    /**
     * value: "BIMDATA_PLATFORM"
     * @const
     */
    "BIMDATA_PLATFORM": "BIMDATA_PLATFORM",

    /**
     * value: "ORGANIZATION"
     * @const
     */
    "ORGANIZATION": "ORGANIZATION"
};


/**
 * Allowed values for the <code>role</code> property.
 * @enum {Number}
 * @readonly
 */
Size['RoleEnum'] = {

    /**
     * value: 100
     * @const
     */
    "100": 100,

    /**
     * value: 50
     * @const
     */
    "50": 50
};



export default Size;

