/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PatchedTransformRequest model module.
 * @module model/PatchedTransformRequest
 * @version 0.0.0
 */
class PatchedTransformRequest {
    /**
     * Constructs a new <code>PatchedTransformRequest</code>.
     * @alias module:model/PatchedTransformRequest
     */
    constructor() { 
        
        PatchedTransformRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PatchedTransformRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatchedTransformRequest} obj Optional instance to populate.
     * @return {module:model/PatchedTransformRequest} The populated <code>PatchedTransformRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatchedTransformRequest();

            if (data.hasOwnProperty('translate')) {
                obj['translate'] = ApiClient.convertToType(data['translate'], ['Number']);
            }
            if (data.hasOwnProperty('rotate')) {
                obj['rotate'] = ApiClient.convertToType(data['rotate'], 'Number');
            }
            if (data.hasOwnProperty('scale')) {
                obj['scale'] = ApiClient.convertToType(data['scale'], 'Number');
            }
            if (data.hasOwnProperty('opacity')) {
                obj['opacity'] = ApiClient.convertToType(data['opacity'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Translation vector [x, y, z]
 * @member {Array.<Number>} translate
 */
PatchedTransformRequest.prototype['translate'] = undefined;

/**
 * Rotation angle in degrees
 * @member {Number} rotate
 */
PatchedTransformRequest.prototype['rotate'] = undefined;

/**
 * Scale factor
 * @member {Number} scale
 */
PatchedTransformRequest.prototype['scale'] = undefined;

/**
 * Opacity factor
 * @member {Number} opacity
 */
PatchedTransformRequest.prototype['opacity'] = undefined;






export default PatchedTransformRequest;

