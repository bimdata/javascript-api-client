/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PropertyList model module.
 * @module model/PropertyList
 * @version 0.0.0
 */
class PropertyList {
    /**
     * Constructs a new <code>PropertyList</code>.
     * @alias module:model/PropertyList
     * @param name {String} 
     * @param valueType {module:model/PropertyList.ValueTypeEnum} * `string` - string * `number` - number * `boolean` - boolean
     */
    constructor(name, valueType) { 
        
        PropertyList.initialize(this, name, valueType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, valueType) { 
        obj['name'] = name;
        obj['value_type'] = valueType;
    }

    /**
     * Constructs a <code>PropertyList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PropertyList} obj Optional instance to populate.
     * @return {module:model/PropertyList} The populated <code>PropertyList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PropertyList();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('value_type')) {
                obj['value_type'] = ApiClient.convertToType(data['value_type'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} name
 */
PropertyList.prototype['name'] = undefined;

/**
 * * `string` - string * `number` - number * `boolean` - boolean
 * @member {module:model/PropertyList.ValueTypeEnum} value_type
 */
PropertyList.prototype['value_type'] = undefined;





/**
 * Allowed values for the <code>value_type</code> property.
 * @enum {String}
 * @readonly
 */
PropertyList['ValueTypeEnum'] = {

    /**
     * value: "string"
     * @const
     */
    "string": "string",

    /**
     * value: "number"
     * @const
     */
    "number": "number",

    /**
     * value: "boolean"
     * @const
     */
    "boolean": "boolean"
};



export default PropertyList;

