/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PropertySet from './PropertySet';

/**
 * The Material model module.
 * @module model/Material
 * @version 0.0.0
 */
class Material {
    /**
     * Constructs a new <code>Material</code>.
     * Default behavior: - retrieve kwargs in the route (cloud_pk, project_pk, etc) - trim the _pk (cloud_pk &#x3D;&gt; cloud) - check if the object has a foreign key with the name - if so, set the foreign key to the value in the route Override: If the serializer has a method \&quot;get_parents\&quot;, we call it and set the parents The method \&quot;get_parents\&quot; should return an iterable of tuples : (parent_field_name, parent_object)
     * @alias module:model/Material
     * @param name {String} 
     * @param propertySets {Array.<module:model/PropertySet>} 
     */
    constructor(name, propertySets) { 
        
        Material.initialize(this, name, propertySets);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, propertySets) { 
        obj['name'] = name;
        obj['property_sets'] = propertySets;
    }

    /**
     * Constructs a <code>Material</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Material} obj Optional instance to populate.
     * @return {module:model/Material} The populated <code>Material</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Material();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('property_sets')) {
                obj['property_sets'] = ApiClient.convertToType(data['property_sets'], [PropertySet]);
            }
        }
        return obj;
    }


}

/**
 * @member {Number} id
 */
Material.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Material.prototype['name'] = undefined;

/**
 * @member {String} category
 */
Material.prototype['category'] = undefined;

/**
 * @member {String} description
 */
Material.prototype['description'] = undefined;

/**
 * 
 * @member {Array.<module:model/PropertySet>} property_sets
 */
Material.prototype['property_sets'] = undefined;






export default Material;

