/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GroupFolderRead from './GroupFolderRead';
import ShortUser from './ShortUser';

/**
 * The WriteFolder model module.
 * @module model/WriteFolder
 * @version 0.0.0
 */
class WriteFolder {
    /**
     * Constructs a new <code>WriteFolder</code>.
     * @alias module:model/WriteFolder
     * @param updatedAt {Date} Date of the last update
     * @param groupsPermissions {Array.<module:model/GroupFolderRead>} List of group permissions
     * @param userPermission {module:model/WriteFolder.UserPermissionEnum} Aggregate of group user permissions and folder default permission
     * @param name {String} Name of the folder
     * @param nature {String} Value is \"Folder\". It is usefull to parse the tree and discriminate folders and files
     * @param createdBy {module:model/ShortUser} 
     * @param createdAt {Date} Creation date
     * @param id {Number} 
     * @param type {String} DEPRECATED: Use 'nature' instead. Value is \"Folder\". It is usefull to parse the tree and discriminate folders and files
     */
    constructor(updatedAt, groupsPermissions, userPermission, name, nature, createdBy, createdAt, id, type) { 
        
        WriteFolder.initialize(this, updatedAt, groupsPermissions, userPermission, name, nature, createdBy, createdAt, id, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, updatedAt, groupsPermissions, userPermission, name, nature, createdBy, createdAt, id, type) { 
        obj['updated_at'] = updatedAt;
        obj['groups_permissions'] = groupsPermissions;
        obj['user_permission'] = userPermission;
        obj['name'] = name;
        obj['nature'] = nature;
        obj['created_by'] = createdBy;
        obj['created_at'] = createdAt;
        obj['id'] = id;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>WriteFolder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WriteFolder} obj Optional instance to populate.
     * @return {module:model/WriteFolder} The populated <code>WriteFolder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WriteFolder();

            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('groups_permissions')) {
                obj['groups_permissions'] = ApiClient.convertToType(data['groups_permissions'], [GroupFolderRead]);
            }
            if (data.hasOwnProperty('user_permission')) {
                obj['user_permission'] = ApiClient.convertToType(data['user_permission'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nature')) {
                obj['nature'] = ApiClient.convertToType(data['nature'], 'String');
            }
            if (data.hasOwnProperty('created_by')) {
                obj['created_by'] = ApiClient.convertToType(data['created_by'], ShortUser);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('default_permission')) {
                obj['default_permission'] = ApiClient.convertToType(data['default_permission'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('parent_id')) {
                obj['parent_id'] = ApiClient.convertToType(data['parent_id'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('children')) {
                obj['children'] = ApiClient.convertToType(data['children'], [WriteFolder]);
            }
        }
        return obj;
    }


}

/**
 * Date of the last update
 * @member {Date} updated_at
 */
WriteFolder.prototype['updated_at'] = undefined;

/**
 * List of group permissions
 * @member {Array.<module:model/GroupFolderRead>} groups_permissions
 */
WriteFolder.prototype['groups_permissions'] = undefined;

/**
 * Aggregate of group user permissions and folder default permission
 * @member {module:model/WriteFolder.UserPermissionEnum} user_permission
 */
WriteFolder.prototype['user_permission'] = undefined;

/**
 * Name of the folder
 * @member {String} name
 */
WriteFolder.prototype['name'] = undefined;

/**
 * Value is \"Folder\". It is usefull to parse the tree and discriminate folders and files
 * @member {String} nature
 */
WriteFolder.prototype['nature'] = undefined;

/**
 * @member {module:model/ShortUser} created_by
 */
WriteFolder.prototype['created_by'] = undefined;

/**
 * Creation date
 * @member {Date} created_at
 */
WriteFolder.prototype['created_at'] = undefined;

/**
 * Permission for a Folder  * `1` - denied * `50` - read_only * `100` - read_write
 * @member {module:model/WriteFolder.DefaultPermissionEnum} default_permission
 */
WriteFolder.prototype['default_permission'] = undefined;

/**
 * @member {Number} id
 */
WriteFolder.prototype['id'] = undefined;

/**
 * @member {Number} parent_id
 */
WriteFolder.prototype['parent_id'] = undefined;

/**
 * DEPRECATED: Use 'nature' instead. Value is \"Folder\". It is usefull to parse the tree and discriminate folders and files
 * @member {String} type
 */
WriteFolder.prototype['type'] = undefined;

/**
 * @member {Array.<module:model/WriteFolder>} children
 */
WriteFolder.prototype['children'] = undefined;





/**
 * Allowed values for the <code>user_permission</code> property.
 * @enum {Number}
 * @readonly
 */
WriteFolder['UserPermissionEnum'] = {

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 50
     * @const
     */
    "50": 50,

    /**
     * value: 100
     * @const
     */
    "100": 100
};


/**
 * Allowed values for the <code>default_permission</code> property.
 * @enum {Number}
 * @readonly
 */
WriteFolder['DefaultPermissionEnum'] = {

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 50
     * @const
     */
    "50": 50,

    /**
     * value: 100
     * @const
     */
    "100": 100
};



export default WriteFolder;

