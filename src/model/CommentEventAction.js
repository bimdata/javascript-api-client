/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CommentEventAction model module.
 * @module model/CommentEventAction
 * @version 0.0.0
 */
class CommentEventAction {
    /**
     * Constructs a new <code>CommentEventAction</code>.
     * @alias module:model/CommentEventAction
     * @param type {module:model/CommentEventAction.TypeEnum} * `comment_created` - comment_created * `comment_text_updated` - comment_text_updated * `viewpoint_updated` - viewpoint_updated * `viewpoint_removed` - viewpoint_removed * `reply_to_comment_updated` - reply_to_comment_updated * `reply_to_comment_removed` - reply_to_comment_removed
     * @param value {String} 
     */
    constructor(type, value) { 
        
        CommentEventAction.initialize(this, type, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, value) { 
        obj['type'] = type;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>CommentEventAction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommentEventAction} obj Optional instance to populate.
     * @return {module:model/CommentEventAction} The populated <code>CommentEventAction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommentEventAction();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }


}

/**
 * * `comment_created` - comment_created * `comment_text_updated` - comment_text_updated * `viewpoint_updated` - viewpoint_updated * `viewpoint_removed` - viewpoint_removed * `reply_to_comment_updated` - reply_to_comment_updated * `reply_to_comment_removed` - reply_to_comment_removed
 * @member {module:model/CommentEventAction.TypeEnum} type
 */
CommentEventAction.prototype['type'] = undefined;

/**
 * @member {String} value
 */
CommentEventAction.prototype['value'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CommentEventAction['TypeEnum'] = {

    /**
     * value: "comment_created"
     * @const
     */
    "comment_created": "comment_created",

    /**
     * value: "comment_text_updated"
     * @const
     */
    "comment_text_updated": "comment_text_updated",

    /**
     * value: "viewpoint_updated"
     * @const
     */
    "viewpoint_updated": "viewpoint_updated",

    /**
     * value: "viewpoint_removed"
     * @const
     */
    "viewpoint_removed": "viewpoint_removed",

    /**
     * value: "reply_to_comment_updated"
     * @const
     */
    "reply_to_comment_updated": "reply_to_comment_updated",

    /**
     * value: "reply_to_comment_removed"
     * @const
     */
    "reply_to_comment_removed": "reply_to_comment_removed"
};



export default CommentEventAction;

